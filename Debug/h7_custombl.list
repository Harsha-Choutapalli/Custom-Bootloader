
h7_custombl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b0c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e04  08007e04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08007e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001904  240001e4  08007ff0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001ae8  08007ff0  00021ae8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e666  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000392c  00000000  00000000  0003e878  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000421a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  00042ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037ba1  00000000  00000000  00043cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f26d  00000000  00000000  0007b871  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00150a37  00000000  00000000  0008aade  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001db515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  001db590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d8c 	.word	0x08007d8c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	08007d8c 	.word	0x08007d8c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fa6f 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f827 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f8dd 	bl	80004a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002ea:	f006 ff49 	bl	8007180 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char mystr[] = "hello\n\r";
 80002ee:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <main+0x50>)
 80002f0:	463b      	mov	r3, r7
 80002f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f6:	e883 0003 	stmia.w	r3, {r0, r1}
	  CDC_Transmit_FS((uint8_t*)mystr,sizeof(mystr));
 80002fa:	463b      	mov	r3, r7
 80002fc:	2108      	movs	r1, #8
 80002fe:	4618      	mov	r0, r3
 8000300:	f007 f812 	bl	8007328 <CDC_Transmit_FS>
	  if(flag == 1)
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <main+0x54>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d1f0      	bne.n	80002ee <main+0x16>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x58>)
 8000310:	f000 fdef 	bl	8000ef2 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000318:	f000 fae4 	bl	80008e4 <HAL_Delay>
		  JumpToBootloader();
 800031c:	f000 f906 	bl	800052c <JumpToBootloader>
		  flag = 0;
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <main+0x54>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
  {
 8000326:	e7e2      	b.n	80002ee <main+0x16>
 8000328:	08007da4 	.word	0x08007da4
 800032c:	24000200 	.word	0x24000200
 8000330:	58020400 	.word	0x58020400

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b0cc      	sub	sp, #304	; 0x130
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800033e:	224c      	movs	r2, #76	; 0x4c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f007 fc60 	bl	8007c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800034c:	2220      	movs	r2, #32
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f007 fc59 	bl	8007c08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	4618      	mov	r0, r3
 800035c:	23bc      	movs	r3, #188	; 0xbc
 800035e:	461a      	mov	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f007 fc51 	bl	8007c08 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000366:	2002      	movs	r0, #2
 8000368:	f001 ffba 	bl	80022e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	4b4a      	ldr	r3, [pc, #296]	; (800049c <SystemClock_Config+0x168>)
 8000374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000376:	4a49      	ldr	r2, [pc, #292]	; (800049c <SystemClock_Config+0x168>)
 8000378:	f023 0301 	bic.w	r3, r3, #1
 800037c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800037e:	4b47      	ldr	r3, [pc, #284]	; (800049c <SystemClock_Config+0x168>)
 8000380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000382:	f003 0201 	and.w	r2, r3, #1
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4b45      	ldr	r3, [pc, #276]	; (80004a0 <SystemClock_Config+0x16c>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a44      	ldr	r2, [pc, #272]	; (80004a0 <SystemClock_Config+0x16c>)
 8000390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <SystemClock_Config+0x16c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003a6:	bf00      	nop
 80003a8:	4b3d      	ldr	r3, [pc, #244]	; (80004a0 <SystemClock_Config+0x16c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003b4:	d1f8      	bne.n	80003a8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003b6:	2330      	movs	r3, #48	; 0x30
 80003b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.CSICalibrationValue = 16;
 80003c8:	2310      	movs	r3, #16
 80003ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80003d4:	2301      	movs	r3, #1
 80003d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 80003e0:	2326      	movs	r3, #38	; 0x26
 80003e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003ec:	2304      	movs	r3, #4
 80003ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80003f8:	2308      	movs	r3, #8
 80003fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80003fe:	2302      	movs	r3, #2
 8000400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800040e:	4618      	mov	r0, r3
 8000410:	f002 f8da 	bl	80025c8 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800041a:	f000 f8bf 	bl	800059c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	233f      	movs	r3, #63	; 0x3f
 8000420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2303      	movs	r3, #3
 8000426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800044e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000452:	2101      	movs	r1, #1
 8000454:	4618      	mov	r0, r3
 8000456:	f002 fc8f 	bl	8002d78 <HAL_RCC_ClockConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000460:	f000 f89c 	bl	800059c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800046c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4618      	mov	r0, r3
 8000480:	f002 ffd2 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800048a:	f000 f887 	bl	800059c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800048e:	f001 ff61 	bl	8002354 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000492:	bf00      	nop
 8000494:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	58000400 	.word	0x58000400
 80004a0:	58024800 	.word	0x58024800

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_GPIO_Init+0x80>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a18      	ldr	r2, [pc, #96]	; (8000524 <MX_GPIO_Init+0x80>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_GPIO_Init+0x80>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_GPIO_Init+0x80>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_GPIO_Init+0x80>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_GPIO_Init+0x80>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <MX_GPIO_Init+0x84>)
 80004fc:	f000 fce0 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	4619      	mov	r1, r3
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_GPIO_Init+0x84>)
 8000518:	f000 fb22 	bl	8000b60 <HAL_GPIO_Init>

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	58024400 	.word	0x58024400
 8000528:	58020400 	.word	0x58020400

0800052c <JumpToBootloader>:

/* USER CODE BEGIN 4 */
void JumpToBootloader(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
  uint32_t i=0;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  void (*SysMemBootJump)(void);
  /* Set the address of the entry point to bootloader */
     volatile uint32_t BootAddr = 0x1FF09800;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <JumpToBootloader+0x64>)
 8000538:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053a:	b672      	cpsid	i
  /* Disable all interrupts */
     __disable_irq();
  /* Disable Systick timer */
     SysTick->CTRL = 0;
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <JumpToBootloader+0x68>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
  /* Set the clock to the default state */
     HAL_RCC_DeInit();
 8000542:	f001 ff17 	bl	8002374 <HAL_RCC_DeInit>
  /* Clear Interrupt Enable Register & Interrupt Pending Register */
     for (i=0;i<5;i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e010      	b.n	800056e <JumpToBootloader+0x42>
     {
  NVIC->ICER[i]=0xFFFFFFFF;
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <JumpToBootloader+0x6c>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3320      	adds	r3, #32
 8000552:	f04f 31ff 	mov.w	r1, #4294967295
 8000556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  NVIC->ICPR[i]=0xFFFFFFFF;
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <JumpToBootloader+0x6c>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3360      	adds	r3, #96	; 0x60
 8000560:	f04f 31ff 	mov.w	r1, #4294967295
 8000564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     for (i=0;i<5;i++)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d9eb      	bls.n	800054c <JumpToBootloader+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 8000574:	b662      	cpsie	i
     }
  /* Re-enable all interrupts */
     __enable_irq();
  /* Set up the1ff09800 jump to booloader address + 4 */
     SysMemBootJump = (void (*)(void)) (*((uint32_t *) ((BootAddr + 4))));
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60bb      	str	r3, [r7, #8]
  /* Set the main stack pointer to the bootloader stack */
     __set_MSP(*(uint32_t *)BootAddr);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f383 8808 	msr	MSP, r3
  /* Call the function to jump to bootloader location */
     SysMemBootJump();
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4798      	blx	r3
  /* Jump is done successfully */
     while (1)
 800058e:	e7fe      	b.n	800058e <JumpToBootloader+0x62>
 8000590:	1ff09800 	.word	0x1ff09800
 8000594:	e000e010 	.word	0xe000e010
 8000598:	e000e100 	.word	0xe000e100

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_MspInit+0x30>)
 80005b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <HAL_MspInit+0x30>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_MspInit+0x30>)
 80005c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	58024400 	.word	0x58024400

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f936 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <OTG_FS_IRQHandler+0x10>)
 8000642:	f000 fdc8 	bl	80011d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	240016dc 	.word	0x240016dc

08000650 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_sbrk+0x50>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <_sbrk+0x16>
		heap_end = &end;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <_sbrk+0x50>)
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <_sbrk+0x54>)
 8000664:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <_sbrk+0x50>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_sbrk+0x50>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	466a      	mov	r2, sp
 8000676:	4293      	cmp	r3, r2
 8000678:	d907      	bls.n	800068a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800067a:	f007 fa8b 	bl	8007b94 <__errno>
 800067e:	4602      	mov	r2, r0
 8000680:	230c      	movs	r3, #12
 8000682:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	e006      	b.n	8000698 <_sbrk+0x48>
	}

	heap_end += incr;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <_sbrk+0x50>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <_sbrk+0x50>)
 8000694:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	24000204 	.word	0x24000204
 80006a4:	24001ae8 	.word	0x24001ae8

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemInit+0xac>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <SystemInit+0xac>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xb0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <SystemInit+0xb0>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemInit+0xb0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xb0>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4921      	ldr	r1, [pc, #132]	; (8000758 <SystemInit+0xb0>)
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <SystemInit+0xb4>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xb0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xb0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xb0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xb0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xb0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xb0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xb0>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xb0>)
 8000706:	2200      	movs	r2, #0
 8000708:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xb0>)
 800070c:	2200      	movs	r2, #0
 800070e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xb0>)
 8000712:	2200      	movs	r2, #0
 8000714:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <SystemInit+0xb0>)
 8000718:	2200      	movs	r2, #0
 800071a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xb0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <SystemInit+0xb0>)
 8000722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000726:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <SystemInit+0xb0>)
 800072a:	2200      	movs	r2, #0
 800072c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <SystemInit+0xb8>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <SystemInit+0xbc>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <SystemInit+0xc0>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xac>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	5c001000 	.word	0x5c001000
 8000764:	ffff0000 	.word	0xffff0000
 8000768:	51008108 	.word	0x51008108

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000770:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000772:	e003      	b.n	800077c <LoopCopyDataInit>

08000774 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000776:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000778:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800077a:	3104      	adds	r1, #4

0800077c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800077c:	480b      	ldr	r0, [pc, #44]	; (80007ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000780:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000782:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000784:	d3f6      	bcc.n	8000774 <CopyDataInit>
  ldr  r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000788:	e002      	b.n	8000790 <LoopFillZerobss>

0800078a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800078a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800078c:	f842 3b04 	str.w	r3, [r2], #4

08000790 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000792:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000794:	d3f9      	bcc.n	800078a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000796:	f7ff ff87 	bl	80006a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f007 fa01 	bl	8007ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fd9b 	bl	80002d8 <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80007a8:	08007e0c 	.word	0x08007e0c
  ldr  r0, =_sdata
 80007ac:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80007b0:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 80007b4:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 80007b8:	24001ae8 	.word	0x24001ae8

080007bc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC3_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c6:	2003      	movs	r0, #3
 80007c8:	f000 f98a 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007cc:	f002 fc8a 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80007d0:	4601      	mov	r1, r0
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_Init+0x68>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	f003 030f 	and.w	r3, r3, #15
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <HAL_Init+0x6c>)
 80007de:	5cd3      	ldrb	r3, [r2, r3]
 80007e0:	f003 031f 	and.w	r3, r3, #31
 80007e4:	fa21 f303 	lsr.w	r3, r1, r3
 80007e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_Init+0x68>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_Init+0x6c>)
 80007f4:	5cd3      	ldrb	r3, [r2, r3]
 80007f6:	f003 031f 	and.w	r3, r3, #31
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_Init+0x70>)
 8000802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <HAL_Init+0x74>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f814 	bl	8000838 <HAL_InitTick>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e002      	b.n	8000820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800081a:	f7ff fec7 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	58024400 	.word	0x58024400
 800082c:	08007df4 	.word	0x08007df4
 8000830:	24000004 	.word	0x24000004
 8000834:	24000000 	.word	0x24000000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_InitTick+0x60>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e021      	b.n	8000890 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_InitTick+0x64>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_InitTick+0x60>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f96f 	bl	8000b46 <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f939 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x68>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2400000c 	.word	0x2400000c
 800089c:	24000000 	.word	0x24000000
 80008a0:	24000008 	.word	0x24000008

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2400000c 	.word	0x2400000c
 80008c8:	24000214 	.word	0x24000214

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	24000214 	.word	0x24000214

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_Delay+0x40>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2400000c 	.word	0x2400000c

08000928 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetREVID+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0c1b      	lsrs	r3, r3, #16
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	5c001000 	.word	0x5c001000

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <__NVIC_SetPriorityGrouping+0x40>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	4313      	orrs	r3, r2
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x40>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	05fa0000 	.word	0x05fa0000

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <__NVIC_EnableIRQ+0x38>)
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff8e 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff29 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff40 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff33 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa4 	bl	8000a9c <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b6e:	4b89      	ldr	r3, [pc, #548]	; (8000d94 <HAL_GPIO_Init+0x234>)
 8000b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b72:	e194      	b.n	8000e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 8186 	beq.w	8000e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d00b      	beq.n	8000bac <HAL_GPIO_Init+0x4c>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d007      	beq.n	8000bac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba0:	2b11      	cmp	r3, #17
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b12      	cmp	r3, #18
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 0201 	and.w	r2, r3, #1
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0xee>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d123      	bne.n	8000c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	69b9      	ldr	r1, [r7, #24]
 8000c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0203 	and.w	r2, r3, #3
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80e0 	beq.w	8000e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cde:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_GPIO_Init+0x23c>)
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_GPIO_Init+0x240>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d052      	beq.n	8000dc8 <HAL_GPIO_Init+0x268>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_GPIO_Init+0x244>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d031      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_GPIO_Init+0x248>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d02b      	beq.n	8000d8a <HAL_GPIO_Init+0x22a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_GPIO_Init+0x24c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d025      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_GPIO_Init+0x250>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d01f      	beq.n	8000d82 <HAL_GPIO_Init+0x222>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x254>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d019      	beq.n	8000d7e <HAL_GPIO_Init+0x21e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x258>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0x21a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x25c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00d      	beq.n	8000d76 <HAL_GPIO_Init+0x216>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x260>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x212>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_GPIO_Init+0x264>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_GPIO_Init+0x20e>
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	e02d      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d6e:	230a      	movs	r3, #10
 8000d70:	e02b      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d72:	2308      	movs	r3, #8
 8000d74:	e029      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d76:	2307      	movs	r3, #7
 8000d78:	e027      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e025      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e023      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d82:	2304      	movs	r3, #4
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e01f      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e01d      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e01b      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d92:	bf00      	nop
 8000d94:	58000080 	.word	0x58000080
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58000400 	.word	0x58000400
 8000da0:	58020000 	.word	0x58020000
 8000da4:	58020400 	.word	0x58020400
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020c00 	.word	0x58020c00
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58021800 	.word	0x58021800
 8000dbc:	58021c00 	.word	0x58021c00
 8000dc0:	58022000 	.word	0x58022000
 8000dc4:	58022400 	.word	0x58022400
 8000dc8:	2300      	movs	r3, #0
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dda:	4938      	ldr	r1, [pc, #224]	; (8000ebc <HAL_GPIO_Init+0x35c>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f47f ae63 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	58000400 	.word	0x58000400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	401a      	ands	r2, r3
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d104      	bne.n	8000f16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	041a      	lsls	r2, r3, #16
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b08f      	sub	sp, #60	; 0x3c
 8000f2c:	af0a      	add	r7, sp, #40	; 0x28
 8000f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e116      	b.n	8001168 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f006 fb1b 	bl	8007590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fbac 	bl	80046d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	687e      	ldr	r6, [r7, #4]
 8000f86:	466d      	mov	r5, sp
 8000f88:	f106 0410 	add.w	r4, r6, #16
 8000f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9c:	1d33      	adds	r3, r6, #4
 8000f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f003 fa83 	bl	80044ac <USB_CoreInit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0d7      	b.n	8001168 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fb9a 	bl	80046f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e04a      	b.n	8001060 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	333d      	adds	r3, #61	; 0x3d
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	333c      	adds	r3, #60	; 0x3c
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3342      	adds	r3, #66	; 0x42
 8001006:	4602      	mov	r2, r0
 8001008:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	333f      	adds	r3, #63	; 0x3f
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	3344      	adds	r3, #68	; 0x44
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3348      	adds	r3, #72	; 0x48
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3350      	adds	r3, #80	; 0x50
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3af      	bcc.n	8000fca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e044      	b.n	80010fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	3301      	adds	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d3b5      	bcc.n	8001070 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	687e      	ldr	r6, [r7, #4]
 800110c:	466d      	mov	r5, sp
 800110e:	f106 0410 	add.w	r4, r6, #16
 8001112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001122:	1d33      	adds	r3, r6, #4
 8001124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f003 fb10 	bl	800474c <USB_DevInit>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e014      	b.n	8001168 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 f892 	bl	8002280 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f004 faf7 	bl	8005754 <USB_DevDisconnect>

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001170 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_PCD_Start+0x1c>
 8001188:	2302      	movs	r3, #2
 800118a:	e020      	b.n	80011ce <HAL_PCD_Start+0x5e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	2b01      	cmp	r3, #1
 800119a:	d109      	bne.n	80011b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d005      	beq.n	80011b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fab5 	bl	8005724 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fa78 	bl	80046b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011d6:	b590      	push	{r4, r7, lr}
 80011d8:	b08d      	sub	sp, #52	; 0x34
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fb5c 	bl	80058aa <USB_GetMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 83ca 	bne.w	800198e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fac0 	bl	8005784 <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 83c0 	beq.w	800198c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f004 fab7 	bl	8005784 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f002 0202 	and.w	r2, r2, #2
 800122e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f004 faa5 	bl	8005784 <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b10      	cmp	r3, #16
 8001242:	d161      	bne.n	8001308 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0210 	bic.w	r2, r2, #16
 8001252:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 020f 	and.w	r2, r3, #15
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	0c5b      	lsrs	r3, r3, #17
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	2b02      	cmp	r3, #2
 800127e:	d124      	bne.n	80012ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d035      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	6a38      	ldr	r0, [r7, #32]
 80012a0:	f004 f91d 	bl	80054de <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b0:	441a      	add	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	699a      	ldr	r2, [r3, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c2:	441a      	add	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	e016      	b.n	80012f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	0c5b      	lsrs	r3, r3, #17
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d110      	bne.n	80012f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012dc:	2208      	movs	r2, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	6a38      	ldr	r0, [r7, #32]
 80012e2:	f004 f8fc 	bl	80054de <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0210 	orr.w	r2, r2, #16
 8001306:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f004 fa39 	bl	8005784 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001318:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800131c:	d16e      	bne.n	80013fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fa3f 	bl	80057aa <USB_ReadDevAllOutEpInterrupt>
 800132c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800132e:	e062      	b.n	80013f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d057      	beq.n	80013ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fa64 	bl	8005812 <USB_ReadDevOutEPInterrupt>
 800134a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001362:	461a      	mov	r2, r3
 8001364:	2301      	movs	r3, #1
 8001366:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fdde 	bl	8001f2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00c      	beq.n	8001394 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2308      	movs	r3, #8
 800138a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fed8 	bl	8002144 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2310      	movs	r3, #16
 80013ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c6:	461a      	mov	r2, r3
 80013c8:	2320      	movs	r3, #32
 80013ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e2:	461a      	mov	r2, r3
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	3301      	adds	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d199      	bne.n	8001330 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f004 f9bf 	bl	8005784 <USB_ReadInterrupts>
 8001406:	4603      	mov	r3, r0
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001410:	f040 80c0 	bne.w	8001594 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f004 f9e0 	bl	80057de <USB_ReadDevAllInEpInterrupt>
 800141e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001424:	e0b2      	b.n	800158c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a7 	beq.w	8001580 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fa06 	bl	800584e <USB_ReadDevInEPInterrupt>
 8001442:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d057      	beq.n	80014fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	2201      	movs	r2, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	69f9      	ldr	r1, [r7, #28]
 800146a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800146e:	4013      	ands	r3, r2
 8001470:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147e:	461a      	mov	r2, r3
 8001480:	2301      	movs	r3, #1
 8001482:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d132      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3348      	adds	r3, #72	; 0x48
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4403      	add	r3, r0
 80014ac:	3344      	adds	r3, #68	; 0x44
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4419      	add	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4403      	add	r3, r0
 80014c0:	3348      	adds	r3, #72	; 0x48
 80014c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d113      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x31c>
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ce:	4613      	mov	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3350      	adds	r3, #80	; 0x50
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014ea:	461a      	mov	r2, r3
 80014ec:	2101      	movs	r1, #1
 80014ee:	f004 fa0f 	bl	8005910 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f006 f8c8 	bl	800768e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001514:	461a      	mov	r2, r3
 8001516:	2308      	movs	r3, #8
 8001518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001530:	461a      	mov	r2, r3
 8001532:	2310      	movs	r3, #16
 8001534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154c:	461a      	mov	r2, r3
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001568:	461a      	mov	r2, r3
 800156a:	2302      	movs	r3, #2
 800156c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fc48 	bl	8001e10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3301      	adds	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f af49 	bne.w	8001426 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f004 f8f3 	bl	8005784 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015a8:	d122      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fe78 	bl	80022c8 <HAL_PCDEx_LPM_Callback>
 80015d8:	e002      	b.n	80015e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f006 f8ce 	bl	800777c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 f8c5 	bl	8005784 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001604:	d112      	bne.n	800162c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f006 f88a 	bl	8007730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800162a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f004 f8a7 	bl	8005784 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800163c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001640:	d121      	bne.n	8001686 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001650:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	f003 020f 	and.w	r2, r3, #15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001676:	2101      	movs	r1, #1
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fe25 	bl	80022c8 <HAL_PCDEx_LPM_Callback>
 800167e:	e002      	b.n	8001686 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f006 f855 	bl	8007730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f87a 	bl	8005784 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169a:	f040 80c7 	bne.w	800182c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2110      	movs	r1, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 f9a5 	bl	8004a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c2:	e056      	b.n	8001772 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e8:	0151      	lsls	r1, r2, #5
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	440a      	add	r2, r1
 80016ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001708:	0151      	lsls	r1, r2, #5
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	440a      	add	r2, r1
 800170e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001724:	461a      	mov	r2, r3
 8001726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800172a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173c:	0151      	lsls	r1, r2, #5
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	440a      	add	r2, r1
 8001742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800174a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	015a      	lsls	r2, r3, #5
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	4413      	add	r3, r2
 8001754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175c:	0151      	lsls	r1, r2, #5
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	440a      	add	r2, r1
 8001762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800176a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	3301      	adds	r3, #1
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001778:	429a      	cmp	r2, r3
 800177a:	d3a3      	bcc.n	80016c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800178e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	2b00      	cmp	r3, #0
 8001796:	d016      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a8:	f043 030b 	orr.w	r3, r3, #11
 80017ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017be:	f043 030b 	orr.w	r3, r3, #11
 80017c2:	6453      	str	r3, [r2, #68]	; 0x44
 80017c4:	e015      	b.n	80017f2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	4619      	mov	r1, r3
 80017d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80017da:	4313      	orrs	r3, r2
 80017dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ec:	f043 030b 	orr.w	r3, r3, #11
 80017f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001800:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001804:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001816:	461a      	mov	r2, r3
 8001818:	f004 f87a 	bl	8005910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800182a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 ffa7 	bl	8005784 <USB_ReadInterrupts>
 8001836:	4603      	mov	r3, r0
 8001838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001840:	d124      	bne.n	800188c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f004 f83e 	bl	80058c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 f93a 	bl	8004aca <USB_GetDevSpeed>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	f001 fdb1 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8001866:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f002 fe7d 	bl	8004570 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f005 ff31 	bl	80076de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800188a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 ff77 	bl	8005784 <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b08      	cmp	r3, #8
 800189e:	d10a      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f005 ff0e 	bl	80076c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f002 0208 	and.w	r2, r2, #8
 80018b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 ff62 	bl	8005784 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ca:	d10f      	bne.n	80018ec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f005 ff70 	bl	80077bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 ff47 	bl	8005784 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001900:	d10f      	bne.n	8001922 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f005 ff43 	bl	8007798 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 ff2c 	bl	8005784 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001936:	d10a      	bne.n	800194e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f005 ff51 	bl	80077e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800194c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 ff16 	bl	8005784 <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b04      	cmp	r3, #4
 8001960:	d115      	bne.n	800198e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f005 ff41 	bl	80077fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	e000      	b.n	800198e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800198c:	bf00      	nop
    }
  }
}
 800198e:	3734      	adds	r7, #52	; 0x34
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}

08001994 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_PCD_SetAddress+0x1a>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e013      	b.n	80019d6 <HAL_PCD_SetAddress+0x42>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fe86 	bl	80056d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4603      	mov	r3, r0
 80019ee:	70fb      	strb	r3, [r7, #3]
 80019f0:	460b      	mov	r3, r1
 80019f2:	803b      	strh	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	da0f      	bge.n	8001a24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 020f 	and.w	r2, r3, #15
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3338      	adds	r3, #56	; 0x38
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	3304      	adds	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	705a      	strb	r2, [r3, #1]
 8001a22:	e00f      	b.n	8001a44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a50:	883a      	ldrh	r2, [r7, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	78ba      	ldrb	r2, [r7, #2]
 8001a5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a6e:	78bb      	ldrb	r3, [r7, #2]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_EP_Open+0xaa>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e00e      	b.n	8001aa6 <HAL_PCD_EP_Open+0xc8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f83c 	bl	8004b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da0f      	bge.n	8001ae2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3338      	adds	r3, #56	; 0x38
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e00f      	b.n	8001b02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_PCD_EP_Close+0x6e>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e00e      	b.n	8001b3a <HAL_PCD_EP_Close+0x8c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 f87a 	bl	8004c24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	f003 020f 	and.w	r2, r3, #15
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6979      	ldr	r1, [r7, #20]
 8001bb6:	f003 fb05 	bl	80051c4 <USB_EP0StartXfer>
 8001bba:	e008      	b.n	8001bce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	f003 f8af 	bl	8004d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3338      	adds	r3, #56	; 0x38
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2201      	movs	r2, #1
 8001c46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	f003 faa3 	bl	80051c4 <USB_EP0StartXfer>
 8001c7e:	e008      	b.n	8001c92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	f003 f84d 	bl	8004d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d901      	bls.n	8001cba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e050      	b.n	8001d5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da0f      	bge.n	8001ce2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 020f 	and.w	r2, r3, #15
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	3338      	adds	r3, #56	; 0x38
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	705a      	strb	r2, [r3, #1]
 8001ce0:	e00d      	b.n	8001cfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_EP_SetStall+0x82>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e01e      	b.n	8001d5c <HAL_PCD_EP_SetStall+0xc0>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fbff 	bl	8005530 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f003 fddf 	bl	8005910 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d901      	bls.n	8001d82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e042      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da0f      	bge.n	8001daa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	3338      	adds	r3, #56	; 0x38
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3304      	adds	r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	705a      	strb	r2, [r3, #1]
 8001da8:	e00f      	b.n	8001dca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_PCD_EP_ClrStall+0x86>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e00e      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0xa4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68f9      	ldr	r1, [r7, #12]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fc07 	bl	800560c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	3338      	adds	r3, #56	; 0x38
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d901      	bls.n	8001e48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e06c      	b.n	8001f22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d902      	bls.n	8001e64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3303      	adds	r3, #3
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e6c:	e02b      	b.n	8001ec6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d902      	bls.n	8001e8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6978      	ldr	r0, [r7, #20]
 8001eaa:	f003 fae3 	bl	8005474 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d809      	bhi.n	8001ef0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d203      	bcs.n	8001ef0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1be      	bne.n	8001e6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d811      	bhi.n	8001f20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	2201      	movs	r2, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	6939      	ldr	r1, [r7, #16]
 8001f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	333c      	adds	r3, #60	; 0x3c
 8001f44:	3304      	adds	r3, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f040 80a0 	bne.w	80020a4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a72      	ldr	r2, [pc, #456]	; (800213c <PCD_EP_OutXfrComplete_int+0x210>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f240 80dd 	bls.w	8002132 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80d7 	beq.w	8002132 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	461a      	mov	r2, r3
 8001f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f96:	6093      	str	r3, [r2, #8]
 8001f98:	e0cb      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	e0bc      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80b7 	bne.w	8002132 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a5d      	ldr	r2, [pc, #372]	; (800213c <PCD_EP_OutXfrComplete_int+0x210>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d90f      	bls.n	8001fec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe8:	6093      	str	r3, [r2, #8]
 8001fea:	e0a2      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ffe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	440b      	add	r3, r1
 8002008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002012:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4403      	add	r3, r0
 8002022:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002026:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4403      	add	r3, r0
 800204a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4419      	add	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002064:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d114      	bne.n	8002096 <PCD_EP_OutXfrComplete_int+0x16a>
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d108      	bne.n	8002096 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800208e:	461a      	mov	r2, r3
 8002090:	2101      	movs	r1, #1
 8002092:	f003 fc3d 	bl	8005910 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f005 fadb 	bl	8007658 <HAL_PCD_DataOutStageCallback>
 80020a2:	e046      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a26      	ldr	r2, [pc, #152]	; (8002140 <PCD_EP_OutXfrComplete_int+0x214>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d124      	bne.n	80020f6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c2:	461a      	mov	r2, r3
 80020c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c8:	6093      	str	r3, [r2, #8]
 80020ca:	e032      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e2:	461a      	mov	r2, r3
 80020e4:	2320      	movs	r3, #32
 80020e6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 fab2 	bl	8007658 <HAL_PCD_DataOutStageCallback>
 80020f4:	e01d      	b.n	8002132 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d114      	bne.n	8002126 <PCD_EP_OutXfrComplete_int+0x1fa>
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d108      	bne.n	8002126 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800211e:	461a      	mov	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	f003 fbf5 	bl	8005910 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f005 fa93 	bl	8007658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	4f54300a 	.word	0x4f54300a
 8002140:	4f54310a 	.word	0x4f54310a

08002144 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	333c      	adds	r3, #60	; 0x3c
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <PCD_EP_OutSetupPacket_int+0x88>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d90e      	bls.n	8002198 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f005 fa4b 	bl	8007634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <PCD_EP_OutSetupPacket_int+0x88>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d90c      	bls.n	80021c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021b8:	461a      	mov	r2, r3
 80021ba:	2101      	movs	r1, #1
 80021bc:	f003 fba8 	bl	8005910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	4f54300a 	.word	0x4f54300a

080021d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
 80021dc:	4613      	mov	r3, r2
 80021de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ee:	883b      	ldrh	r3, [r7, #0]
 80021f0:	0419      	lsls	r1, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
 80021fc:	e028      	b.n	8002250 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4413      	add	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e00d      	b.n	800222e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	3340      	adds	r3, #64	; 0x40
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	3b01      	subs	r3, #1
 8002234:	429a      	cmp	r2, r3
 8002236:	d3ec      	bcc.n	8002212 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002238:	883b      	ldrh	r3, [r7, #0]
 800223a:	0418      	lsls	r0, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	3b01      	subs	r3, #1
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	4302      	orrs	r2, r0
 8002248:	3340      	adds	r3, #64	; 0x40
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	10000003 	.word	0x10000003

080022c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_PWREx_ConfigSupply+0x70>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d00a      	beq.n	800230a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_PWREx_ConfigSupply+0x70>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e01f      	b.n	8002346 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e01d      	b.n	8002346 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_PWREx_ConfigSupply+0x70>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f023 0207 	bic.w	r2, r3, #7
 8002312:	490f      	ldr	r1, [pc, #60]	; (8002350 <HAL_PWREx_ConfigSupply+0x70>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4313      	orrs	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800231a:	f7fe fad7 	bl	80008cc <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002320:	e009      	b.n	8002336 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002322:	f7fe fad3 	bl	80008cc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002330:	d901      	bls.n	8002336 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_PWREx_ConfigSupply+0x70>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d1ee      	bne.n	8002322 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	58024800 	.word	0x58024800

08002354 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	58024800 	.word	0x58024800

08002374 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 800237a:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	2b06      	cmp	r3, #6
 8002384:	d80f      	bhi.n	80023a6 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002386:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 030f 	bic.w	r3, r3, #15
 800238e:	4a84      	ldr	r2, [pc, #528]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 8002390:	f043 0307 	orr.w	r3, r3, #7
 8002394:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	2b07      	cmp	r3, #7
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0f7      	b.n	8002596 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80023a6:	f7fe fa91 	bl	80008cc <HAL_GetTick>
 80023aa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80023ac:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fa87 	bl	80008cc <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0e4      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023cc:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80023d8:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a71      	ldr	r2, [pc, #452]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_DeInit+0x234>)
 80023ec:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <HAL_RCC_DeInit+0x238>)
 80023ee:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_DeInit+0x23c>)
 80023f2:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_DeInit+0x238>)
 80023f4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80023f6:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_DeInit+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fa1c 	bl	8000838 <HAL_InitTick>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0c5      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800240a:	f7fe fa5f 	bl	80008cc <HAL_GetTick>
 800240e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f7fe fa5b 	bl	80008cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0b6      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002428:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002434:	f7fe fa4a 	bl	80008cc <HAL_GetTick>
 8002438:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4959      	ldr	r1, [pc, #356]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002440:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCC_DeInit+0x244>)
 8002442:	4013      	ands	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe fa40 	bl	80008cc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e09d      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002466:	f7fe fa31 	bl	80008cc <HAL_GetTick>
 800246a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800246c:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a4c      	ldr	r2, [pc, #304]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fa27 	bl	80008cc <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e084      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002498:	f7fe fa18 	bl	80008cc <HAL_GetTick>
 800249c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fa0e 	bl	80008cc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e06b      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024ca:	f7fe f9ff 	bl	80008cc <HAL_GetTick>
 80024ce:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80024d0:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024da:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe f9f5 	bl	80008cc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e052      	b.n	8002596 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002504:	2200      	movs	r2, #0
 8002506:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002510:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_RCC_DeInit+0x248>)
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002516:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <HAL_RCC_DeInit+0x24c>)
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800251c:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <HAL_RCC_DeInit+0x250>)
 800251e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002520:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002522:	2200      	movs	r2, #0
 8002524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002528:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <HAL_RCC_DeInit+0x250>)
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002534:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <HAL_RCC_DeInit+0x250>)
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800254c:	2200      	movs	r2, #0
 800254e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002552:	f04f 32ff 	mov.w	r2, #4294967295
 8002556:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 800255a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800255e:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <HAL_RCC_DeInit+0x230>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2b07      	cmp	r3, #7
 8002572:	d90f      	bls.n	8002594 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 030f 	bic.w	r3, r3, #15
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 800257e:	f043 0307 	orr.w	r3, r3, #7
 8002582:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_DeInit+0x22c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b07      	cmp	r3, #7
 800258e:	d001      	beq.n	8002594 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	52002000 	.word	0x52002000
 80025a4:	58024400 	.word	0x58024400
 80025a8:	24000000 	.word	0x24000000
 80025ac:	03d09000 	.word	0x03d09000
 80025b0:	24000004 	.word	0x24000004
 80025b4:	24000008 	.word	0x24000008
 80025b8:	fff6ed45 	.word	0xfff6ed45
 80025bc:	02020200 	.word	0x02020200
 80025c0:	01ff0000 	.word	0x01ff0000
 80025c4:	01010280 	.word	0x01010280

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3c4      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8087 	beq.w	80026f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4ba2      	ldr	r3, [pc, #648]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f2:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d007      	beq.n	800260e <HAL_RCC_OscConfig+0x46>
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	2b18      	cmp	r3, #24
 8002602:	d110      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260e:	4b99      	ldr	r3, [pc, #612]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d06c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x12c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d168      	bne.n	80026f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e39e      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x76>
 8002630:	4b90      	ldr	r3, [pc, #576]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8f      	ldr	r2, [pc, #572]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e02e      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x98>
 8002646:	4b8b      	ldr	r3, [pc, #556]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a8a      	ldr	r2, [pc, #552]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a87      	ldr	r2, [pc, #540]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xbc>
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a81      	ldr	r2, [pc, #516]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xd4>
 8002684:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7a      	ldr	r2, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b78      	ldr	r3, [pc, #480]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a77      	ldr	r2, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe f912 	bl	80008cc <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe f90e 	bl	80008cc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e352      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xe4>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe f8fe 	bl	80008cc <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe f8fa 	bl	80008cc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e33e      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x10c>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8092 	beq.w	8002828 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002704:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800270c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800270e:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_RCC_OscConfig+0x162>
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b18      	cmp	r3, #24
 800271e:	d12d      	bne.n	800277c <HAL_RCC_OscConfig+0x1b4>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d128      	bne.n	800277c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272a:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x17a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e310      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	f7fe f8f1 	bl	8000928 <HAL_GetREVID>
 8002746:	4602      	mov	r2, r0
 8002748:	f241 0303 	movw	r3, #4099	; 0x1003
 800274c:	429a      	cmp	r2, r3
 800274e:	d80a      	bhi.n	8002766 <HAL_RCC_OscConfig+0x19e>
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	031b      	lsls	r3, r3, #12
 800275e:	4945      	ldr	r1, [pc, #276]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	e060      	b.n	8002828 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	493f      	ldr	r1, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277a:	e055      	b.n	8002828 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d038      	beq.n	80027f6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0219 	bic.w	r2, r3, #25
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4938      	ldr	r1, [pc, #224]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe f899 	bl	80008cc <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe f895 	bl	80008cc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e2d9      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	f7fe f8b4 	bl	8000928 <HAL_GetREVID>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d80a      	bhi.n	80027e0 <HAL_RCC_OscConfig+0x218>
 80027ca:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	031b      	lsls	r3, r3, #12
 80027d8:	4926      	ldr	r1, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
 80027de:	e023      	b.n	8002828 <HAL_RCC_OscConfig+0x260>
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	4921      	ldr	r1, [pc, #132]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e018      	b.n	8002828 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe f863 	bl	80008cc <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe f85f 	bl	80008cc <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e2a3      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8091 	beq.w	8002958 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d007      	beq.n	800285c <HAL_RCC_OscConfig+0x294>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b18      	cmp	r3, #24
 8002850:	d12f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2ea>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d12a      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_OscConfig+0x2ac>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_RCC_OscConfig+0x2b0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d003      	beq.n	8002878 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e277      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
 8002874:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002878:	f7fe f856 	bl	8000928 <HAL_GetREVID>
 800287c:	4602      	mov	r2, r0
 800287e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002882:	429a      	cmp	r2, r3
 8002884:	d80a      	bhi.n	800289c <HAL_RCC_OscConfig+0x2d4>
 8002886:	4ba2      	ldr	r3, [pc, #648]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	499e      	ldr	r1, [pc, #632]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800289a:	e05d      	b.n	8002958 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289c:	4b9c      	ldr	r3, [pc, #624]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4999      	ldr	r1, [pc, #612]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b0:	e052      	b.n	8002958 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d035      	beq.n	8002926 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028ba:	4b95      	ldr	r3, [pc, #596]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a94      	ldr	r2, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe f801 	bl	80008cc <HAL_GetTick>
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ce:	f7fd fffd 	bl	80008cc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e241      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028e0:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ec:	f7fe f81c 	bl	8000928 <HAL_GetREVID>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d80a      	bhi.n	8002910 <HAL_RCC_OscConfig+0x348>
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	069b      	lsls	r3, r3, #26
 8002908:	4981      	ldr	r1, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
 800290e:	e023      	b.n	8002958 <HAL_RCC_OscConfig+0x390>
 8002910:	4b7f      	ldr	r3, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	497c      	ldr	r1, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002920:	4313      	orrs	r3, r2
 8002922:	60cb      	str	r3, [r1, #12]
 8002924:	e018      	b.n	8002958 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002926:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a79      	ldr	r2, [pc, #484]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 800292c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fd ffcb 	bl	80008cc <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800293a:	f7fd ffc7 	bl	80008cc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e20b      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800294c:	4b70      	ldr	r3, [pc, #448]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d036      	beq.n	80029d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002970:	4a67      	ldr	r2, [pc, #412]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fd ffa8 	bl	80008cc <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002980:	f7fd ffa4 	bl	80008cc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1e8      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002992:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x3b8>
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a0:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	4a5a      	ldr	r2, [pc, #360]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fd ff8e 	bl	80008cc <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fd ff8a 	bl	80008cc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1ce      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c6:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d036      	beq.n	8002a4c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d019      	beq.n	8002a1a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 80029ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029f2:	f7fd ff6b 	bl	80008cc <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029fa:	f7fd ff67 	bl	80008cc <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1ab      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x432>
 8002a18:	e018      	b.n	8002a4c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a26:	f7fd ff51 	bl	80008cc <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a2e:	f7fd ff4d 	bl	80008cc <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e191      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8086 	beq.w	8002b66 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCC_OscConfig+0x54c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <HAL_RCC_OscConfig+0x54c>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a66:	f7fd ff31 	bl	80008cc <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fd ff2d 	bl	80008cc <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e171      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_OscConfig+0x54c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4da>
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_OscConfig+0x536>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4fc>
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x536>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x51e>
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x536>
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x548>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01a      	beq.n	8002b3c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fd fee1 	bl	80008cc <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b0c:	e00f      	b.n	8002b2e <HAL_RCC_OscConfig+0x566>
 8002b0e:	bf00      	nop
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fd fed8 	bl	80008cc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e11a      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2e:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x550>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7fd fec6 	bl	80008cc <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7fd fec2 	bl	80008cc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e104      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5a:	4b84      	ldr	r3, [pc, #528]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80f9 	beq.w	8002d62 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b78:	2b18      	cmp	r3, #24
 8002b7a:	f000 80b4 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	f040 8095 	bne.w	8002cb2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a77      	ldr	r2, [pc, #476]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fd fe9a 	bl	80008cc <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fd fe96 	bl	80008cc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0da      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x7a8>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	4967      	ldr	r1, [pc, #412]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	3b01      	subs	r3, #1
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c04:	4959      	ldr	r1, [pc, #356]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c0a:	4b58      	ldr	r3, [pc, #352]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	4a57      	ldr	r2, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c16:	4b55      	ldr	r3, [pc, #340]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x7ac>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c22:	00d2      	lsls	r2, r2, #3
 8002c24:	4951      	ldr	r1, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c2a:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f023 020c 	bic.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	494d      	ldr	r1, [pc, #308]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	f023 0202 	bic.w	r2, r3, #2
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	4948      	ldr	r1, [pc, #288]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4a43      	ldr	r2, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	4a40      	ldr	r2, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fd fe1f 	bl	80008cc <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fd fe1b 	bl	80008cc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e05f      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x6ca>
 8002cb0:	e057      	b.n	8002d62 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fe05 	bl	80008cc <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fd fe01 	bl	80008cc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e045      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x6fe>
 8002ce4:	e03d      	b.n	8002d62 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce6:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x7a4>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d031      	beq.n	8002d5e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d12a      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d122      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d11a      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	0a5b      	lsrs	r3, r3, #9
 8002d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d111      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d108      	bne.n	8002d5e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	0e1b      	lsrs	r3, r3, #24
 8002d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3730      	adds	r7, #48	; 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	fffffc0c 	.word	0xfffffc0c
 8002d74:	ffff0007 	.word	0xffff0007

08002d78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e19c      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d910      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 020f 	bic.w	r2, r3, #15
 8002da2:	4985      	ldr	r1, [pc, #532]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e184      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d908      	bls.n	8002dea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dd8:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4975      	ldr	r1, [pc, #468]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	4b70      	ldr	r3, [pc, #448]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d908      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	496a      	ldr	r1, [pc, #424]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	4b64      	ldr	r3, [pc, #400]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d908      	bls.n	8002e46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e34:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	495e      	ldr	r1, [pc, #376]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d908      	bls.n	8002e74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e62:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4953      	ldr	r1, [pc, #332]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d908      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f023 020f 	bic.w	r2, r3, #15
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4947      	ldr	r1, [pc, #284]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d055      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4940      	ldr	r1, [pc, #256]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d121      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0f6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d115      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0ea      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0de      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0d6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f023 0207 	bic.w	r2, r3, #7
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4925      	ldr	r1, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fd fccf 	bl	80008cc <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fd fccb 	bl	80008cc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0be      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d1eb      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d208      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d214      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4906      	ldr	r1, [pc, #24]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e086      	b.n	80030c6 <HAL_RCC_ClockConfig+0x34e>
 8002fb8:	52002000 	.word	0x52002000
 8002fbc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d208      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fdc:	4b3c      	ldr	r3, [pc, #240]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4939      	ldr	r1, [pc, #228]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003006:	429a      	cmp	r2, r3
 8003008:	d208      	bcs.n	800301c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	492e      	ldr	r1, [pc, #184]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003018:	4313      	orrs	r3, r2
 800301a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003034:	429a      	cmp	r2, r3
 8003036:	d208      	bcs.n	800304a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003046:	4313      	orrs	r3, r2
 8003048:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4917      	ldr	r1, [pc, #92]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003074:	4313      	orrs	r3, r2
 8003076:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003078:	f000 f834 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 800307c:	4601      	mov	r1, r0
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x35c>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	fa21 f303 	lsr.w	r3, r1, r3
 8003094:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x358>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_RCC_ClockConfig+0x35c>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x360>)
 80030ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x364>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x368>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fbbc 	bl	8000838 <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
 80030d4:	08007df4 	.word	0x08007df4
 80030d8:	24000004 	.word	0x24000004
 80030dc:	24000000 	.word	0x24000000
 80030e0:	24000008 	.word	0x24000008

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ea:	4baf      	ldr	r3, [pc, #700]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f2:	2b18      	cmp	r3, #24
 80030f4:	f200 814e 	bhi.w	8003394 <HAL_RCC_GetSysClockFreq+0x2b0>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003165 	.word	0x08003165
 8003104:	08003395 	.word	0x08003395
 8003108:	08003395 	.word	0x08003395
 800310c:	08003395 	.word	0x08003395
 8003110:	08003395 	.word	0x08003395
 8003114:	08003395 	.word	0x08003395
 8003118:	08003395 	.word	0x08003395
 800311c:	08003395 	.word	0x08003395
 8003120:	0800318b 	.word	0x0800318b
 8003124:	08003395 	.word	0x08003395
 8003128:	08003395 	.word	0x08003395
 800312c:	08003395 	.word	0x08003395
 8003130:	08003395 	.word	0x08003395
 8003134:	08003395 	.word	0x08003395
 8003138:	08003395 	.word	0x08003395
 800313c:	08003395 	.word	0x08003395
 8003140:	08003191 	.word	0x08003191
 8003144:	08003395 	.word	0x08003395
 8003148:	08003395 	.word	0x08003395
 800314c:	08003395 	.word	0x08003395
 8003150:	08003395 	.word	0x08003395
 8003154:	08003395 	.word	0x08003395
 8003158:	08003395 	.word	0x08003395
 800315c:	08003395 	.word	0x08003395
 8003160:	08003197 	.word	0x08003197
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003164:	4b90      	ldr	r3, [pc, #576]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003170:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	4a8c      	ldr	r2, [pc, #560]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
 8003180:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003182:	e10a      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003184:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003186:	61bb      	str	r3, [r7, #24]
    break;
 8003188:	e107      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800318a:	4b89      	ldr	r3, [pc, #548]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800318c:	61bb      	str	r3, [r7, #24]
    break;
 800318e:	e104      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003190:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003192:	61bb      	str	r3, [r7, #24]
    break;
 8003194:	e101      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003196:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031a0:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031ac:	4b7e      	ldr	r3, [pc, #504]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031b6:	4b7c      	ldr	r3, [pc, #496]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80da 	beq.w	800338e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d05a      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x1b2>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d302      	bcc.n	80031ea <HAL_RCC_GetSysClockFreq+0x106>
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d078      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x1f6>
 80031e8:	e099      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02d      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f6:	4b6c      	ldr	r3, [pc, #432]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	08db      	lsrs	r3, r3, #3
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	4a6a      	ldr	r2, [pc, #424]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003230:	ed97 6a02 	vldr	s12, [r7, #8]
 8003234:	eddf 5a60 	vldr	s11, [pc, #384]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800323c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003250:	e087      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8003260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003274:	ed97 6a02 	vldr	s12, [r7, #8]
 8003278:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800327c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003294:	e065      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80032a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a8:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80032bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80032c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032d8:	e043      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80033c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80032e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003300:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800331c:	e021      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003328:	eddf 6a25 	vldr	s13, [pc, #148]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800332c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003340:	ed97 6a02 	vldr	s12, [r7, #8]
 8003344:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003360:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336c:	3301      	adds	r3, #1
 800336e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800337a:	edd7 6a07 	vldr	s13, [r7, #28]
 800337e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003386:	ee17 3a90 	vmov	r3, s15
 800338a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800338c:	e005      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
    break;
 8003392:	e002      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003396:	61bb      	str	r3, [r7, #24]
    break;
 8003398:	bf00      	nop
  }

  return sysclockfreq;
 800339a:	69bb      	ldr	r3, [r7, #24]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3724      	adds	r7, #36	; 0x24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	58024400 	.word	0x58024400
 80033ac:	03d09000 	.word	0x03d09000
 80033b0:	003d0900 	.word	0x003d0900
 80033b4:	007a1200 	.word	0x007a1200
 80033b8:	46000000 	.word	0x46000000
 80033bc:	4c742400 	.word	0x4c742400
 80033c0:	4a742400 	.word	0x4a742400
 80033c4:	4af42400 	.word	0x4af42400

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ce:	f7ff fe89 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80033d2:	4601      	mov	r1, r0
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	fa21 f303 	lsr.w	r3, r1, r3
 80033ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	4a09      	ldr	r2, [pc, #36]	; (800341c <HAL_RCC_GetHCLKFreq+0x54>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 8003404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <HAL_RCC_GetHCLKFreq+0x58>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	08007df4 	.word	0x08007df4
 8003420:	24000004 	.word	0x24000004
 8003424:	24000000 	.word	0x24000000

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003434:	2300      	movs	r3, #0
 8003436:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344c:	d013      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d802      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003458:	e01f      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345e:	d013      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003460:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003464:	d01c      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003466:	e018      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003468:	4baf      	ldr	r3, [pc, #700]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4aae      	ldr	r2, [pc, #696]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003474:	e015      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 feb1 	bl	80041e4 <RCCEx_PLL2_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003486:	e00c      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3324      	adds	r3, #36	; 0x24
 800348c:	2102      	movs	r1, #2
 800348e:	4618      	mov	r0, r3
 8003490:	f000 ff5a 	bl	8004348 <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003498:	e003      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
      break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80034a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034a8:	4b9f      	ldr	r3, [pc, #636]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b4:	499c      	ldr	r1, [pc, #624]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	650b      	str	r3, [r1, #80]	; 0x50
 80034ba:	e001      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d03d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d826      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034f1 	.word	0x080034f1
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003529 	.word	0x08003529
 80034ec:	08003529 	.word	0x08003529
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a8c      	ldr	r2, [pc, #560]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034fc:	e015      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fe6d 	bl	80041e4 <RCCEx_PLL2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800350e:	e00c      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f000 ff16 	bl	8004348 <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003530:	4b7d      	ldr	r3, [pc, #500]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	f023 0207 	bic.w	r2, r3, #7
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	497a      	ldr	r1, [pc, #488]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800353e:	4313      	orrs	r3, r2
 8003540:	650b      	str	r3, [r1, #80]	; 0x50
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03e      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d01c      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d804      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d00d      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003568:	e01e      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800356a:	2bc0      	cmp	r3, #192	; 0xc0
 800356c:	d01f      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800356e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003572:	d01e      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003574:	e018      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4a6b      	ldr	r2, [pc, #428]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003582:	e017      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fe2a 	bl	80041e4 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003594:	e00e      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3324      	adds	r3, #36	; 0x24
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fed3 	bl	8004348 <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	4958      	ldr	r1, [pc, #352]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	650b      	str	r3, [r1, #80]	; 0x50
 80035cc:	e001      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d044      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e8:	d01f      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ee:	d805      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f8:	d00e      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80035fa:	e01f      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80035fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003600:	d01f      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003606:	d01e      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003608:	e018      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a46      	ldr	r2, [pc, #280]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003616:	e017      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fde0 	bl	80041e4 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003628:	e00e      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3324      	adds	r3, #36	; 0x24
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fe89 	bl	8004348 <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800363a:	e005      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
      break;
 8003640:	e002      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800365c:	4932      	ldr	r1, [pc, #200]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800365e:	4313      	orrs	r3, r2
 8003660:	658b      	str	r3, [r1, #88]	; 0x58
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	2b00      	cmp	r3, #0
 8003672:	d044      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800367a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367e:	d01f      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003684:	d805      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800368a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800368e:	d00e      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003690:	e01f      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003696:	d01f      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369c:	d01e      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800369e:	e018      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b21      	ldr	r3, [pc, #132]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	4a20      	ldr	r2, [pc, #128]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e017      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fd95 	bl	80041e4 <RCCEx_PLL2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036be:	e00e      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3324      	adds	r3, #36	; 0x24
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fe3e 	bl	8004348 <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d0:	e005      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	658b      	str	r3, [r1, #88]	; 0x58
 80036f8:	e001      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d035      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370e:	2b10      	cmp	r3, #16
 8003710:	d00c      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003712:	2b10      	cmp	r3, #16
 8003714:	d802      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800371a:	e017      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d00c      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003720:	2b30      	cmp	r3, #48	; 0x30
 8003722:	d018      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003724:	e012      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4baf      	ldr	r3, [pc, #700]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4aae      	ldr	r2, [pc, #696]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003738:	e00e      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fd4f 	bl	80041e4 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	49a0      	ldr	r1, [pc, #640]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003770:	e001      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d042      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	d01f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800378c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003790:	d805      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d00e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 800379c:	e01f      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800379e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a8:	d01e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80037aa:	e018      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4b8f      	ldr	r3, [pc, #572]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a8e      	ldr	r2, [pc, #568]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b8:	e017      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fd0f 	bl	80041e4 <RCCEx_PLL2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037ca:	e00e      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3324      	adds	r3, #36	; 0x24
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fdb8 	bl	8004348 <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037dc:	e005      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037f0:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	497b      	ldr	r1, [pc, #492]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	650b      	str	r3, [r1, #80]	; 0x50
 8003802:	e001      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d042      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800381c:	d01b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800381e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003822:	d805      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d022      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800382e:	e01b      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003834:	d01d      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383a:	d01c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800383c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003840:	d01b      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fcca 	bl	80041e4 <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003854:	e012      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fd73 	bl	8004348 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003866:	e009      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
      break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800387a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003882:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	4957      	ldr	r1, [pc, #348]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	650b      	str	r3, [r1, #80]	; 0x50
 8003894:	e001      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d044      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d01b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80038b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b6:	d805      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d022      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038c2:	e01b      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d01d      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ce:	d01c      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80038d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d4:	d01b      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038d6:	e011      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fc80 	bl	80041e4 <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038e8:	e012      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3324      	adds	r3, #36	; 0x24
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fd29 	bl	8004348 <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038fa:	e009      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	e006      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003902:	bf00      	nop
 8003904:	e004      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800390e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003916:	4b35      	ldr	r3, [pc, #212]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003924:	4931      	ldr	r1, [pc, #196]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	658b      	str	r3, [r1, #88]	; 0x58
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d02d      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003944:	d005      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800394a:	d009      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003950:	e00f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fc3c 	bl	80041e4 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398c:	4917      	ldr	r1, [pc, #92]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	650b      	str	r3, [r1, #80]	; 0x50
 8003992:	e001      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d035      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d81b      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039c5 	.word	0x080039c5
 80039bc:	080039d3 	.word	0x080039d3
 80039c0:	080039f1 	.word	0x080039f1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039d0:	e00f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2102      	movs	r1, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fc03 	bl	80041e4 <RCCEx_PLL2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80039ea:	bf00      	nop
 80039ec:	58024400 	.word	0x58024400
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039f8:	4bba      	ldr	r3, [pc, #744]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	f023 0203 	bic.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	49b7      	ldr	r1, [pc, #732]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8086 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1e:	4bb2      	ldr	r3, [pc, #712]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4ab1      	ldr	r2, [pc, #708]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a2a:	f7fc ff4f 	bl	80008cc <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a30:	e009      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7fc ff4b 	bl	80008cc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	; 0x64
 8003a3e:	d902      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	75fb      	strb	r3, [r7, #23]
        break;
 8003a44:	e005      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	4ba8      	ldr	r3, [pc, #672]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d166      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a58:	4ba2      	ldr	r3, [pc, #648]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a62:	4053      	eors	r3, r2
 8003a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b9d      	ldr	r3, [pc, #628]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b9b      	ldr	r3, [pc, #620]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a9a      	ldr	r2, [pc, #616]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a82:	4b98      	ldr	r3, [pc, #608]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a97      	ldr	r2, [pc, #604]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a8e:	4a95      	ldr	r2, [pc, #596]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9e:	d115      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fc ff14 	bl	80008cc <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fc ff10 	bl	80008cc <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d902      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	75fb      	strb	r3, [r7, #23]
            break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ed      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d126      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003ae2:	4b80      	ldr	r3, [pc, #512]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af0:	0919      	lsrs	r1, r3, #4
 8003af2:	4b7e      	ldr	r3, [pc, #504]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003af4:	400b      	ands	r3, r1
 8003af6:	497b      	ldr	r1, [pc, #492]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	610b      	str	r3, [r1, #16]
 8003afc:	e005      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003afe:	4b79      	ldr	r3, [pc, #484]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	4a78      	ldr	r2, [pc, #480]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b08:	6113      	str	r3, [r2, #16]
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	4972      	ldr	r1, [pc, #456]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	670b      	str	r3, [r1, #112]	; 0x70
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
 8003b24:	e001      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3a:	2b28      	cmp	r3, #40	; 0x28
 8003b3c:	d866      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003c13 	.word	0x08003c13
 8003b48:	08003c0d 	.word	0x08003c0d
 8003b4c:	08003c0d 	.word	0x08003c0d
 8003b50:	08003c0d 	.word	0x08003c0d
 8003b54:	08003c0d 	.word	0x08003c0d
 8003b58:	08003c0d 	.word	0x08003c0d
 8003b5c:	08003c0d 	.word	0x08003c0d
 8003b60:	08003c0d 	.word	0x08003c0d
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003c0d 	.word	0x08003c0d
 8003b6c:	08003c0d 	.word	0x08003c0d
 8003b70:	08003c0d 	.word	0x08003c0d
 8003b74:	08003c0d 	.word	0x08003c0d
 8003b78:	08003c0d 	.word	0x08003c0d
 8003b7c:	08003c0d 	.word	0x08003c0d
 8003b80:	08003c0d 	.word	0x08003c0d
 8003b84:	08003bfb 	.word	0x08003bfb
 8003b88:	08003c0d 	.word	0x08003c0d
 8003b8c:	08003c0d 	.word	0x08003c0d
 8003b90:	08003c0d 	.word	0x08003c0d
 8003b94:	08003c0d 	.word	0x08003c0d
 8003b98:	08003c0d 	.word	0x08003c0d
 8003b9c:	08003c0d 	.word	0x08003c0d
 8003ba0:	08003c0d 	.word	0x08003c0d
 8003ba4:	08003c13 	.word	0x08003c13
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003c0d 	.word	0x08003c0d
 8003bb0:	08003c0d 	.word	0x08003c0d
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003c0d 	.word	0x08003c0d
 8003bc4:	08003c13 	.word	0x08003c13
 8003bc8:	08003c0d 	.word	0x08003c0d
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c0d 	.word	0x08003c0d
 8003bd4:	08003c0d 	.word	0x08003c0d
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003c0d 	.word	0x08003c0d
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c13 	.word	0x08003c13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 faf8 	bl	80041e4 <RCCEx_PLL2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bf8:	e00c      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	; 0x24
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fba1 	bl	8004348 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c1a:	4b32      	ldr	r3, [pc, #200]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c26:	492f      	ldr	r1, [pc, #188]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c2c:	e001      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d037      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d820      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c8f 	.word	0x08003c8f
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c77 	.word	0x08003c77
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003c8f 	.word	0x08003c8f
 8003c60:	08003c8f 	.word	0x08003c8f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 faba 	bl	80041e4 <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3324      	adds	r3, #36	; 0x24
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fb63 	bl	8004348 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	654b      	str	r3, [r1, #84]	; 0x54
 8003ca8:	e001      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d040      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d827      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d1b 	.word	0x08003d1b
 8003cd0:	08003cf1 	.word	0x08003cf1
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003d1b 	.word	0x08003d1b
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d1b 	.word	0x08003d1b
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	58024800 	.word	0x58024800
 8003cec:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa74 	bl	80041e4 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d00:	e00c      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3324      	adds	r3, #36	; 0x24
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fb1d 	bl	8004348 <RCCEx_PLL3_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d22:	4bb2      	ldr	r3, [pc, #712]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f023 0207 	bic.w	r2, r3, #7
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	49ae      	ldr	r1, [pc, #696]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	658b      	str	r3, [r1, #88]	; 0x58
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d044      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d52:	d01b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d805      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d022      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d64:	e01b      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d01d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d01c      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d76:	d01b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003d78:	e011      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa2f 	bl	80041e4 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e012      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fad8 	bl	8004348 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d9c:	e009      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
      break;
 8003da2:	e006      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003da4:	bf00      	nop
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003da8:	bf00      	nop
 8003daa:	e002      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db8:	4b8c      	ldr	r3, [pc, #560]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc6:	4989      	ldr	r1, [pc, #548]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	654b      	str	r3, [r1, #84]	; 0x54
 8003dcc:	e001      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d044      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de8:	d01b      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dee:	d805      	bhi.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d022      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d01d      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003e02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e06:	d01c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e0c:	d01b      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003e0e:	e011      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f9e4 	bl	80041e4 <RCCEx_PLL2_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e20:	e012      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3324      	adds	r3, #36	; 0x24
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa8d 	bl	8004348 <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e32:	e009      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
      break;
 8003e38:	e006      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e004      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e002      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5c:	4963      	ldr	r1, [pc, #396]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	658b      	str	r3, [r1, #88]	; 0x58
 8003e62:	e001      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d044      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e84:	d805      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d022      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e90:	e01b      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e96:	d01d      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003e98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003e9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ea2:	d01b      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003ea4:	e011      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f999 	bl	80041e4 <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003eb6:	e012      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa42 	bl	8004348 <RCCEx_PLL3_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e009      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ed4:	bf00      	nop
 8003ed6:	e002      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ed8:	bf00      	nop
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ee4:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef2:	493e      	ldr	r1, [pc, #248]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef8:	e001      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3324      	adds	r3, #36	; 0x24
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa13 	bl	8004348 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	492c      	ldr	r1, [pc, #176]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f9f2 	bl	8004348 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f6e:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7c:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d032      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d00d      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003f9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9e:	d016      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f91a 	bl	80041e4 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fb4:	e00c      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3324      	adds	r3, #36	; 0x24
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f9c3 	bl	8004348 <RCCEx_PLL3_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe4:	4901      	ldr	r1, [pc, #4]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	658b      	str	r3, [r1, #88]	; 0x58
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02f      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800400a:	d00c      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800400c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004010:	d015      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d10f      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a70      	ldr	r2, [pc, #448]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004024:	e00c      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f98b 	bl	8004348 <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004036:	e003      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	75fb      	strb	r3, [r7, #23]
      break;
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800403e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004046:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	4962      	ldr	r1, [pc, #392]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	654b      	str	r3, [r1, #84]	; 0x54
 800405a:	e001      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d029      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d007      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800407a:	e00f      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407c:	4b58      	ldr	r3, [pc, #352]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a57      	ldr	r2, [pc, #348]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004086:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004088:	e00b      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	2102      	movs	r1, #2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f8a7 	bl	80041e4 <RCCEx_PLL2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040a8:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	494a      	ldr	r1, [pc, #296]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f938 	bl	8004348 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02f      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d00c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fc:	d802      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d011      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004102:	e00d      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d00f      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410e:	d00e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800411e:	e007      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
      break;
 8004124:	e004      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004126:	bf00      	nop
 8004128:	e002      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800412a:	bf00      	nop
 800412c:	e000      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800412e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004136:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004142:	4927      	ldr	r1, [pc, #156]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004144:	4313      	orrs	r3, r2
 8004146:	654b      	str	r3, [r1, #84]	; 0x54
 8004148:	e001      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800415a:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	491e      	ldr	r1, [pc, #120]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	4916      	ldr	r1, [pc, #88]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800419c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da08      	bge.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	4906      	ldr	r1, [pc, #24]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80041cc:	7dbb      	ldrb	r3, [r7, #22]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58024400 	.word	0x58024400

080041e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041f2:	4b53      	ldr	r3, [pc, #332]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d101      	bne.n	8004202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e099      	b.n	8004336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004202:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a4e      	ldr	r2, [pc, #312]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004208:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420e:	f7fc fb5d 	bl	80008cc <HAL_GetTick>
 8004212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004214:	e008      	b.n	8004228 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004216:	f7fc fb59 	bl	80008cc <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e086      	b.n	8004336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004228:	4b45      	ldr	r3, [pc, #276]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004234:	4b42      	ldr	r3, [pc, #264]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	031b      	lsls	r3, r3, #12
 8004242:	493f      	ldr	r1, [pc, #252]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004244:	4313      	orrs	r3, r2
 8004246:	628b      	str	r3, [r1, #40]	; 0x28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	3b01      	subs	r3, #1
 800424e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	025b      	lsls	r3, r3, #9
 800425a:	b29b      	uxth	r3, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	3b01      	subs	r3, #1
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004278:	4931      	ldr	r1, [pc, #196]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800427e:	4b30      	ldr	r3, [pc, #192]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	492d      	ldr	r1, [pc, #180]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004290:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	f023 0220 	bic.w	r2, r3, #32
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4928      	ldr	r1, [pc, #160]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	4a26      	ldr	r2, [pc, #152]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <RCCEx_PLL2_Config+0x160>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	69d2      	ldr	r2, [r2, #28]
 80042ba:	00d2      	lsls	r2, r2, #3
 80042bc:	4920      	ldr	r1, [pc, #128]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042c2:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	f043 0310 	orr.w	r3, r3, #16
 80042cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042e0:	e00f      	b.n	8004302 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042f4:	e005      	b.n	8004302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	4a11      	ldr	r2, [pc, #68]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 8004308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800430c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fc fadd 	bl	80008cc <HAL_GetTick>
 8004312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004314:	e008      	b.n	8004328 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004316:	f7fc fad9 	bl	80008cc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <RCCEx_PLL2_Config+0x15c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	ffff0007 	.word	0xffff0007

08004348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004356:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b03      	cmp	r3, #3
 8004360:	d101      	bne.n	8004366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e099      	b.n	800449a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004366:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a4e      	ldr	r2, [pc, #312]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800436c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004372:	f7fc faab 	bl	80008cc <HAL_GetTick>
 8004376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004378:	e008      	b.n	800438c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800437a:	f7fc faa7 	bl	80008cc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e086      	b.n	800449a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800438c:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004398:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	051b      	lsls	r3, r3, #20
 80043a6:	493f      	ldr	r1, [pc, #252]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	628b      	str	r3, [r1, #40]	; 0x28
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	025b      	lsls	r3, r3, #9
 80043be:	b29b      	uxth	r3, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043dc:	4931      	ldr	r1, [pc, #196]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043e2:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	492d      	ldr	r1, [pc, #180]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043f4:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4928      	ldr	r1, [pc, #160]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004402:	4313      	orrs	r3, r2
 8004404:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <RCCEx_PLL3_Config+0x160>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	69d2      	ldr	r2, [r2, #28]
 800441e:	00d2      	lsls	r2, r2, #3
 8004420:	4920      	ldr	r1, [pc, #128]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004426:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800443e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004444:	e00f      	b.n	8004466 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800444c:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004458:	e005      	b.n	8004466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004464:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004472:	f7fc fa2b 	bl	80008cc <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004478:	e008      	b.n	800448c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800447a:	f7fc fa27 	bl	80008cc <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e006      	b.n	800449a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <RCCEx_PLL3_Config+0x15c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	ffff0007 	.word	0xffff0007

080044ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ac:	b084      	sub	sp, #16
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	f107 001c 	add.w	r0, r7, #28
 80044ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d120      	bne.n	8004506 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <USB_CoreInit+0xc0>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fa66 	bl	80059cc <USB_CoreReset>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e01a      	b.n	800453c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 fa5a 	bl	80059cc <USB_CoreReset>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800451c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
 800452e:	e005      	b.n	800453c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d10b      	bne.n	800455a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 0206 	orr.w	r2, r3, #6
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004566:	b004      	add	sp, #16
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	ffbdffbf 	.word	0xffbdffbf

08004570 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d165      	bne.n	8004650 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4a41      	ldr	r2, [pc, #260]	; (800468c <USB_SetTurnaroundTime+0x11c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d906      	bls.n	800459a <USB_SetTurnaroundTime+0x2a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a40      	ldr	r2, [pc, #256]	; (8004690 <USB_SetTurnaroundTime+0x120>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d802      	bhi.n	800459a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004594:	230f      	movs	r3, #15
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e062      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <USB_SetTurnaroundTime+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d906      	bls.n	80045b0 <USB_SetTurnaroundTime+0x40>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <USB_SetTurnaroundTime+0x124>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d802      	bhi.n	80045b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045aa:	230e      	movs	r3, #14
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e057      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4a38      	ldr	r2, [pc, #224]	; (8004694 <USB_SetTurnaroundTime+0x124>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d906      	bls.n	80045c6 <USB_SetTurnaroundTime+0x56>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a37      	ldr	r2, [pc, #220]	; (8004698 <USB_SetTurnaroundTime+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d802      	bhi.n	80045c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045c0:	230d      	movs	r3, #13
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e04c      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4a33      	ldr	r2, [pc, #204]	; (8004698 <USB_SetTurnaroundTime+0x128>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d906      	bls.n	80045dc <USB_SetTurnaroundTime+0x6c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a32      	ldr	r2, [pc, #200]	; (800469c <USB_SetTurnaroundTime+0x12c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d802      	bhi.n	80045dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045d6:	230c      	movs	r3, #12
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e041      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a2f      	ldr	r2, [pc, #188]	; (800469c <USB_SetTurnaroundTime+0x12c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d906      	bls.n	80045f2 <USB_SetTurnaroundTime+0x82>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <USB_SetTurnaroundTime+0x130>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d802      	bhi.n	80045f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045ec:	230b      	movs	r3, #11
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e036      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <USB_SetTurnaroundTime+0x130>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d906      	bls.n	8004608 <USB_SetTurnaroundTime+0x98>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <USB_SetTurnaroundTime+0x134>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004602:	230a      	movs	r3, #10
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e02b      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <USB_SetTurnaroundTime+0x134>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d906      	bls.n	800461e <USB_SetTurnaroundTime+0xae>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <USB_SetTurnaroundTime+0x138>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d802      	bhi.n	800461e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004618:	2309      	movs	r3, #9
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e020      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a21      	ldr	r2, [pc, #132]	; (80046a8 <USB_SetTurnaroundTime+0x138>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d906      	bls.n	8004634 <USB_SetTurnaroundTime+0xc4>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a20      	ldr	r2, [pc, #128]	; (80046ac <USB_SetTurnaroundTime+0x13c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d802      	bhi.n	8004634 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800462e:	2308      	movs	r3, #8
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e015      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <USB_SetTurnaroundTime+0x13c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d906      	bls.n	800464a <USB_SetTurnaroundTime+0xda>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <USB_SetTurnaroundTime+0x140>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d802      	bhi.n	800464a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004644:	2307      	movs	r3, #7
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e00a      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800464a:	2306      	movs	r3, #6
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e007      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004656:	2309      	movs	r3, #9
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e001      	b.n	8004660 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800465c:	2309      	movs	r3, #9
 800465e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	029b      	lsls	r3, r3, #10
 8004674:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	00d8acbf 	.word	0x00d8acbf
 8004690:	00e4e1bf 	.word	0x00e4e1bf
 8004694:	00f423ff 	.word	0x00f423ff
 8004698:	0106737f 	.word	0x0106737f
 800469c:	011a499f 	.word	0x011a499f
 80046a0:	01312cff 	.word	0x01312cff
 80046a4:	014ca43f 	.word	0x014ca43f
 80046a8:	016e35ff 	.word	0x016e35ff
 80046ac:	01a6ab1f 	.word	0x01a6ab1f
 80046b0:	01e847ff 	.word	0x01e847ff

080046b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d106      	bne.n	8004724 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e00b      	b.n	800473c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e001      	b.n	800473c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e003      	b.n	8004744 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800473c:	2032      	movs	r0, #50	; 0x32
 800473e:	f7fc f8d1 	bl	80008e4 <HAL_Delay>

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e009      	b.n	8004780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	2200      	movs	r2, #0
 8004778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3301      	adds	r3, #1
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0e      	cmp	r3, #14
 8004784:	d9f2      	bls.n	800476c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11c      	bne.n	80047c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479a:	f043 0302 	orr.w	r3, r3, #2
 800479e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e005      	b.n	80047d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	4619      	mov	r1, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	461a      	mov	r2, r3
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047fe:	2100      	movs	r1, #0
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f949 	bl	8004a98 <USB_SetDevSpeed>
 8004806:	e008      	b.n	800481a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004808:	2101      	movs	r1, #1
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f944 	bl	8004a98 <USB_SetDevSpeed>
 8004810:	e003      	b.n	800481a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004812:	2103      	movs	r1, #3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f93f 	bl	8004a98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800481a:	2110      	movs	r1, #16
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f8f3 	bl	8004a08 <USB_FlushTxFifo>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f911 	bl	8004a54 <USB_FlushRxFifo>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	461a      	mov	r2, r3
 8004850:	2300      	movs	r3, #0
 8004852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	e043      	b.n	80048ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487c:	d118      	bne.n	80048b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e013      	b.n	80048c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e008      	b.n	80048c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	461a      	mov	r2, r3
 80048e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3301      	adds	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3b7      	bcc.n	8004866 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e043      	b.n	8004984 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004912:	d118      	bne.n	8004946 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	461a      	mov	r2, r3
 8004928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e013      	b.n	8004958 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e008      	b.n	8004958 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	461a      	mov	r2, r3
 8004966:	2300      	movs	r3, #0
 8004968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	461a      	mov	r2, r3
 8004978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800497c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d3b7      	bcc.n	80048fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 0210 	orr.w	r2, r3, #16
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <USB_DevInit+0x2b4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f043 0208 	orr.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699a      	ldr	r2, [r3, #24]
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <USB_DevInit+0x2b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fc:	b004      	add	sp, #16
 80049fe:	4770      	bx	lr
 8004a00:	803c3800 	.word	0x803c3800
 8004a04:	40000004 	.word	0x40000004

08004a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <USB_FlushTxFifo+0x48>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d0f0      	beq.n	8004a22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	00030d40 	.word	0x00030d40

08004a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2210      	movs	r2, #16
 8004a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <USB_FlushRxFifo+0x40>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d0f0      	beq.n	8004a66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
 8004aee:	e00a      	b.n	8004b06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d002      	beq.n	8004afc <USB_GetDevSpeed+0x32>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d102      	bne.n	8004b02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
 8004b00:	e001      	b.n	8004b06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b02:	230f      	movs	r3, #15
 8004b04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d139      	bne.n	8004ba4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d153      	bne.n	8004c10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	059b      	lsls	r3, r3, #22
 8004b8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0159      	lsls	r1, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <USB_ActivateEndpoint+0x10c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
 8004ba2:	e035      	b.n	8004c10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d119      	bne.n	8004c10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0159      	lsls	r1, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	440b      	add	r3, r1
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <USB_ActivateEndpoint+0x10c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	10008000 	.word	0x10008000

08004c24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d135      	bne.n	8004cac <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4013      	ands	r3, r2
 8004c62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4b1f      	ldr	r3, [pc, #124]	; (8004d24 <USB_DeactivateEndpoint+0x100>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
 8004caa:	e034      	b.n	8004d16 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ccc:	4013      	ands	r3, r2
 8004cce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	041b      	lsls	r3, r3, #16
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0159      	lsls	r1, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <USB_DeactivateEndpoint+0x104>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	ec337800 	.word	0xec337800
 8004d28:	eff37800 	.word	0xeff37800

08004d2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	f040 8163 	bne.w	8005014 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d132      	bne.n	8004dbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	0159      	lsls	r1, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	4619      	mov	r1, r3
 8004d72:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <USB_EPStartXfer+0x2dc>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	4619      	mov	r1, r3
 8004db4:	4b95      	ldr	r3, [pc, #596]	; (800500c <USB_EPStartXfer+0x2e0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	610b      	str	r3, [r1, #16]
 8004dba:	e074      	b.n	8004ea6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	0159      	lsls	r1, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4b8c      	ldr	r3, [pc, #560]	; (800500c <USB_EPStartXfer+0x2e0>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	0159      	lsls	r1, r3, #5
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4b83      	ldr	r3, [pc, #524]	; (8005008 <USB_EPStartXfer+0x2dc>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	440b      	add	r3, r1
 8004e18:	1e59      	subs	r1, r3, #1
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e22:	04d9      	lsls	r1, r3, #19
 8004e24:	4b7a      	ldr	r3, [pc, #488]	; (8005010 <USB_EPStartXfer+0x2e4>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	69b9      	ldr	r1, [r7, #24]
 8004e2a:	0148      	lsls	r0, r1, #5
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	4401      	add	r1, r0
 8004e30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e34:	4313      	orrs	r3, r2
 8004e36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	0148      	lsls	r0, r1, #5
 8004e52:	69f9      	ldr	r1, [r7, #28]
 8004e54:	4401      	add	r1, r0
 8004e56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	78db      	ldrb	r3, [r3, #3]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d11f      	bne.n	8004ea6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d14b      	bne.n	8004f44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d009      	beq.n	8004ec8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	78db      	ldrb	r3, [r3, #3]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d128      	bne.n	8004f22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d110      	bne.n	8004f02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e00f      	b.n	8004f22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e133      	b.n	80051ac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	78db      	ldrb	r3, [r3, #3]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d015      	beq.n	8004f98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 811b 	beq.w	80051ac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f92:	4313      	orrs	r3, r2
 8004f94:	634b      	str	r3, [r1, #52]	; 0x34
 8004f96:	e109      	b.n	80051ac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d110      	bne.n	8004fca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	e00f      	b.n	8004fea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68d9      	ldr	r1, [r3, #12]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	b298      	uxth	r0, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fa38 	bl	8005474 <USB_WritePacket>
 8005004:	e0d2      	b.n	80051ac <USB_EPStartXfer+0x480>
 8005006:	bf00      	nop
 8005008:	e007ffff 	.word	0xe007ffff
 800500c:	fff80000 	.word	0xfff80000
 8005010:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	0159      	lsls	r1, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	440b      	add	r3, r1
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	4619      	mov	r1, r3
 8005030:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <USB_EPStartXfer+0x48c>)
 8005032:	4013      	ands	r3, r2
 8005034:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	0159      	lsls	r1, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	440b      	add	r3, r1
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	4619      	mov	r1, r3
 8005052:	4b5a      	ldr	r3, [pc, #360]	; (80051bc <USB_EPStartXfer+0x490>)
 8005054:	4013      	ands	r3, r2
 8005056:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d123      	bne.n	80050a8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	0148      	lsls	r0, r1, #5
 800507a:	69f9      	ldr	r1, [r7, #28]
 800507c:	4401      	add	r1, r0
 800507e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050a4:	6113      	str	r3, [r2, #16]
 80050a6:	e033      	b.n	8005110 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	8afb      	ldrh	r3, [r7, #22]
 80050ce:	04d9      	lsls	r1, r3, #19
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <USB_EPStartXfer+0x494>)
 80050d2:	400b      	ands	r3, r1
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	0148      	lsls	r0, r1, #5
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	4401      	add	r1, r0
 80050dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	8af9      	ldrh	r1, [r7, #22]
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	0148      	lsls	r0, r1, #5
 8005104:	69f9      	ldr	r1, [r7, #28]
 8005106:	4401      	add	r1, r0
 8005108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800510c:	4313      	orrs	r3, r2
 800510e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10d      	bne.n	8005132 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68d9      	ldr	r1, [r3, #12]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	460a      	mov	r2, r1
 8005130:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d128      	bne.n	800518c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d110      	bne.n	800516c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e00f      	b.n	800518c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	fff80000 	.word	0xfff80000
 80051bc:	e007ffff 	.word	0xe007ffff
 80051c0:	1ff80000 	.word	0x1ff80000

080051c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	f040 80cd 	bne.w	8005380 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d132      	bne.n	8005254 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	0159      	lsls	r1, r3, #5
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	440b      	add	r3, r1
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	4619      	mov	r1, r3
 800520a:	4b98      	ldr	r3, [pc, #608]	; (800546c <USB_EP0StartXfer+0x2a8>)
 800520c:	4013      	ands	r3, r2
 800520e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	0159      	lsls	r1, r3, #5
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	440b      	add	r3, r1
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	4619      	mov	r1, r3
 800524c:	4b88      	ldr	r3, [pc, #544]	; (8005470 <USB_EP0StartXfer+0x2ac>)
 800524e:	4013      	ands	r3, r2
 8005250:	610b      	str	r3, [r1, #16]
 8005252:	e04e      	b.n	80052f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	0159      	lsls	r1, r3, #5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	440b      	add	r3, r1
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	4619      	mov	r1, r3
 8005270:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <USB_EP0StartXfer+0x2ac>)
 8005272:	4013      	ands	r3, r2
 8005274:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	0159      	lsls	r1, r3, #5
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	440b      	add	r3, r1
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	4619      	mov	r1, r3
 8005292:	4b76      	ldr	r3, [pc, #472]	; (800546c <USB_EP0StartXfer+0x2a8>)
 8005294:	4013      	ands	r3, r2
 8005296:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d903      	bls.n	80052ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e2:	6939      	ldr	r1, [r7, #16]
 80052e4:	0148      	lsls	r0, r1, #5
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	4401      	add	r1, r0
 80052ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d11e      	bne.n	8005336 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e092      	b.n	800545c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	440a      	add	r2, r1
 800534c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005354:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d07e      	beq.n	800545c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	2101      	movs	r1, #1
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	6979      	ldr	r1, [r7, #20]
 8005376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537a:	4313      	orrs	r3, r2
 800537c:	634b      	str	r3, [r1, #52]	; 0x34
 800537e:	e06d      	b.n	800545c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	0159      	lsls	r1, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	440b      	add	r3, r1
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	4619      	mov	r1, r3
 800539c:	4b34      	ldr	r3, [pc, #208]	; (8005470 <USB_EP0StartXfer+0x2ac>)
 800539e:	4013      	ands	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	0159      	lsls	r1, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	440b      	add	r3, r1
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	4619      	mov	r1, r3
 80053be:	4b2b      	ldr	r3, [pc, #172]	; (800546c <USB_EP0StartXfer+0x2a8>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	0148      	lsls	r0, r1, #5
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	4401      	add	r1, r0
 8005412:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005416:	4313      	orrs	r3, r2
 8005418:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d10d      	bne.n	800543c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68d9      	ldr	r1, [r3, #12]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	460a      	mov	r2, r1
 800543a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800545a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e007ffff 	.word	0xe007ffff
 8005470:	fff80000 	.word	0xfff80000

08005474 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4611      	mov	r1, r2
 8005480:	461a      	mov	r2, r3
 8005482:	460b      	mov	r3, r1
 8005484:	71fb      	strb	r3, [r7, #7]
 8005486:	4613      	mov	r3, r2
 8005488:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11a      	bne.n	80054d0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800549a:	88bb      	ldrh	r3, [r7, #4]
 800549c:	3303      	adds	r3, #3
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	e00f      	b.n	80054c8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	031a      	lsls	r2, r3, #12
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	461a      	mov	r2, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3304      	adds	r3, #4
 80054c0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3eb      	bcc.n	80054a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3724      	adds	r7, #36	; 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054de:	b480      	push	{r7}
 80054e0:	b089      	sub	sp, #36	; 0x24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	3303      	adds	r3, #3
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e00b      	b.n	800551a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	601a      	str	r2, [r3, #0]
    pDest++;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3304      	adds	r3, #4
 8005512:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3301      	adds	r3, #1
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3ef      	bcc.n	8005502 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005522:	69fb      	ldr	r3, [r7, #28]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3724      	adds	r7, #36	; 0x24
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d12c      	bne.n	80055a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db12      	blt.n	8005584 <USB_EPSetStall+0x54>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e02b      	b.n	80055fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db12      	blt.n	80055de <USB_EPSetStall+0xae>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d128      	bne.n	800567a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	78db      	ldrb	r3, [r3, #3]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d003      	beq.n	8005658 <USB_EPClearStall+0x4c>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	78db      	ldrb	r3, [r3, #3]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d138      	bne.n	80056ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e027      	b.n	80056ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d003      	beq.n	80056aa <USB_EPClearStall+0x9e>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d10f      	bne.n	80056ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f023 0302 	bic.w	r3, r3, #2
 8005742:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005744:	2003      	movs	r0, #3
 8005746:	f7fb f8cd 	bl	80008e4 <HAL_Delay>

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576e:	f043 0302 	orr.w	r3, r3, #2
 8005772:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005774:	2003      	movs	r0, #3
 8005776:	f7fb f8b5 	bl	80008e4 <HAL_Delay>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0c1b      	lsrs	r3, r3, #16
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4013      	ands	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	b29b      	uxth	r3, r3
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005840:	68bb      	ldr	r3, [r7, #8]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	b2db      	uxtb	r3, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4013      	ands	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800589c:	68bb      	ldr	r3, [r7, #8]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0301 	and.w	r3, r3, #1
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	4619      	mov	r1, r3
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <USB_ActivateSetup+0x44>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	fffff800 	.word	0xfffff800

08005910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	333c      	adds	r3, #60	; 0x3c
 8005926:	3304      	adds	r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <USB_EP0_OutStart+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d90a      	bls.n	800594a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d101      	bne.n	800594a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e037      	b.n	80059ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005978:	f043 0318 	orr.w	r3, r3, #24
 800597c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005992:	7afb      	ldrb	r3, [r7, #11]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d10f      	bne.n	80059b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a

080059cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <USB_CoreReset+0x64>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e01b      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	daf2      	bge.n	80059d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <USB_CoreReset+0x64>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d0f0      	beq.n	8005a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00030d40 	.word	0x00030d40

08005a34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7c1b      	ldrb	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d115      	bne.n	8005a78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a50:	2202      	movs	r2, #2
 8005a52:	2181      	movs	r1, #129	; 0x81
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 ff4a 	bl	80078ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	2202      	movs	r2, #2
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 ff40 	bl	80078ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a76:	e012      	b.n	8005a9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 ff35 	bl	80078ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 ff2c 	bl	80078ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	2182      	movs	r1, #130	; 0x82
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 ff22 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ab0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ab4:	f002 f898 	bl	8007be8 <malloc>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e026      	b.n	8005b20 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7c1b      	ldrb	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b06:	2101      	movs	r1, #1
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 ffe1 	bl	8007ad0 <USBD_LL_PrepareReceive>
 8005b0e:	e007      	b.n	8005b20 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	2101      	movs	r1, #1
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 ffd8 	bl	8007ad0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b3a:	2181      	movs	r1, #129	; 0x81
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 fefc 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fef5 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b58:	2182      	movs	r1, #130	; 0x82
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 feed 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 f839 	bl	8007bf8 <free>
    pdev->pClassData = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d039      	beq.n	8005c36 <USBD_CDC_Setup+0x9e>
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d17c      	bne.n	8005cc0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d029      	beq.n	8005c22 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da11      	bge.n	8005bfc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005be4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	88d2      	ldrh	r2, [r2, #6]
 8005bea:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bec:	6939      	ldr	r1, [r7, #16]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88db      	ldrh	r3, [r3, #6]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 fa3f 	bl	8007078 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005bfa:	e068      	b.n	8005cce <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785a      	ldrb	r2, [r3, #1]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	88db      	ldrh	r3, [r3, #6]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 fa5a 	bl	80070d4 <USBD_CtlPrepareRx>
      break;
 8005c20:	e055      	b.n	8005cce <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7850      	ldrb	r0, [r2, #1]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4798      	blx	r3
      break;
 8005c34:	e04b      	b.n	8005cce <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b0a      	cmp	r3, #10
 8005c3c:	d017      	beq.n	8005c6e <USBD_CDC_Setup+0xd6>
 8005c3e:	2b0b      	cmp	r3, #11
 8005c40:	d029      	beq.n	8005c96 <USBD_CDC_Setup+0xfe>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d133      	bne.n	8005cae <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d107      	bne.n	8005c60 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	2202      	movs	r2, #2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fa0d 	bl	8007078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c5e:	e02e      	b.n	8005cbe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f99d 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6c:	e027      	b.n	8005cbe <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c78:	f107 030f 	add.w	r3, r7, #15
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f9f9 	bl	8007078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c86:	e01a      	b.n	8005cbe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f989 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
          break;
 8005c94:	e013      	b.n	8005cbe <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d00d      	beq.n	8005cbc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 f97d 	bl	8006fa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cac:	e006      	b.n	8005cbc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f976 	bl	8006fa2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cba:	e000      	b.n	8005cbe <USBD_CDC_Setup+0x126>
          break;
 8005cbc:	bf00      	nop
      }
      break;
 8005cbe:	e006      	b.n	8005cce <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f96d 	bl	8006fa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ccc:	bf00      	nop
  }

  return ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03a      	beq.n	8005d74 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	331c      	adds	r3, #28
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d029      	beq.n	8005d68 <USBD_CDC_DataIn+0x90>
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	331c      	adds	r3, #28
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	68b8      	ldr	r0, [r7, #8]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4403      	add	r3, r0
 8005d34:	3344      	adds	r3, #68	; 0x44
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d3c:	fb03 f301 	mul.w	r3, r3, r1
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d110      	bne.n	8005d68 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	331c      	adds	r3, #28
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d5a:	78f9      	ldrb	r1, [r7, #3]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 fe92 	bl	8007a8a <USBD_LL_Transmit>
 8005d66:	e003      	b.n	8005d70 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 febd 	bl	8007b16 <USBD_LL_GetRxDataSize>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4798      	blx	r3

    return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005df4:	2bff      	cmp	r3, #255	; 0xff
 8005df6:	d010      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005e06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2243      	movs	r2, #67	; 0x43
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	24000098 	.word	0x24000098

08005e44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2243      	movs	r2, #67	; 0x43
 8005e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	24000054 	.word	0x24000054

08005e64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2243      	movs	r2, #67	; 0x43
 8005e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	240000dc 	.word	0x240000dc

08005e84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	24000010 	.word	0x24000010

08005ea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01c      	beq.n	8005f82 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d115      	bne.n	8005f7e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2181      	movs	r1, #129	; 0x81
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fd88 	bl	8007a8a <USBD_LL_Transmit>

      return USBD_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e002      	b.n	8005f84 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d017      	beq.n	8005fd6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7c1b      	ldrb	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb8:	2101      	movs	r1, #1
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fd88 	bl	8007ad0 <USBD_LL_PrepareReceive>
 8005fc0:	e007      	b.n	8005fd2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fd7f 	bl	8007ad0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e01a      	b.n	800602e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	79fa      	ldrb	r2, [r7, #7]
 8006024:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f001 fbf6 	bl	8007818 <USBD_LL_Init>

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d006      	beq.n	8006058 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
 8006056:	e001      	b.n	800605c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006058:	2302      	movs	r3, #2
 800605a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 fc20 	bl	80078b8 <USBD_LL_Start>

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060a4:	2302      	movs	r3, #2
 80060a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00c      	beq.n	80060cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	78fa      	ldrb	r2, [r7, #3]
 80060bc:	4611      	mov	r1, r2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3

  return USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 ff0a 	bl	8006f28 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2b01      	cmp	r3, #1
 8006136:	d00c      	beq.n	8006152 <USBD_LL_SetupStage+0x56>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d302      	bcc.n	8006142 <USBD_LL_SetupStage+0x46>
 800613c:	2b02      	cmp	r3, #2
 800613e:	d010      	beq.n	8006162 <USBD_LL_SetupStage+0x66>
 8006140:	e017      	b.n	8006172 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa0a 	bl	8006564 <USBD_StdDevReq>
      break;
 8006150:	e01a      	b.n	8006188 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa6c 	bl	8006638 <USBD_StdItfReq>
      break;
 8006160:	e012      	b.n	8006188 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 faaa 	bl	80066c4 <USBD_StdEPReq>
      break;
 8006170:	e00a      	b.n	8006188 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fbf9 	bl	8007978 <USBD_LL_StallEP>
      break;
 8006186:	bf00      	nop
  }

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	460b      	mov	r3, r1
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d14b      	bne.n	800623e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d134      	bne.n	8006222 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d919      	bls.n	80061f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061da:	429a      	cmp	r2, r3
 80061dc:	d203      	bcs.n	80061e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	e002      	b.n	80061ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 ff8d 	bl	8007110 <USBD_CtlContinueRx>
 80061f6:	e038      	b.n	800626a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800620a:	2b03      	cmp	r3, #3
 800620c:	d105      	bne.n	800621a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 ff8a 	bl	8007134 <USBD_CtlSendStatus>
 8006220:	e023      	b.n	800626a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006228:	2b05      	cmp	r3, #5
 800622a:	d11e      	bne.n	800626a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006234:	2100      	movs	r1, #0
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 fb9e 	bl	8007978 <USBD_LL_StallEP>
 800623c:	e015      	b.n	800626a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006250:	2b03      	cmp	r3, #3
 8006252:	d108      	bne.n	8006266 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	7afa      	ldrb	r2, [r7, #11]
 800625e:	4611      	mov	r1, r2
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	4798      	blx	r3
 8006264:	e001      	b.n	800626a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006266:	2302      	movs	r3, #2
 8006268:	e000      	b.n	800626c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	460b      	mov	r3, r1
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006282:	7afb      	ldrb	r3, [r7, #11]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d17f      	bne.n	8006388 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3314      	adds	r3, #20
 800628c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006294:	2b02      	cmp	r3, #2
 8006296:	d15c      	bne.n	8006352 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d915      	bls.n	80062d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	1ad2      	subs	r2, r2, r3
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fef7 	bl	80070b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062c2:	2300      	movs	r3, #0
 80062c4:	2200      	movs	r2, #0
 80062c6:	2100      	movs	r1, #0
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f001 fc01 	bl	8007ad0 <USBD_LL_PrepareReceive>
 80062ce:	e04e      	b.n	800636e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	6912      	ldr	r2, [r2, #16]
 80062d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062dc:	fb02 f201 	mul.w	r2, r2, r1
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d11c      	bne.n	8006320 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d316      	bcc.n	8006320 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d20f      	bcs.n	8006320 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006300:	2200      	movs	r2, #0
 8006302:	2100      	movs	r1, #0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fed3 	bl	80070b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006312:	2300      	movs	r3, #0
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 fbd9 	bl	8007ad0 <USBD_LL_PrepareReceive>
 800631e:	e026      	b.n	800636e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006332:	2b03      	cmp	r3, #3
 8006334:	d105      	bne.n	8006342 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fb17 	bl	8007978 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 ff05 	bl	800715a <USBD_CtlReceiveStatus>
 8006350:	e00d      	b.n	800636e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006358:	2b04      	cmp	r3, #4
 800635a:	d004      	beq.n	8006366 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 fb05 	bl	8007978 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006374:	2b01      	cmp	r3, #1
 8006376:	d11d      	bne.n	80063b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fe82 	bl	8006082 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006386:	e015      	b.n	80063b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800639a:	2b03      	cmp	r3, #3
 800639c:	d108      	bne.n	80063b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	7afa      	ldrb	r2, [r7, #11]
 80063a8:	4611      	mov	r1, r2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3
 80063ae:	e001      	b.n	80063b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063b0:	2302      	movs	r3, #2
 80063b2:	e000      	b.n	80063b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fa8e 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2240      	movs	r2, #64	; 0x40
 80063de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063e2:	2340      	movs	r3, #64	; 0x40
 80063e4:	2200      	movs	r2, #0
 80063e6:	2180      	movs	r1, #128	; 0x80
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fa80 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2240      	movs	r2, #64	; 0x40
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6852      	ldr	r2, [r2, #4]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	4611      	mov	r1, r2
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
  }

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2204      	movs	r2, #4
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	2b04      	cmp	r3, #4
 800649a:	d105      	bne.n	80064a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d10b      	bne.n	80064e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6852      	ldr	r2, [r2, #4]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	4611      	mov	r1, r2
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800657a:	2b20      	cmp	r3, #32
 800657c:	d004      	beq.n	8006588 <USBD_StdDevReq+0x24>
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d002      	beq.n	8006588 <USBD_StdDevReq+0x24>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <USBD_StdDevReq+0x34>
 8006586:	e04c      	b.n	8006622 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
      break;
 8006596:	e049      	b.n	800662c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b09      	cmp	r3, #9
 800659e:	d83a      	bhi.n	8006616 <USBD_StdDevReq+0xb2>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <USBD_StdDevReq+0x44>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065f9 	.word	0x080065f9
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	08006617 	.word	0x08006617
 80065b4:	08006603 	.word	0x08006603
 80065b8:	08006617 	.word	0x08006617
 80065bc:	080065db 	.word	0x080065db
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	08006617 	.word	0x08006617
 80065c8:	080065ef 	.word	0x080065ef
 80065cc:	080065e5 	.word	0x080065e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9d4 	bl	8006980 <USBD_GetDescriptor>
          break;
 80065d8:	e022      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb37 	bl	8006c50 <USBD_SetAddress>
          break;
 80065e2:	e01d      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fb74 	bl	8006cd4 <USBD_SetConfig>
          break;
 80065ec:	e018      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fbfd 	bl	8006df0 <USBD_GetConfig>
          break;
 80065f6:	e013      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fc2c 	bl	8006e58 <USBD_GetStatus>
          break;
 8006600:	e00e      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc5a 	bl	8006ebe <USBD_SetFeature>
          break;
 800660a:	e009      	b.n	8006620 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fc69 	bl	8006ee6 <USBD_ClrFeature>
          break;
 8006614:	e004      	b.n	8006620 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fcc2 	bl	8006fa2 <USBD_CtlError>
          break;
 800661e:	bf00      	nop
      }
      break;
 8006620:	e004      	b.n	800662c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fcbc 	bl	8006fa2 <USBD_CtlError>
      break;
 800662a:	bf00      	nop
  }

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop

08006638 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664e:	2b20      	cmp	r3, #32
 8006650:	d003      	beq.n	800665a <USBD_StdItfReq+0x22>
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d001      	beq.n	800665a <USBD_StdItfReq+0x22>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d12a      	bne.n	80066b0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006660:	3b01      	subs	r3, #1
 8006662:	2b02      	cmp	r3, #2
 8006664:	d81d      	bhi.n	80066a2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	889b      	ldrh	r3, [r3, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d813      	bhi.n	8006698 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	88db      	ldrh	r3, [r3, #6]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d110      	bne.n	80066ac <USBD_StdItfReq+0x74>
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fd4f 	bl	8007134 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006696:	e009      	b.n	80066ac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc81 	bl	8006fa2 <USBD_CtlError>
          break;
 80066a0:	e004      	b.n	80066ac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fc7c 	bl	8006fa2 <USBD_CtlError>
          break;
 80066aa:	e000      	b.n	80066ae <USBD_StdItfReq+0x76>
          break;
 80066ac:	bf00      	nop
      }
      break;
 80066ae:	e004      	b.n	80066ba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fc75 	bl	8006fa2 <USBD_CtlError>
      break;
 80066b8:	bf00      	nop
  }

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	889b      	ldrh	r3, [r3, #4]
 80066d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d004      	beq.n	80066ee <USBD_StdEPReq+0x2a>
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d002      	beq.n	80066ee <USBD_StdEPReq+0x2a>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <USBD_StdEPReq+0x3a>
 80066ec:	e13d      	b.n	800696a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
      break;
 80066fc:	e13a      	b.n	8006974 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006706:	2b20      	cmp	r3, #32
 8006708:	d10a      	bne.n	8006720 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	e12a      	b.n	8006976 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d03e      	beq.n	80067a6 <USBD_StdEPReq+0xe2>
 8006728:	2b03      	cmp	r3, #3
 800672a:	d002      	beq.n	8006732 <USBD_StdEPReq+0x6e>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d070      	beq.n	8006812 <USBD_StdEPReq+0x14e>
 8006730:	e115      	b.n	800695e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006738:	2b02      	cmp	r3, #2
 800673a:	d002      	beq.n	8006742 <USBD_StdEPReq+0x7e>
 800673c:	2b03      	cmp	r3, #3
 800673e:	d015      	beq.n	800676c <USBD_StdEPReq+0xa8>
 8006740:	e02b      	b.n	800679a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <USBD_StdEPReq+0x9e>
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d009      	beq.n	8006762 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f910 	bl	8007978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 f90c 	bl	8007978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006760:	e020      	b.n	80067a4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc1c 	bl	8006fa2 <USBD_CtlError>
              break;
 800676a:	e01b      	b.n	80067a4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	885b      	ldrh	r3, [r3, #2]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10e      	bne.n	8006792 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <USBD_StdEPReq+0xce>
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d008      	beq.n	8006792 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	88db      	ldrh	r3, [r3, #6]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 f8f3 	bl	8007978 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fcce 	bl	8007134 <USBD_CtlSendStatus>

              break;
 8006798:	e004      	b.n	80067a4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc00 	bl	8006fa2 <USBD_CtlError>
              break;
 80067a2:	bf00      	nop
          }
          break;
 80067a4:	e0e0      	b.n	8006968 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d002      	beq.n	80067b6 <USBD_StdEPReq+0xf2>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d015      	beq.n	80067e0 <USBD_StdEPReq+0x11c>
 80067b4:	e026      	b.n	8006804 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <USBD_StdEPReq+0x112>
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d009      	beq.n	80067d6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 f8d6 	bl	8007978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 f8d2 	bl	8007978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067d4:	e01c      	b.n	8006810 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fbe2 	bl	8006fa2 <USBD_CtlError>
              break;
 80067de:	e017      	b.n	8006810 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d112      	bne.n	800680e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 f8dd 	bl	80079b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fc99 	bl	8007134 <USBD_CtlSendStatus>
              }
              break;
 8006802:	e004      	b.n	800680e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fbcb 	bl	8006fa2 <USBD_CtlError>
              break;
 800680c:	e000      	b.n	8006810 <USBD_StdEPReq+0x14c>
              break;
 800680e:	bf00      	nop
          }
          break;
 8006810:	e0aa      	b.n	8006968 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006818:	2b02      	cmp	r3, #2
 800681a:	d002      	beq.n	8006822 <USBD_StdEPReq+0x15e>
 800681c:	2b03      	cmp	r3, #3
 800681e:	d032      	beq.n	8006886 <USBD_StdEPReq+0x1c2>
 8006820:	e097      	b.n	8006952 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <USBD_StdEPReq+0x174>
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d004      	beq.n	8006838 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fbb6 	bl	8006fa2 <USBD_CtlError>
                break;
 8006836:	e091      	b.n	800695c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da0b      	bge.n	8006858 <USBD_StdEPReq+0x194>
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	3310      	adds	r3, #16
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	3304      	adds	r3, #4
 8006856:	e00b      	b.n	8006870 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2202      	movs	r2, #2
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fbfa 	bl	8007078 <USBD_CtlSendData>
              break;
 8006884:	e06a      	b.n	800695c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da11      	bge.n	80068b2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3318      	adds	r3, #24
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d117      	bne.n	80068d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fb79 	bl	8006fa2 <USBD_CtlError>
                  break;
 80068b0:	e054      	b.n	800695c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	f003 020f 	and.w	r2, r3, #15
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb66 	bl	8006fa2 <USBD_CtlError>
                  break;
 80068d6:	e041      	b.n	800695c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da0b      	bge.n	80068f8 <USBD_StdEPReq+0x234>
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	3310      	adds	r3, #16
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	3304      	adds	r3, #4
 80068f6:	e00b      	b.n	8006910 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	3304      	adds	r3, #4
 8006910:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <USBD_StdEPReq+0x25a>
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d103      	bne.n	8006926 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e00e      	b.n	8006944 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f862 	bl	80079f4 <USBD_LL_IsStallEP>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e002      	b.n	8006944 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb94 	bl	8007078 <USBD_CtlSendData>
              break;
 8006950:	e004      	b.n	800695c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb24 	bl	8006fa2 <USBD_CtlError>
              break;
 800695a:	bf00      	nop
          }
          break;
 800695c:	e004      	b.n	8006968 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fb1e 	bl	8006fa2 <USBD_CtlError>
          break;
 8006966:	bf00      	nop
      }
      break;
 8006968:	e004      	b.n	8006974 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fb18 	bl	8006fa2 <USBD_CtlError>
      break;
 8006972:	bf00      	nop
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	885b      	ldrh	r3, [r3, #2]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	f200 8128 	bhi.w	8006bf6 <USBD_GetDescriptor+0x276>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <USBD_GetDescriptor+0x2c>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	08006a21 	.word	0x08006a21
 80069b8:	08006bf7 	.word	0x08006bf7
 80069bc:	08006bf7 	.word	0x08006bf7
 80069c0:	08006b97 	.word	0x08006b97
 80069c4:	08006bc3 	.word	0x08006bc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
      break;
 80069de:	e112      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7c1b      	ldrb	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f107 0208 	add.w	r2, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a02:	e100      	b.n	8006c06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	f107 0208 	add.w	r2, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e0f2      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	885b      	ldrh	r3, [r3, #2]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	f200 80ac 	bhi.w	8006b84 <USBD_GetDescriptor+0x204>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <USBD_GetDescriptor+0xb4>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a81 	.word	0x08006a81
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006b1d 	.word	0x08006b1d
 8006a48:	08006b51 	.word	0x08006b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6e:	e091      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa95 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7e:	e089      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	7c12      	ldrb	r2, [r2, #16]
 8006a98:	f107 0108 	add.w	r1, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa2:	e077      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa7b 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab2:	e06f      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7c12      	ldrb	r2, [r2, #16]
 8006acc:	f107 0108 	add.w	r1, r7, #8
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad6:	e05d      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa61 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae6:	e055      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	7c12      	ldrb	r2, [r2, #16]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b0a:	e043      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa47 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	3301      	adds	r3, #1
 8006b18:	72fb      	strb	r3, [r7, #11]
          break;
 8006b1a:	e03b      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	7c12      	ldrb	r2, [r2, #16]
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b3e:	e029      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa2d 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4e:	e021      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	7c12      	ldrb	r2, [r2, #16]
 8006b68:	f107 0108 	add.w	r1, r7, #8
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b72:	e00f      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa13 	bl	8006fa2 <USBD_CtlError>
            err++;
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	72fb      	strb	r3, [r7, #11]
          break;
 8006b82:	e007      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa0b 	bl	8006fa2 <USBD_CtlError>
          err++;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006b92:	e038      	b.n	8006c06 <USBD_GetDescriptor+0x286>
 8006b94:	e037      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7c1b      	ldrb	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	f107 0208 	add.w	r2, r7, #8
 8006baa:	4610      	mov	r0, r2
 8006bac:	4798      	blx	r3
 8006bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb0:	e029      	b.n	8006c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9f4 	bl	8006fa2 <USBD_CtlError>
        err++;
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc0:	e021      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7c1b      	ldrb	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10d      	bne.n	8006be6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	f107 0208 	add.w	r2, r7, #8
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4798      	blx	r3
 8006bda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	2207      	movs	r2, #7
 8006be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006be4:	e00f      	b.n	8006c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f9da 	bl	8006fa2 <USBD_CtlError>
        err++;
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8006bf4:	e007      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f9d2 	bl	8006fa2 <USBD_CtlError>
      err++;
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	3301      	adds	r3, #1
 8006c02:	72fb      	strb	r3, [r7, #11]
      break;
 8006c04:	bf00      	nop
  }

  if (err != 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11c      	bne.n	8006c46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006c0c:	893b      	ldrh	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d011      	beq.n	8006c36 <USBD_GetDescriptor+0x2b6>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	88db      	ldrh	r3, [r3, #6]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88da      	ldrh	r2, [r3, #6]
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bf28      	it	cs
 8006c24:	4613      	movcs	r3, r2
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa21 	bl	8007078 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	88db      	ldrh	r3, [r3, #6]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa78 	bl	8007134 <USBD_CtlSendStatus>
 8006c44:	e000      	b.n	8006c48 <USBD_GetDescriptor+0x2c8>
    return;
 8006c46:	bf00      	nop
    }
  }
}
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop

08006c50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	889b      	ldrh	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d130      	bne.n	8006cc4 <USBD_SetAddress+0x74>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88db      	ldrh	r3, [r3, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d12c      	bne.n	8006cc4 <USBD_SetAddress+0x74>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	885b      	ldrh	r3, [r3, #2]
 8006c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c70:	d828      	bhi.n	8006cc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d104      	bne.n	8006c92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f989 	bl	8006fa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c90:	e01c      	b.n	8006ccc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7bfa      	ldrb	r2, [r7, #15]
 8006c96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fed4 	bl	8007a4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fa45 	bl	8007134 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb8:	e008      	b.n	8006ccc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	e003      	b.n	8006ccc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f96b 	bl	8006fa2 <USBD_CtlError>
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	4b41      	ldr	r3, [pc, #260]	; (8006dec <USBD_SetConfig+0x118>)
 8006ce6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ce8:	4b40      	ldr	r3, [pc, #256]	; (8006dec <USBD_SetConfig+0x118>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d904      	bls.n	8006cfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f955 	bl	8006fa2 <USBD_CtlError>
 8006cf8:	e075      	b.n	8006de6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d002      	beq.n	8006d0a <USBD_SetConfig+0x36>
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d023      	beq.n	8006d50 <USBD_SetConfig+0x7c>
 8006d08:	e062      	b.n	8006dd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006d0a:	4b38      	ldr	r3, [pc, #224]	; (8006dec <USBD_SetConfig+0x118>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01a      	beq.n	8006d48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006d12:	4b36      	ldr	r3, [pc, #216]	; (8006dec <USBD_SetConfig+0x118>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d24:	4b31      	ldr	r3, [pc, #196]	; (8006dec <USBD_SetConfig+0x118>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff f9b4 	bl	8006098 <USBD_SetClassConfig>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d104      	bne.n	8006d40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f932 	bl	8006fa2 <USBD_CtlError>
            return;
 8006d3e:	e052      	b.n	8006de6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9f7 	bl	8007134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d46:	e04e      	b.n	8006de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9f3 	bl	8007134 <USBD_CtlSendStatus>
        break;
 8006d4e:	e04a      	b.n	8006de6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006d50:	4b26      	ldr	r3, [pc, #152]	; (8006dec <USBD_SetConfig+0x118>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d112      	bne.n	8006d7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006d60:	4b22      	ldr	r3, [pc, #136]	; (8006dec <USBD_SetConfig+0x118>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006d6a:	4b20      	ldr	r3, [pc, #128]	; (8006dec <USBD_SetConfig+0x118>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff f9b0 	bl	80060d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9dc 	bl	8007134 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d7c:	e033      	b.n	8006de6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <USBD_SetConfig+0x118>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d01d      	beq.n	8006dc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff f99e 	bl	80060d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <USBD_SetConfig+0x118>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <USBD_SetConfig+0x118>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff f974 	bl	8006098 <USBD_SetClassConfig>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d104      	bne.n	8006dc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8f2 	bl	8006fa2 <USBD_CtlError>
            return;
 8006dbe:	e012      	b.n	8006de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f9b7 	bl	8007134 <USBD_CtlSendStatus>
        break;
 8006dc6:	e00e      	b.n	8006de6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f9b3 	bl	8007134 <USBD_CtlSendStatus>
        break;
 8006dce:	e00a      	b.n	8006de6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8e5 	bl	8006fa2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <USBD_SetConfig+0x118>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff f979 	bl	80060d6 <USBD_ClrClassConfig>
        break;
 8006de4:	bf00      	nop
    }
  }
}
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	24000208 	.word	0x24000208

08006df0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	88db      	ldrh	r3, [r3, #6]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d004      	beq.n	8006e0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f8cc 	bl	8006fa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e0a:	e021      	b.n	8006e50 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	db17      	blt.n	8006e46 <USBD_GetConfig+0x56>
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	dd02      	ble.n	8006e20 <USBD_GetConfig+0x30>
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d00b      	beq.n	8006e36 <USBD_GetConfig+0x46>
 8006e1e:	e012      	b.n	8006e46 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f922 	bl	8007078 <USBD_CtlSendData>
        break;
 8006e34:	e00c      	b.n	8006e50 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f91a 	bl	8007078 <USBD_CtlSendData>
        break;
 8006e44:	e004      	b.n	8006e50 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8aa 	bl	8006fa2 <USBD_CtlError>
        break;
 8006e4e:	bf00      	nop
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d81e      	bhi.n	8006eac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d004      	beq.n	8006e80 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f892 	bl	8006fa2 <USBD_CtlError>
        break;
 8006e7e:	e01a      	b.n	8006eb6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f043 0202 	orr.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8e7 	bl	8007078 <USBD_CtlSendData>
      break;
 8006eaa:	e004      	b.n	8006eb6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f877 	bl	8006fa2 <USBD_CtlError>
      break;
 8006eb4:	bf00      	nop
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f92b 	bl	8007134 <USBD_CtlSendStatus>
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d80b      	bhi.n	8006f14 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10c      	bne.n	8006f1e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f911 	bl	8007134 <USBD_CtlSendStatus>
      }
      break;
 8006f12:	e004      	b.n	8006f1e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f843 	bl	8006fa2 <USBD_CtlError>
      break;
 8006f1c:	e000      	b.n	8006f20 <USBD_ClrFeature+0x3a>
      break;
 8006f1e:	bf00      	nop
  }
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	3302      	adds	r3, #2
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3303      	adds	r3, #3
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	4413      	add	r3, r2
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	3304      	adds	r3, #4
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	3305      	adds	r3, #5
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	4413      	add	r3, r2
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3306      	adds	r3, #6
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	3307      	adds	r3, #7
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	80da      	strh	r2, [r3, #6]

}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006fac:	2180      	movs	r1, #128	; 0x80
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fce2 	bl	8007978 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fcde 	bl	8007978 <USBD_LL_StallEP>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d032      	beq.n	8007040 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f834 	bl	8007048 <USBD_GetLen>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	75fa      	strb	r2, [r7, #23]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	75fa      	strb	r2, [r7, #23]
 8007006:	461a      	mov	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4413      	add	r3, r2
 800700c:	2203      	movs	r2, #3
 800700e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007010:	e012      	b.n	8007038 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	60fa      	str	r2, [r7, #12]
 8007018:	7dfa      	ldrb	r2, [r7, #23]
 800701a:	1c51      	adds	r1, r2, #1
 800701c:	75f9      	strb	r1, [r7, #23]
 800701e:	4611      	mov	r1, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	440a      	add	r2, r1
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	75fa      	strb	r2, [r7, #23]
 800702e:	461a      	mov	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e8      	bne.n	8007012 <USBD_GetString+0x4e>
    }
  }
}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007054:	e005      	b.n	8007062 <USBD_GetLen+0x1a>
  {
    len++;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	3301      	adds	r3, #1
 800705a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f5      	bne.n	8007056 <USBD_GetLen+0xe>
  }

  return len;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2202      	movs	r2, #2
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	2100      	movs	r1, #0
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fcf2 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	2100      	movs	r1, #0
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fce0 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2203      	movs	r2, #3
 80070e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	2100      	movs	r1, #0
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fce5 	bl	8007ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	2100      	movs	r1, #0
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fcd3 	bl	8007ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2204      	movs	r2, #4
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007144:	2300      	movs	r3, #0
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fc9d 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2205      	movs	r2, #5
 8007166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716a:	2300      	movs	r3, #0
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fcad 	bl	8007ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007184:	2200      	movs	r2, #0
 8007186:	4913      	ldr	r1, [pc, #76]	; (80071d4 <MX_USB_DEVICE_Init+0x54>)
 8007188:	4813      	ldr	r0, [pc, #76]	; (80071d8 <MX_USB_DEVICE_Init+0x58>)
 800718a:	f7fe ff29 	bl	8005fe0 <USBD_Init>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007194:	f7f9 fa02 	bl	800059c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007198:	4910      	ldr	r1, [pc, #64]	; (80071dc <MX_USB_DEVICE_Init+0x5c>)
 800719a:	480f      	ldr	r0, [pc, #60]	; (80071d8 <MX_USB_DEVICE_Init+0x58>)
 800719c:	f7fe ff4b 	bl	8006036 <USBD_RegisterClass>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071a6:	f7f9 f9f9 	bl	800059c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071aa:	490d      	ldr	r1, [pc, #52]	; (80071e0 <MX_USB_DEVICE_Init+0x60>)
 80071ac:	480a      	ldr	r0, [pc, #40]	; (80071d8 <MX_USB_DEVICE_Init+0x58>)
 80071ae:	f7fe fe79 	bl	8005ea4 <USBD_CDC_RegisterInterface>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071b8:	f7f9 f9f0 	bl	800059c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071bc:	4806      	ldr	r0, [pc, #24]	; (80071d8 <MX_USB_DEVICE_Init+0x58>)
 80071be:	f7fe ff54 	bl	800606a <USBD_Start>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071c8:	f7f9 f9e8 	bl	800059c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80071cc:	f7fb f8c2 	bl	8002354 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071d0:	bf00      	nop
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	24000130 	.word	0x24000130
 80071d8:	24000218 	.word	0x24000218
 80071dc:	2400001c 	.word	0x2400001c
 80071e0:	24000120 	.word	0x24000120

080071e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071e8:	2200      	movs	r2, #0
 80071ea:	4905      	ldr	r1, [pc, #20]	; (8007200 <CDC_Init_FS+0x1c>)
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <CDC_Init_FS+0x20>)
 80071ee:	f7fe fe70 	bl	8005ed2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071f2:	4905      	ldr	r1, [pc, #20]	; (8007208 <CDC_Init_FS+0x24>)
 80071f4:	4803      	ldr	r0, [pc, #12]	; (8007204 <CDC_Init_FS+0x20>)
 80071f6:	f7fe fe86 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	24000cdc 	.word	0x24000cdc
 8007204:	24000218 	.word	0x24000218
 8007208:	240004dc 	.word	0x240004dc

0800720c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007210:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	4613      	mov	r3, r2
 800722a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b23      	cmp	r3, #35	; 0x23
 8007230:	d84a      	bhi.n	80072c8 <CDC_Control_FS+0xac>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <CDC_Control_FS+0x1c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	080072c9 	.word	0x080072c9
 800723c:	080072c9 	.word	0x080072c9
 8007240:	080072c9 	.word	0x080072c9
 8007244:	080072c9 	.word	0x080072c9
 8007248:	080072c9 	.word	0x080072c9
 800724c:	080072c9 	.word	0x080072c9
 8007250:	080072c9 	.word	0x080072c9
 8007254:	080072c9 	.word	0x080072c9
 8007258:	080072c9 	.word	0x080072c9
 800725c:	080072c9 	.word	0x080072c9
 8007260:	080072c9 	.word	0x080072c9
 8007264:	080072c9 	.word	0x080072c9
 8007268:	080072c9 	.word	0x080072c9
 800726c:	080072c9 	.word	0x080072c9
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072c9 	.word	0x080072c9
 8007278:	080072c9 	.word	0x080072c9
 800727c:	080072c9 	.word	0x080072c9
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072c9 	.word	0x080072c9
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072c9 	.word	0x080072c9
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072c9 	.word	0x080072c9
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072c9 	.word	0x080072c9
 80072c4:	080072c9 	.word	0x080072c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072c8:	bf00      	nop
  }

  return (USBD_OK);
 80072ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	switch (Buf[0])
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b62      	cmp	r3, #98	; 0x62
 80072e8:	d007      	beq.n	80072fa <CDC_Receive_FS+0x22>
 80072ea:	2b79      	cmp	r3, #121	; 0x79
 80072ec:	d000      	beq.n	80072f0 <CDC_Receive_FS+0x18>
	{
	    case 'y': HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	        break;
	    case 'b': flag = 1;
	        break;
	    default: break;
 80072ee:	e008      	b.n	8007302 <CDC_Receive_FS+0x2a>
	    case 'y': HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	480a      	ldr	r0, [pc, #40]	; (800731c <CDC_Receive_FS+0x44>)
 80072f4:	f7f9 fdfd 	bl	8000ef2 <HAL_GPIO_TogglePin>
	        break;
 80072f8:	e003      	b.n	8007302 <CDC_Receive_FS+0x2a>
	    case 'b': flag = 1;
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <CDC_Receive_FS+0x48>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
	        break;
 8007300:	bf00      	nop
	}
//	if(Buf[0] == 'y')
//	{
//		JumpToBootloader();
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4807      	ldr	r0, [pc, #28]	; (8007324 <CDC_Receive_FS+0x4c>)
 8007306:	f7fe fdfe 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800730a:	4806      	ldr	r0, [pc, #24]	; (8007324 <CDC_Receive_FS+0x4c>)
 800730c:	f7fe fe3e 	bl	8005f8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	58020400 	.word	0x58020400
 8007320:	24000200 	.word	0x24000200
 8007324:	24000218 	.word	0x24000218

08007328 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007338:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <CDC_Transmit_FS+0x48>)
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800734a:	2301      	movs	r3, #1
 800734c:	e00b      	b.n	8007366 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800734e:	887b      	ldrh	r3, [r7, #2]
 8007350:	461a      	mov	r2, r3
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4806      	ldr	r0, [pc, #24]	; (8007370 <CDC_Transmit_FS+0x48>)
 8007356:	f7fe fdbc 	bl	8005ed2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <CDC_Transmit_FS+0x48>)
 800735c:	f7fe fde7 	bl	8005f2e <USBD_CDC_TransmitPacket>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	24000218 	.word	0x24000218

08007374 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2212      	movs	r2, #18
 8007384:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007386:	4b03      	ldr	r3, [pc, #12]	; (8007394 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	2400014c 	.word	0x2400014c

08007398 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2204      	movs	r2, #4
 80073a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	24000160 	.word	0x24000160

080073bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	4907      	ldr	r1, [pc, #28]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073d2:	4808      	ldr	r0, [pc, #32]	; (80073f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073d4:	f7ff fdf6 	bl	8006fc4 <USBD_GetString>
 80073d8:	e004      	b.n	80073e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4904      	ldr	r1, [pc, #16]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073de:	4805      	ldr	r0, [pc, #20]	; (80073f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073e0:	f7ff fdf0 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073e4:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	240014dc 	.word	0x240014dc
 80073f4:	08007dac 	.word	0x08007dac

080073f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007408:	4804      	ldr	r0, [pc, #16]	; (800741c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800740a:	f7ff fddb 	bl	8006fc4 <USBD_GetString>
  return USBD_StrDesc;
 800740e:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	240014dc 	.word	0x240014dc
 800741c:	08007dc4 	.word	0x08007dc4

08007420 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	221a      	movs	r2, #26
 8007430:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007432:	f000 f843 	bl	80074bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007436:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	24000164 	.word	0x24000164

08007444 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4907      	ldr	r1, [pc, #28]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
 800745a:	4808      	ldr	r0, [pc, #32]	; (800747c <USBD_FS_ConfigStrDescriptor+0x38>)
 800745c:	f7ff fdb2 	bl	8006fc4 <USBD_GetString>
 8007460:	e004      	b.n	800746c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007468:	f7ff fdac 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	240014dc 	.word	0x240014dc
 800747c:	08007dd8 	.word	0x08007dd8

08007480 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4907      	ldr	r1, [pc, #28]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007496:	4808      	ldr	r0, [pc, #32]	; (80074b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007498:	f7ff fd94 	bl	8006fc4 <USBD_GetString>
 800749c:	e004      	b.n	80074a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074a2:	4805      	ldr	r0, [pc, #20]	; (80074b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074a4:	f7ff fd8e 	bl	8006fc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	240014dc 	.word	0x240014dc
 80074b8:	08007de4 	.word	0x08007de4

080074bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <Get_SerialNum+0x44>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <Get_SerialNum+0x48>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074ce:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <Get_SerialNum+0x4c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d009      	beq.n	80074f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074e2:	2208      	movs	r2, #8
 80074e4:	4909      	ldr	r1, [pc, #36]	; (800750c <Get_SerialNum+0x50>)
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f814 	bl	8007514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074ec:	2204      	movs	r2, #4
 80074ee:	4908      	ldr	r1, [pc, #32]	; (8007510 <Get_SerialNum+0x54>)
 80074f0:	68b8      	ldr	r0, [r7, #8]
 80074f2:	f000 f80f 	bl	8007514 <IntToUnicode>
  }
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	1ff1e800 	.word	0x1ff1e800
 8007504:	1ff1e804 	.word	0x1ff1e804
 8007508:	1ff1e808 	.word	0x1ff1e808
 800750c:	24000166 	.word	0x24000166
 8007510:	24000176 	.word	0x24000176

08007514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
 800752a:	e027      	b.n	800757c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	0f1b      	lsrs	r3, r3, #28
 8007530:	2b09      	cmp	r3, #9
 8007532:	d80b      	bhi.n	800754c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	0f1b      	lsrs	r3, r3, #28
 8007538:	b2da      	uxtb	r2, r3
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4619      	mov	r1, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	440b      	add	r3, r1
 8007544:	3230      	adds	r2, #48	; 0x30
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]
 800754a:	e00a      	b.n	8007562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	b2da      	uxtb	r2, r3
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4619      	mov	r1, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	440b      	add	r3, r1
 800755c:	3237      	adds	r2, #55	; 0x37
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	3301      	adds	r3, #1
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	3301      	adds	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
 800757c:	7dfa      	ldrb	r2, [r7, #23]
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d3d3      	bcc.n	800752c <IntToUnicode+0x18>
  }
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	609a      	str	r2, [r3, #8]
 80075a4:	60da      	str	r2, [r3, #12]
 80075a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1e      	ldr	r2, [pc, #120]	; (8007628 <HAL_PCD_MspInit+0x98>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d136      	bne.n	8007620 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b2:	4b1e      	ldr	r3, [pc, #120]	; (800762c <HAL_PCD_MspInit+0x9c>)
 80075b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b8:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_PCD_MspInit+0x9c>)
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075c2:	4b1a      	ldr	r3, [pc, #104]	; (800762c <HAL_PCD_MspInit+0x9c>)
 80075c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d6:	2302      	movs	r3, #2
 80075d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075de:	2300      	movs	r3, #0
 80075e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80075e2:	230a      	movs	r3, #10
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e6:	f107 0314 	add.w	r3, r7, #20
 80075ea:	4619      	mov	r1, r3
 80075ec:	4810      	ldr	r0, [pc, #64]	; (8007630 <HAL_PCD_MspInit+0xa0>)
 80075ee:	f7f9 fab7 	bl	8000b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075f2:	4b0e      	ldr	r3, [pc, #56]	; (800762c <HAL_PCD_MspInit+0x9c>)
 80075f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <HAL_PCD_MspInit+0x9c>)
 80075fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007602:	4b0a      	ldr	r3, [pc, #40]	; (800762c <HAL_PCD_MspInit+0x9c>)
 8007604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	2065      	movs	r0, #101	; 0x65
 8007616:	f7f9 fa6e 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800761a:	2065      	movs	r0, #101	; 0x65
 800761c:	f7f9 fa85 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007620:	bf00      	nop
 8007622:	3728      	adds	r7, #40	; 0x28
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40080000 	.word	0x40080000
 800762c:	58024400 	.word	0x58024400
 8007630:	58020000 	.word	0x58020000

08007634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f7fe fd56 	bl	80060fc <USBD_LL_SetupStage>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	440b      	add	r3, r1
 8007678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	4619      	mov	r1, r3
 8007682:	f7fe fd86 	bl	8006192 <USBD_LL_DataOutStage>
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	440b      	add	r3, r1
 80076ae:	3348      	adds	r3, #72	; 0x48
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	4619      	mov	r1, r3
 80076b6:	f7fe fddd 	bl	8006274 <USBD_LL_DataInStage>
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fef0 	bl	80064b6 <USBD_LL_SOF>
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
 80076f6:	e008      	b.n	800770a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d102      	bne.n	8007706 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
 8007704:	e001      	b.n	800770a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007706:	f7f8 ff49 	bl	800059c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007710:	7bfa      	ldrb	r2, [r7, #15]
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fe93 	bl	8006440 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe fe4c 	bl	80063be <USBD_LL_Reset>
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fe8e 	bl	8006460 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007764:	4b04      	ldr	r3, [pc, #16]	; (8007778 <HAL_PCD_SuspendCallback+0x48>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	4a03      	ldr	r2, [pc, #12]	; (8007778 <HAL_PCD_SuspendCallback+0x48>)
 800776a:	f043 0306 	orr.w	r3, r3, #6
 800776e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fe7d 	bl	800648a <USBD_LL_Resume>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077aa:	78fa      	ldrb	r2, [r7, #3]
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fea8 	bl	8006504 <USBD_LL_IsoOUTIncomplete>
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	4611      	mov	r1, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fe89 	bl	80064ea <USBD_LL_IsoINIncomplete>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fe95 	bl	800651e <USBD_LL_DevConnected>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fe92 	bl	8006534 <USBD_LL_DevDisconnected>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d13e      	bne.n	80078a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007828:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <USBD_LL_Init+0x98>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <USBD_LL_Init+0x98>)
 8007834:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007838:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <USBD_LL_Init+0x98>)
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <USBD_LL_Init+0x9c>)
 800783c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800783e:	4b1c      	ldr	r3, [pc, #112]	; (80078b0 <USBD_LL_Init+0x98>)
 8007840:	2209      	movs	r2, #9
 8007842:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <USBD_LL_Init+0x98>)
 8007846:	2202      	movs	r2, #2
 8007848:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800784a:	4b19      	ldr	r3, [pc, #100]	; (80078b0 <USBD_LL_Init+0x98>)
 800784c:	2200      	movs	r2, #0
 800784e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007850:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <USBD_LL_Init+0x98>)
 8007852:	2202      	movs	r2, #2
 8007854:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <USBD_LL_Init+0x98>)
 8007858:	2200      	movs	r2, #0
 800785a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <USBD_LL_Init+0x98>)
 800785e:	2200      	movs	r2, #0
 8007860:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <USBD_LL_Init+0x98>)
 8007864:	2200      	movs	r2, #0
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <USBD_LL_Init+0x98>)
 800786a:	2200      	movs	r2, #0
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <USBD_LL_Init+0x98>)
 8007870:	2200      	movs	r2, #0
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007874:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <USBD_LL_Init+0x98>)
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800787a:	480d      	ldr	r0, [pc, #52]	; (80078b0 <USBD_LL_Init+0x98>)
 800787c:	f7f9 fb54 	bl	8000f28 <HAL_PCD_Init>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8007886:	f7f8 fe89 	bl	800059c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	4808      	ldr	r0, [pc, #32]	; (80078b0 <USBD_LL_Init+0x98>)
 800788e:	f7fa fce6 	bl	800225e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007892:	2240      	movs	r2, #64	; 0x40
 8007894:	2100      	movs	r1, #0
 8007896:	4806      	ldr	r0, [pc, #24]	; (80078b0 <USBD_LL_Init+0x98>)
 8007898:	f7fa fc9a 	bl	80021d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800789c:	2280      	movs	r2, #128	; 0x80
 800789e:	2101      	movs	r1, #1
 80078a0:	4803      	ldr	r0, [pc, #12]	; (80078b0 <USBD_LL_Init+0x98>)
 80078a2:	f7fa fc95 	bl	80021d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	240016dc 	.word	0x240016dc
 80078b4:	40080000 	.word	0x40080000

080078b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 fc4e 	bl	8001170 <HAL_PCD_Start>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f92e 	bl	8007b3c <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	461a      	mov	r2, r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	70fb      	strb	r3, [r7, #3]
 8007900:	460b      	mov	r3, r1
 8007902:	70bb      	strb	r3, [r7, #2]
 8007904:	4613      	mov	r3, r2
 8007906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007916:	78bb      	ldrb	r3, [r7, #2]
 8007918:	883a      	ldrh	r2, [r7, #0]
 800791a:	78f9      	ldrb	r1, [r7, #3]
 800791c:	f7fa f85f 	bl	80019de <HAL_PCD_EP_Open>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f908 	bl	8007b3c <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fa f8a8 	bl	8001aae <HAL_PCD_EP_Close>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f8e9 	bl	8007b3c <USBD_Get_USB_Status>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800796e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fa f980 	bl	8001c9c <HAL_PCD_EP_SetStall>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f8ca 	bl	8007b3c <USBD_Get_USB_Status>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fa f9c5 	bl	8001d64 <HAL_PCD_EP_ClrStall>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f8ab 	bl	8007b3c <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a06:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da0b      	bge.n	8007a28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	333e      	adds	r3, #62	; 0x3e
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	e00b      	b.n	8007a40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 ff92 	bl	8001994 <HAL_PCD_SetAddress>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f860 	bl	8007b3c <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	461a      	mov	r2, r3
 8007a96:	460b      	mov	r3, r1
 8007a98:	72fb      	strb	r3, [r7, #11]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aac:	893b      	ldrh	r3, [r7, #8]
 8007aae:	7af9      	ldrb	r1, [r7, #11]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	f7fa f8a9 	bl	8001c08 <HAL_PCD_EP_Transmit>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f83d 	bl	8007b3c <USBD_Get_USB_Status>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007ac6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	461a      	mov	r2, r3
 8007adc:	460b      	mov	r3, r1
 8007ade:	72fb      	strb	r3, [r7, #11]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007af2:	893b      	ldrh	r3, [r7, #8]
 8007af4:	7af9      	ldrb	r1, [r7, #11]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	f7fa f823 	bl	8001b42 <HAL_PCD_EP_Receive>
 8007afc:	4603      	mov	r3, r0
 8007afe:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f81a 	bl	8007b3c <USBD_Get_USB_Status>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fa f853 	bl	8001bd8 <HAL_PCD_EP_GetRxCount>
 8007b32:	4603      	mov	r3, r0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d817      	bhi.n	8007b80 <USBD_Get_USB_Status+0x44>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBD_Get_USB_Status+0x1c>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b6f 	.word	0x08007b6f
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b7b 	.word	0x08007b7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6c:	e00b      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	73fb      	strb	r3, [r7, #15]
    break;
 8007b72:	e008      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
    break;
 8007b78:	e005      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7e:	e002      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b80:	2302      	movs	r3, #2
 8007b82:	73fb      	strb	r3, [r7, #15]
    break;
 8007b84:	bf00      	nop
  }
  return usb_status;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <__errno>:
 8007b94:	4b01      	ldr	r3, [pc, #4]	; (8007b9c <__errno+0x8>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	24000180 	.word	0x24000180

08007ba0 <__libc_init_array>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	4e0d      	ldr	r6, [pc, #52]	; (8007bd8 <__libc_init_array+0x38>)
 8007ba4:	4c0d      	ldr	r4, [pc, #52]	; (8007bdc <__libc_init_array+0x3c>)
 8007ba6:	1ba4      	subs	r4, r4, r6
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	2500      	movs	r5, #0
 8007bac:	42a5      	cmp	r5, r4
 8007bae:	d109      	bne.n	8007bc4 <__libc_init_array+0x24>
 8007bb0:	4e0b      	ldr	r6, [pc, #44]	; (8007be0 <__libc_init_array+0x40>)
 8007bb2:	4c0c      	ldr	r4, [pc, #48]	; (8007be4 <__libc_init_array+0x44>)
 8007bb4:	f000 f8ea 	bl	8007d8c <_init>
 8007bb8:	1ba4      	subs	r4, r4, r6
 8007bba:	10a4      	asrs	r4, r4, #2
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	42a5      	cmp	r5, r4
 8007bc0:	d105      	bne.n	8007bce <__libc_init_array+0x2e>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bc8:	4798      	blx	r3
 8007bca:	3501      	adds	r5, #1
 8007bcc:	e7ee      	b.n	8007bac <__libc_init_array+0xc>
 8007bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bd2:	4798      	blx	r3
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	e7f2      	b.n	8007bbe <__libc_init_array+0x1e>
 8007bd8:	08007e04 	.word	0x08007e04
 8007bdc:	08007e04 	.word	0x08007e04
 8007be0:	08007e04 	.word	0x08007e04
 8007be4:	08007e08 	.word	0x08007e08

08007be8 <malloc>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <malloc+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f000 b861 	b.w	8007cb4 <_malloc_r>
 8007bf2:	bf00      	nop
 8007bf4:	24000180 	.word	0x24000180

08007bf8 <free>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <free+0xc>)
 8007bfa:	4601      	mov	r1, r0
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f000 b80b 	b.w	8007c18 <_free_r>
 8007c02:	bf00      	nop
 8007c04:	24000180 	.word	0x24000180

08007c08 <memset>:
 8007c08:	4402      	add	r2, r0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <_free_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d045      	beq.n	8007cac <_free_r+0x94>
 8007c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c24:	1f0c      	subs	r4, r1, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfb8      	it	lt
 8007c2a:	18e4      	addlt	r4, r4, r3
 8007c2c:	f000 f8ac 	bl	8007d88 <__malloc_lock>
 8007c30:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <_free_r+0x98>)
 8007c32:	6813      	ldr	r3, [r2, #0]
 8007c34:	4610      	mov	r0, r2
 8007c36:	b933      	cbnz	r3, 8007c46 <_free_r+0x2e>
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	6014      	str	r4, [r2, #0]
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c42:	f000 b8a2 	b.w	8007d8a <__malloc_unlock>
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	d90c      	bls.n	8007c64 <_free_r+0x4c>
 8007c4a:	6821      	ldr	r1, [r4, #0]
 8007c4c:	1862      	adds	r2, r4, r1
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bf04      	itt	eq
 8007c52:	681a      	ldreq	r2, [r3, #0]
 8007c54:	685b      	ldreq	r3, [r3, #4]
 8007c56:	6063      	str	r3, [r4, #4]
 8007c58:	bf04      	itt	eq
 8007c5a:	1852      	addeq	r2, r2, r1
 8007c5c:	6022      	streq	r2, [r4, #0]
 8007c5e:	6004      	str	r4, [r0, #0]
 8007c60:	e7ec      	b.n	8007c3c <_free_r+0x24>
 8007c62:	4613      	mov	r3, r2
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	b10a      	cbz	r2, 8007c6c <_free_r+0x54>
 8007c68:	42a2      	cmp	r2, r4
 8007c6a:	d9fa      	bls.n	8007c62 <_free_r+0x4a>
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	1858      	adds	r0, r3, r1
 8007c70:	42a0      	cmp	r0, r4
 8007c72:	d10b      	bne.n	8007c8c <_free_r+0x74>
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	4401      	add	r1, r0
 8007c78:	1858      	adds	r0, r3, r1
 8007c7a:	4282      	cmp	r2, r0
 8007c7c:	6019      	str	r1, [r3, #0]
 8007c7e:	d1dd      	bne.n	8007c3c <_free_r+0x24>
 8007c80:	6810      	ldr	r0, [r2, #0]
 8007c82:	6852      	ldr	r2, [r2, #4]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	4401      	add	r1, r0
 8007c88:	6019      	str	r1, [r3, #0]
 8007c8a:	e7d7      	b.n	8007c3c <_free_r+0x24>
 8007c8c:	d902      	bls.n	8007c94 <_free_r+0x7c>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	e7d3      	b.n	8007c3c <_free_r+0x24>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	1821      	adds	r1, r4, r0
 8007c98:	428a      	cmp	r2, r1
 8007c9a:	bf04      	itt	eq
 8007c9c:	6811      	ldreq	r1, [r2, #0]
 8007c9e:	6852      	ldreq	r2, [r2, #4]
 8007ca0:	6062      	str	r2, [r4, #4]
 8007ca2:	bf04      	itt	eq
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	605c      	str	r4, [r3, #4]
 8007caa:	e7c7      	b.n	8007c3c <_free_r+0x24>
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	bf00      	nop
 8007cb0:	2400020c 	.word	0x2400020c

08007cb4 <_malloc_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	1ccd      	adds	r5, r1, #3
 8007cb8:	f025 0503 	bic.w	r5, r5, #3
 8007cbc:	3508      	adds	r5, #8
 8007cbe:	2d0c      	cmp	r5, #12
 8007cc0:	bf38      	it	cc
 8007cc2:	250c      	movcc	r5, #12
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	db01      	blt.n	8007cce <_malloc_r+0x1a>
 8007cca:	42a9      	cmp	r1, r5
 8007ccc:	d903      	bls.n	8007cd6 <_malloc_r+0x22>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	f000 f857 	bl	8007d88 <__malloc_lock>
 8007cda:	4a21      	ldr	r2, [pc, #132]	; (8007d60 <_malloc_r+0xac>)
 8007cdc:	6814      	ldr	r4, [r2, #0]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	b991      	cbnz	r1, 8007d08 <_malloc_r+0x54>
 8007ce2:	4c20      	ldr	r4, [pc, #128]	; (8007d64 <_malloc_r+0xb0>)
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	b91b      	cbnz	r3, 8007cf0 <_malloc_r+0x3c>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 f83d 	bl	8007d68 <_sbrk_r>
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f838 	bl	8007d68 <_sbrk_r>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d124      	bne.n	8007d46 <_malloc_r+0x92>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f842 	bl	8007d8a <__malloc_unlock>
 8007d06:	e7e4      	b.n	8007cd2 <_malloc_r+0x1e>
 8007d08:	680b      	ldr	r3, [r1, #0]
 8007d0a:	1b5b      	subs	r3, r3, r5
 8007d0c:	d418      	bmi.n	8007d40 <_malloc_r+0x8c>
 8007d0e:	2b0b      	cmp	r3, #11
 8007d10:	d90f      	bls.n	8007d32 <_malloc_r+0x7e>
 8007d12:	600b      	str	r3, [r1, #0]
 8007d14:	50cd      	str	r5, [r1, r3]
 8007d16:	18cc      	adds	r4, r1, r3
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f836 	bl	8007d8a <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac3      	subs	r3, r0, r3
 8007d2a:	d0d3      	beq.n	8007cd4 <_malloc_r+0x20>
 8007d2c:	425a      	negs	r2, r3
 8007d2e:	50e2      	str	r2, [r4, r3]
 8007d30:	e7d0      	b.n	8007cd4 <_malloc_r+0x20>
 8007d32:	428c      	cmp	r4, r1
 8007d34:	684b      	ldr	r3, [r1, #4]
 8007d36:	bf16      	itet	ne
 8007d38:	6063      	strne	r3, [r4, #4]
 8007d3a:	6013      	streq	r3, [r2, #0]
 8007d3c:	460c      	movne	r4, r1
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0x64>
 8007d40:	460c      	mov	r4, r1
 8007d42:	6849      	ldr	r1, [r1, #4]
 8007d44:	e7cc      	b.n	8007ce0 <_malloc_r+0x2c>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d005      	beq.n	8007d5c <_malloc_r+0xa8>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 f808 	bl	8007d68 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d0cf      	beq.n	8007cfc <_malloc_r+0x48>
 8007d5c:	6025      	str	r5, [r4, #0]
 8007d5e:	e7db      	b.n	8007d18 <_malloc_r+0x64>
 8007d60:	2400020c 	.word	0x2400020c
 8007d64:	24000210 	.word	0x24000210

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4c06      	ldr	r4, [pc, #24]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	f7f8 fc6c 	bl	8000650 <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	24001ae4 	.word	0x24001ae4

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
