
h7_custombl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df4  08007df4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007df4  08007df4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007df4  08007df4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08007dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001900  240001e4  08007fe0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001ae4  08007fe0  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e671  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000393d  00000000  00000000  0003e883  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000421c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037ba1  00000000  00000000  00043ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f277  00000000  00000000  0007b889  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00150a37  00000000  00000000  0008ab00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001db537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  001db5b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d7c 	.word	0x08007d7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	08007d7c 	.word	0x08007d7c

080002d8 <JumpToBootloader>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void JumpToBootloader(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  uint32_t i=0;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  void (*SysMemBootJump)(void);
  /* Set the address of the entry point to bootloader */
     volatile uint32_t BootAddr = 0x1FF09800;
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <JumpToBootloader+0x64>)
 80002e4:	603b      	str	r3, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e6:	b672      	cpsid	i
  /* Disable all interrupts */
     __disable_irq();
  /* Disable Systick timer */
     SysTick->CTRL = 0;
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <JumpToBootloader+0x68>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
  /* Set the clock to the default state */
     HAL_RCC_DeInit();
 80002ee:	f002 f82d 	bl	800234c <HAL_RCC_DeInit>
  /* Clear Interrupt Enable Register & Interrupt Pending Register */
     for (i=0;i<5;i++)
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e010      	b.n	800031a <JumpToBootloader+0x42>
     {
	  NVIC->ICER[i]=0xFFFFFFFF;
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <JumpToBootloader+0x6c>)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3320      	adds	r3, #32
 80002fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  NVIC->ICPR[i]=0xFFFFFFFF;
 8000306:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <JumpToBootloader+0x6c>)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3360      	adds	r3, #96	; 0x60
 800030c:	f04f 31ff 	mov.w	r1, #4294967295
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     for (i=0;i<5;i++)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b04      	cmp	r3, #4
 800031e:	d9eb      	bls.n	80002f8 <JumpToBootloader+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 8000320:	b662      	cpsie	i
     }
  /* Re-enable all interrupts */
     __enable_irq();
  /* Set up the1ff09800 jump to booloader address + 4 */
     SysMemBootJump = (void (*)(void)) (*((uint32_t *) ((BootAddr + 4))));
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	3304      	adds	r3, #4
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	60bb      	str	r3, [r7, #8]
  /* Set the main stack pointer to the bootloader stack */
     __set_MSP(*(uint32_t *)BootAddr);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f383 8808 	msr	MSP, r3
  /* Call the function to jump to bootloader location */
     SysMemBootJump();
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	4798      	blx	r3
  /* Jump is done successfully */
     while (1)
 800033a:	e7fe      	b.n	800033a <JumpToBootloader+0x62>
 800033c:	1ff09800 	.word	0x1ff09800
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000e100 	.word	0xe000e100

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034e:	f000 fa23 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000352:	f000 f813 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f000 f8c9 	bl	80004ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800035a:	f006 fefd 	bl	8007158 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char mystr[] = "hello\n\r";
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <main+0x30>)
 8000360:	463b      	mov	r3, r7
 8000362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000366:	e883 0003 	stmia.w	r3, {r0, r1}
	  CDC_Transmit_FS((uint8_t*)mystr,sizeof(mystr));
 800036a:	463b      	mov	r3, r7
 800036c:	2108      	movs	r1, #8
 800036e:	4618      	mov	r0, r3
 8000370:	f006 ffd2 	bl	8007318 <CDC_Transmit_FS>
  {
 8000374:	e7f3      	b.n	800035e <main+0x16>
 8000376:	bf00      	nop
 8000378:	08007d94 	.word	0x08007d94

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0cc      	sub	sp, #304	; 0x130
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000386:	224c      	movs	r2, #76	; 0x4c
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f007 fc34 	bl	8007bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000394:	2220      	movs	r2, #32
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f007 fc2d 	bl	8007bf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4618      	mov	r0, r3
 80003a4:	23bc      	movs	r3, #188	; 0xbc
 80003a6:	461a      	mov	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f007 fc25 	bl	8007bf8 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ae:	2002      	movs	r0, #2
 80003b0:	f001 ff82 	bl	80022b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <SystemClock_Config+0x168>)
 80003bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003be:	4a49      	ldr	r2, [pc, #292]	; (80004e4 <SystemClock_Config+0x168>)
 80003c0:	f023 0301 	bic.w	r3, r3, #1
 80003c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003c6:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <SystemClock_Config+0x168>)
 80003c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ca:	f003 0201 	and.w	r2, r3, #1
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	4b45      	ldr	r3, [pc, #276]	; (80004e8 <SystemClock_Config+0x16c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a44      	ldr	r2, [pc, #272]	; (80004e8 <SystemClock_Config+0x16c>)
 80003d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b42      	ldr	r3, [pc, #264]	; (80004e8 <SystemClock_Config+0x16c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ee:	bf00      	nop
 80003f0:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <SystemClock_Config+0x16c>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003fc:	d1f8      	bne.n	80003f0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003fe:	2330      	movs	r3, #48	; 0x30
 8000400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000404:	2301      	movs	r3, #1
 8000406:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800040a:	2380      	movs	r3, #128	; 0x80
 800040c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000410:	2310      	movs	r3, #16
 8000412:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 800041c:	2301      	movs	r3, #1
 800041e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000422:	2301      	movs	r3, #1
 8000424:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 8000428:	2326      	movs	r3, #38	; 0x26
 800042a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000434:	2304      	movs	r3, #4
 8000436:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000440:	2308      	movs	r3, #8
 8000442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000446:	2302      	movs	r3, #2
 8000448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000456:	4618      	mov	r0, r3
 8000458:	f002 f8a2 	bl	80025a0 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000462:	f000 f887 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	233f      	movs	r3, #63	; 0x3f
 8000468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fc57 	bl	8002d50 <HAL_RCC_ClockConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x130>
  {
    Error_Handler();
 80004a8:	f000 f864 	bl	8000574 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004b4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 ff9a 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 80004d2:	f000 f84f 	bl	8000574 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80004d6:	f001 ff29 	bl	800232c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80004da:	bf00      	nop
 80004dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	58000400 	.word	0x58000400
 80004e8:	58024800 	.word	0x58024800

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_GPIO_Init+0x80>)
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	4a18      	ldr	r2, [pc, #96]	; (800056c <MX_GPIO_Init+0x80>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_GPIO_Init+0x80>)
 8000514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x80>)
 8000522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_GPIO_Init+0x80>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_GPIO_Init+0x80>)
 8000532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <MX_GPIO_Init+0x84>)
 8000544:	f000 fca8 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	4619      	mov	r1, r3
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_GPIO_Init+0x84>)
 8000560:	f000 faea 	bl	8000b38 <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	58024400 	.word	0x58024400
 8000570:	58020400 	.word	0x58020400

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_MspInit+0x30>)
 800058c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_MspInit+0x30>)
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_MspInit+0x30>)
 800059c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	58024400 	.word	0x58024400

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MemManage_Handler+0x4>

080005d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <UsageFault_Handler+0x4>

080005de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f936 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <OTG_FS_IRQHandler+0x10>)
 800061a:	f000 fdc8 	bl	80011ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	240016d8 	.word	0x240016d8

08000628 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x50>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x16>
		heap_end = &end;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <_sbrk+0x50>)
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <_sbrk+0x54>)
 800063c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <_sbrk+0x50>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <_sbrk+0x50>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	466a      	mov	r2, sp
 800064e:	4293      	cmp	r3, r2
 8000650:	d907      	bls.n	8000662 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000652:	f007 fa97 	bl	8007b84 <__errno>
 8000656:	4602      	mov	r2, r0
 8000658:	230c      	movs	r3, #12
 800065a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	e006      	b.n	8000670 <_sbrk+0x48>
	}

	heap_end += incr;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <_sbrk+0x50>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a03      	ldr	r2, [pc, #12]	; (8000678 <_sbrk+0x50>)
 800066c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	24000200 	.word	0x24000200
 800067c:	24001ae8 	.word	0x24001ae8

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemInit+0xac>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemInit+0xac>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemInit+0xb0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemInit+0xb0>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemInit+0xb0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemInit+0xb0>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4921      	ldr	r1, [pc, #132]	; (8000730 <SystemInit+0xb0>)
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <SystemInit+0xb4>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemInit+0xb0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <SystemInit+0xb0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <SystemInit+0xb0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <SystemInit+0xb0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <SystemInit+0xb0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <SystemInit+0xb0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <SystemInit+0xb0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <SystemInit+0xb0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <SystemInit+0xb0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <SystemInit+0xb0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <SystemInit+0xb0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <SystemInit+0xb0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <SystemInit+0xb0>)
 80006fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <SystemInit+0xb0>)
 8000702:	2200      	movs	r2, #0
 8000704:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <SystemInit+0xb8>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <SystemInit+0xbc>)
 800070c:	4013      	ands	r3, r2
 800070e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000712:	d202      	bcs.n	800071a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <SystemInit+0xc0>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <SystemInit+0xac>)
 800071c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000720:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	58024400 	.word	0x58024400
 8000734:	eaf6ed7f 	.word	0xeaf6ed7f
 8000738:	5c001000 	.word	0x5c001000
 800073c:	ffff0000 	.word	0xffff0000
 8000740:	51008108 	.word	0x51008108

08000744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800077c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800074a:	e003      	b.n	8000754 <LoopCopyDataInit>

0800074c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800074e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000752:	3104      	adds	r1, #4

08000754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800075c:	d3f6      	bcc.n	800074c <CopyDataInit>
  ldr  r2, =_sbss
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000760:	e002      	b.n	8000768 <LoopFillZerobss>

08000762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000764:	f842 3b04 	str.w	r3, [r2], #4

08000768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800076a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800076c:	d3f9      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800076e:	f7ff ff87 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000772:	f007 fa0d 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000776:	f7ff fde7 	bl	8000348 <main>
  bx  lr    
 800077a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800077c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000780:	08007dfc 	.word	0x08007dfc
  ldr  r0, =_sdata
 8000784:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000788:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 800078c:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8000790:	24001ae4 	.word	0x24001ae4

08000794 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC3_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079e:	2003      	movs	r0, #3
 80007a0:	f000 f98a 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007a4:	f002 fc8a 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 80007a8:	4601      	mov	r1, r0
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_Init+0x68>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <HAL_Init+0x6c>)
 80007b6:	5cd3      	ldrb	r3, [r2, r3]
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	fa21 f303 	lsr.w	r3, r1, r3
 80007c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_Init+0x68>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_Init+0x6c>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	fa22 f303 	lsr.w	r3, r2, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <HAL_Init+0x70>)
 80007da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <HAL_Init+0x74>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f814 	bl	8000810 <HAL_InitTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e002      	b.n	80007f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007f2:	f7ff fec7 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58024400 	.word	0x58024400
 8000804:	08007de4 	.word	0x08007de4
 8000808:	24000004 	.word	0x24000004
 800080c:	24000000 	.word	0x24000000

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_InitTick+0x60>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e021      	b.n	8000868 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_InitTick+0x64>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f96f 	bl	8000b1e <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f000 f939 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_InitTick+0x68>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000000 	.word	0x24000000
 8000878:	24000008 	.word	0x24000008

0800087c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	2400000c 	.word	0x2400000c
 80008a0:	24000210 	.word	0x24000210

080008a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	24000210 	.word	0x24000210

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff ffee 	bl	80008a4 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_Delay+0x40>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffde 	bl	80008a4 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2400000c 	.word	0x2400000c

08000900 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetREVID+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	0c1b      	lsrs	r3, r3, #16
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	5c001000 	.word	0x5c001000

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <__NVIC_SetPriorityGrouping+0x40>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	4313      	orrs	r3, r2
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x40>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	05fa0000 	.word	0x05fa0000

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4907      	ldr	r1, [pc, #28]	; (80009b4 <__NVIC_EnableIRQ+0x38>)
 8000996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	; 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff29 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff40 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff90 	bl	8000a0c <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5f 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff33 	bl	800097c <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffa4 	bl	8000a74 <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <HAL_GPIO_Init+0x234>)
 8000b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b4a:	e194      	b.n	8000e76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8186 	beq.w	8000e70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d00b      	beq.n	8000b84 <HAL_GPIO_Init+0x4c>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b78:	2b11      	cmp	r3, #17
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b12      	cmp	r3, #18
 8000b82:	d130      	bne.n	8000be6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	f003 0201 	and.w	r2, r3, #1
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0xee>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b12      	cmp	r3, #18
 8000c24:	d123      	bne.n	8000c6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	69b9      	ldr	r1, [r7, #24]
 8000c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0203 	and.w	r2, r3, #3
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 80e0 	beq.w	8000e70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_GPIO_Init+0x238>)
 8000cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <HAL_GPIO_Init+0x238>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <HAL_GPIO_Init+0x238>)
 8000cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cce:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <HAL_GPIO_Init+0x23c>)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_GPIO_Init+0x240>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d052      	beq.n	8000da0 <HAL_GPIO_Init+0x268>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_GPIO_Init+0x244>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d031      	beq.n	8000d66 <HAL_GPIO_Init+0x22e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_GPIO_Init+0x248>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d02b      	beq.n	8000d62 <HAL_GPIO_Init+0x22a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_GPIO_Init+0x24c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d025      	beq.n	8000d5e <HAL_GPIO_Init+0x226>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <HAL_GPIO_Init+0x250>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01f      	beq.n	8000d5a <HAL_GPIO_Init+0x222>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_GPIO_Init+0x254>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0x21e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_GPIO_Init+0x258>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0x21a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_GPIO_Init+0x25c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00d      	beq.n	8000d4e <HAL_GPIO_Init+0x216>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_GPIO_Init+0x260>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x212>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_GPIO_Init+0x264>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_GPIO_Init+0x20e>
 8000d42:	2309      	movs	r3, #9
 8000d44:	e02d      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d46:	230a      	movs	r3, #10
 8000d48:	e02b      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	e029      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e027      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e025      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e023      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e021      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e01f      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e01d      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e01b      	b.n	8000da2 <HAL_GPIO_Init+0x26a>
 8000d6a:	bf00      	nop
 8000d6c:	58000080 	.word	0x58000080
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58000400 	.word	0x58000400
 8000d78:	58020000 	.word	0x58020000
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58020800 	.word	0x58020800
 8000d84:	58020c00 	.word	0x58020c00
 8000d88:	58021000 	.word	0x58021000
 8000d8c:	58021400 	.word	0x58021400
 8000d90:	58021800 	.word	0x58021800
 8000d94:	58021c00 	.word	0x58021c00
 8000d98:	58022000 	.word	0x58022000
 8000d9c:	58022400 	.word	0x58022400
 8000da0:	2300      	movs	r3, #0
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db2:	4938      	ldr	r1, [pc, #224]	; (8000e94 <HAL_GPIO_Init+0x35c>)
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	3301      	adds	r3, #1
 8000e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f ae63 	bne.w	8000b4c <HAL_GPIO_Init+0x14>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	58000400 	.word	0x58000400

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	401a      	ands	r2, r3
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d104      	bne.n	8000eee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	041a      	lsls	r2, r3, #16
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b08f      	sub	sp, #60	; 0x3c
 8000f04:	af0a      	add	r7, sp, #40	; 0x28
 8000f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e116      	b.n	8001140 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d106      	bne.n	8000f32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f006 fb27 	bl	8007580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fbac 	bl	80046ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	687e      	ldr	r6, [r7, #4]
 8000f5e:	466d      	mov	r5, sp
 8000f60:	f106 0410 	add.w	r4, r6, #16
 8000f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f70:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f74:	1d33      	adds	r3, r6, #4
 8000f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f003 fa83 	bl	8004484 <USB_CoreInit>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0d7      	b.n	8001140 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fb9a 	bl	80046d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e04a      	b.n	8001038 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	333d      	adds	r3, #61	; 0x3d
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	333c      	adds	r3, #60	; 0x3c
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	b298      	uxth	r0, r3
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3342      	adds	r3, #66	; 0x42
 8000fde:	4602      	mov	r2, r0
 8000fe0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	333f      	adds	r3, #63	; 0x3f
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3344      	adds	r3, #68	; 0x44
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3348      	adds	r3, #72	; 0x48
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	3350      	adds	r3, #80	; 0x50
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3301      	adds	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3af      	bcc.n	8000fa2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e044      	b.n	80010d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	1a9b      	subs	r3, r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3b5      	bcc.n	8001048 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	687e      	ldr	r6, [r7, #4]
 80010e4:	466d      	mov	r5, sp
 80010e6:	f106 0410 	add.w	r4, r6, #16
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80010fa:	1d33      	adds	r3, r6, #4
 80010fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f003 fb10 	bl	8004724 <USB_DevInit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2202      	movs	r2, #2
 800110e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e014      	b.n	8001140 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 f892 	bl	8002258 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f004 faf7 	bl	800572c <USB_DevDisconnect>

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001148 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_PCD_Start+0x1c>
 8001160:	2302      	movs	r3, #2
 8001162:	e020      	b.n	80011a6 <HAL_PCD_Start+0x5e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	2b01      	cmp	r3, #1
 8001172:	d109      	bne.n	8001188 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fab5 	bl	80056fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fa78 	bl	800468c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011ae:	b590      	push	{r4, r7, lr}
 80011b0:	b08d      	sub	sp, #52	; 0x34
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 fb5c 	bl	8005882 <USB_GetMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 83ca 	bne.w	8001966 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fac0 	bl	800575c <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 83c0 	beq.w	8001964 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fab7 	bl	800575c <USB_ReadInterrupts>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d107      	bne.n	8001208 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f002 0202 	and.w	r2, r2, #2
 8001206:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f004 faa5 	bl	800575c <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b10      	cmp	r3, #16
 800121a:	d161      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0210 	bic.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f003 020f 	and.w	r2, r3, #15
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	0c5b      	lsrs	r3, r3, #17
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	2b02      	cmp	r3, #2
 8001256:	d124      	bne.n	80012a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d035      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800126e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	6a38      	ldr	r0, [r7, #32]
 8001278:	f004 f91d 	bl	80054b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129a:	441a      	add	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	619a      	str	r2, [r3, #24]
 80012a0:	e016      	b.n	80012d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	0c5b      	lsrs	r3, r3, #17
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d110      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012b4:	2208      	movs	r2, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	6a38      	ldr	r0, [r7, #32]
 80012ba:	f004 f8fc 	bl	80054b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fa39 	bl	800575c <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f4:	d16e      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fa3f 	bl	8005782 <USB_ReadDevAllOutEpInterrupt>
 8001304:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001306:	e062      	b.n	80013ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d057      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fa64 	bl	80057ea <USB_ReadDevOutEPInterrupt>
 8001322:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00c      	beq.n	8001348 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133a:	461a      	mov	r2, r3
 800133c:	2301      	movs	r3, #1
 800133e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fdde 	bl	8001f04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135e:	461a      	mov	r2, r3
 8001360:	2308      	movs	r3, #8
 8001362:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fed8 	bl	800211c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001382:	461a      	mov	r2, r3
 8001384:	2310      	movs	r3, #16
 8001386:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	015a      	lsls	r2, r3, #5
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	4413      	add	r3, r2
 800139a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139e:	461a      	mov	r2, r3
 80013a0:	2320      	movs	r3, #32
 80013a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	3301      	adds	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d199      	bne.n	8001308 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 f9bf 	bl	800575c <USB_ReadInterrupts>
 80013de:	4603      	mov	r3, r0
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e8:	f040 80c0 	bne.w	800156c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 f9e0 	bl	80057b6 <USB_ReadDevAllInEpInterrupt>
 80013f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013fc:	e0b2      	b.n	8001564 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a7 	beq.w	8001558 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fa06 	bl	8005826 <USB_ReadDevInEPInterrupt>
 800141a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d057      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2201      	movs	r2, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	69f9      	ldr	r1, [r7, #28]
 8001442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001446:	4013      	ands	r3, r2
 8001448:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001456:	461a      	mov	r2, r3
 8001458:	2301      	movs	r3, #1
 800145a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d132      	bne.n	80014ca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3348      	adds	r3, #72	; 0x48
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4403      	add	r3, r0
 8001484:	3344      	adds	r3, #68	; 0x44
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4419      	add	r1, r3
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	4613      	mov	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d113      	bne.n	80014ca <HAL_PCD_IRQHandler+0x31c>
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3350      	adds	r3, #80	; 0x50
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d108      	bne.n	80014ca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014c2:	461a      	mov	r2, r3
 80014c4:	2101      	movs	r1, #1
 80014c6:	f004 fa0f 	bl	80058e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f006 f8d4 	bl	800767e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ec:	461a      	mov	r2, r3
 80014ee:	2308      	movs	r3, #8
 80014f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001508:	461a      	mov	r2, r3
 800150a:	2310      	movs	r3, #16
 800150c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	015a      	lsls	r2, r3, #5
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001524:	461a      	mov	r2, r3
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	2302      	movs	r3, #2
 8001544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fc48 	bl	8001de8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	3301      	adds	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001566:	2b00      	cmp	r3, #0
 8001568:	f47f af49 	bne.w	80013fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f004 f8f3 	bl	800575c <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800157c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001580:	d122      	bne.n	80015c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fe78 	bl	80022a0 <HAL_PCDEx_LPM_Callback>
 80015b0:	e002      	b.n	80015b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f006 f8da 	bl	800776c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 f8c5 	bl	800575c <USB_ReadInterrupts>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015dc:	d112      	bne.n	8001604 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f006 f896 	bl	8007720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001602:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f8a7 	bl	800575c <USB_ReadInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001618:	d121      	bne.n	800165e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001628:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d111      	bne.n	8001658 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	f003 020f 	and.w	r2, r3, #15
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800164e:	2101      	movs	r1, #1
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fe25 	bl	80022a0 <HAL_PCDEx_LPM_Callback>
 8001656:	e002      	b.n	800165e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f006 f861 	bl	8007720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f87a 	bl	800575c <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001672:	f040 80c7 	bne.w	8001804 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2110      	movs	r1, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f003 f9a5 	bl	80049e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	e056      	b.n	800174a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	015a      	lsls	r2, r3, #5
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a8:	461a      	mov	r2, r3
 80016aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	0151      	lsls	r1, r2, #5
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	440a      	add	r2, r1
 80016c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016ce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e0:	0151      	lsls	r1, r2, #5
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	440a      	add	r2, r1
 80016e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fc:	461a      	mov	r2, r3
 80016fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001702:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001714:	0151      	lsls	r1, r2, #5
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	440a      	add	r2, r1
 800171a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800171e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001722:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001734:	0151      	lsls	r1, r2, #5
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	440a      	add	r2, r1
 800173a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800173e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001742:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	3301      	adds	r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001750:	429a      	cmp	r2, r3
 8001752:	d3a3      	bcc.n	800169c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001762:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001766:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	2b00      	cmp	r3, #0
 800176e:	d016      	beq.n	800179e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001780:	f043 030b 	orr.w	r3, r3, #11
 8001784:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001796:	f043 030b 	orr.w	r3, r3, #11
 800179a:	6453      	str	r3, [r2, #68]	; 0x44
 800179c:	e015      	b.n	80017ca <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	4619      	mov	r1, r3
 80017ae:	f242 032b 	movw	r3, #8235	; 0x202b
 80017b2:	4313      	orrs	r3, r2
 80017b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f043 030b 	orr.w	r3, r3, #11
 80017c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ee:	461a      	mov	r2, r3
 80017f0:	f004 f87a 	bl	80058e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 ffa7 	bl	800575c <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001818:	d124      	bne.n	8001864 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f004 f83e 	bl	80058a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 f93a 	bl	8004aa2 <USB_GetDevSpeed>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	f001 fdb1 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 800183e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	4620      	mov	r0, r4
 800184a:	f002 fe7d 	bl	8004548 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f005 ff3d 	bl	80076ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001862:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 ff77 	bl	800575c <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b08      	cmp	r3, #8
 8001876:	d10a      	bne.n	800188e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f005 ff1a 	bl	80076b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f002 0208 	and.w	r2, r2, #8
 800188c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ff62 	bl	800575c <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018a2:	d10f      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f005 ff7c 	bl	80077ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 ff47 	bl	800575c <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018d8:	d10f      	bne.n	80018fa <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 ff4f 	bl	8007788 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 ff2c 	bl	800575c <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d10a      	bne.n	8001926 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f005 ff5d 	bl	80077d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 ff16 	bl	800575c <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b04      	cmp	r3, #4
 8001938:	d115      	bne.n	8001966 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f005 ff4d 	bl	80077ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	e000      	b.n	8001966 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001964:	bf00      	nop
    }
  }
}
 8001966:	3734      	adds	r7, #52	; 0x34
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}

0800196c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_PCD_SetAddress+0x1a>
 8001982:	2302      	movs	r3, #2
 8001984:	e013      	b.n	80019ae <HAL_PCD_SetAddress+0x42>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fe86 	bl	80056b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	4608      	mov	r0, r1
 80019c0:	4611      	mov	r1, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	70fb      	strb	r3, [r7, #3]
 80019c8:	460b      	mov	r3, r1
 80019ca:	803b      	strh	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da0f      	bge.n	80019fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 020f 	and.w	r2, r3, #15
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	3338      	adds	r3, #56	; 0x38
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	705a      	strb	r2, [r3, #1]
 80019fa:	e00f      	b.n	8001a1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a28:	883a      	ldrh	r2, [r7, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	78ba      	ldrb	r2, [r7, #2]
 8001a32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a46:	78bb      	ldrb	r3, [r7, #2]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d102      	bne.n	8001a52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_PCD_EP_Open+0xaa>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e00e      	b.n	8001a7e <HAL_PCD_EP_Open+0xc8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f83c 	bl	8004aec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da0f      	bge.n	8001aba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 020f 	and.w	r2, r3, #15
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	3338      	adds	r3, #56	; 0x38
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	3304      	adds	r3, #4
 8001ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	705a      	strb	r2, [r3, #1]
 8001ab8:	e00f      	b.n	8001ada <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_PCD_EP_Close+0x6e>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e00e      	b.n	8001b12 <HAL_PCD_EP_Close+0x8c>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 f87a 	bl	8004bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	460b      	mov	r3, r1
 8001b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	f003 020f 	and.w	r2, r3, #15
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d102      	bne.n	8001b76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6979      	ldr	r1, [r7, #20]
 8001b8e:	f003 fb05 	bl	800519c <USB_EP0StartXfer>
 8001b92:	e008      	b.n	8001ba6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	f003 f8af 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	460b      	mov	r3, r1
 8001bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3338      	adds	r3, #56	; 0x38
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	f003 faa3 	bl	800519c <USB_EP0StartXfer>
 8001c56:	e008      	b.n	8001c6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	6979      	ldr	r1, [r7, #20]
 8001c66:	f003 f84d 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 020f 	and.w	r2, r3, #15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d901      	bls.n	8001c92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e050      	b.n	8001d34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0f      	bge.n	8001cba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	3338      	adds	r3, #56	; 0x38
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
 8001cb8:	e00d      	b.n	8001cd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_PCD_EP_SetStall+0x82>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e01e      	b.n	8001d34 <HAL_PCD_EP_SetStall+0xc0>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fbff 	bl	8005508 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	b2d9      	uxtb	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d24:	461a      	mov	r2, r3
 8001d26:	f003 fddf 	bl	80058e8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e042      	b.n	8001de0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0f      	bge.n	8001d82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	3338      	adds	r3, #56	; 0x38
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00f      	b.n	8001da2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_EP_ClrStall+0x86>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e00e      	b.n	8001de0 <HAL_PCD_EP_ClrStall+0xa4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fc07 	bl	80055e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3338      	adds	r3, #56	; 0x38
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d901      	bls.n	8001e20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e06c      	b.n	8001efa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d902      	bls.n	8001e3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3303      	adds	r3, #3
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e44:	e02b      	b.n	8001e9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d902      	bls.n	8001e62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3303      	adds	r3, #3
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f003 fae3 	bl	800544c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	441a      	add	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d809      	bhi.n	8001ec8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d203      	bcs.n	8001ec8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1be      	bne.n	8001e46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d811      	bhi.n	8001ef8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	2201      	movs	r2, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	6939      	ldr	r1, [r7, #16]
 8001ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	333c      	adds	r3, #60	; 0x3c
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f040 80a0 	bne.w	800207c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a72      	ldr	r2, [pc, #456]	; (8002114 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	f240 80dd 	bls.w	800210a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80d7 	beq.w	800210a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6e:	6093      	str	r3, [r2, #8]
 8001f70:	e0cb      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	6093      	str	r3, [r2, #8]
 8001f8e:	e0bc      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80b7 	bne.w	800210a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a5d      	ldr	r2, [pc, #372]	; (8002114 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d90f      	bls.n	8001fc4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc0:	6093      	str	r3, [r2, #8]
 8001fc2:	e0a2      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fd6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4403      	add	r3, r0
 8001ffa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ffe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4403      	add	r3, r0
 8002022:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4419      	add	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4403      	add	r3, r0
 8002038:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d114      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x16a>
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002066:	461a      	mov	r2, r3
 8002068:	2101      	movs	r1, #1
 800206a:	f003 fc3d 	bl	80058e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 fae7 	bl	8007648 <HAL_PCD_DataOutStageCallback>
 800207a:	e046      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a26      	ldr	r2, [pc, #152]	; (8002118 <PCD_EP_OutXfrComplete_int+0x214>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d124      	bne.n	80020ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a0:	6093      	str	r3, [r2, #8]
 80020a2:	e032      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ba:	461a      	mov	r2, r3
 80020bc:	2320      	movs	r3, #32
 80020be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f005 fabe 	bl	8007648 <HAL_PCD_DataOutStageCallback>
 80020cc:	e01d      	b.n	800210a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d114      	bne.n	80020fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d108      	bne.n	80020fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020f6:	461a      	mov	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f003 fbf5 	bl	80058e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f005 fa9f 	bl	8007648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	4f54300a 	.word	0x4f54300a
 8002118:	4f54310a 	.word	0x4f54310a

0800211c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	333c      	adds	r3, #60	; 0x3c
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d90e      	bls.n	8002170 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f005 fa57 	bl	8007624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d90c      	bls.n	8002198 <PCD_EP_OutSetupPacket_int+0x7c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d108      	bne.n	8002198 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002190:	461a      	mov	r2, r3
 8002192:	2101      	movs	r1, #1
 8002194:	f003 fba8 	bl	80058e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4f54300a 	.word	0x4f54300a

080021a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
 80021b4:	4613      	mov	r3, r2
 80021b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021c6:	883b      	ldrh	r3, [r7, #0]
 80021c8:	0419      	lsls	r1, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
 80021d4:	e028      	b.n	8002228 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e00d      	b.n	8002206 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	3340      	adds	r3, #64	; 0x40
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	3301      	adds	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	3b01      	subs	r3, #1
 800220c:	429a      	cmp	r2, r3
 800220e:	d3ec      	bcc.n	80021ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002210:	883b      	ldrh	r3, [r7, #0]
 8002212:	0418      	lsls	r0, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	3b01      	subs	r3, #1
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	4302      	orrs	r2, r0
 8002220:	3340      	adds	r3, #64	; 0x40
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_PCDEx_ActivateLPM+0x44>)
 8002288:	4313      	orrs	r3, r2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	10000003 	.word	0x10000003

080022a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_PWREx_ConfigSupply+0x70>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d00a      	beq.n	80022e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_PWREx_ConfigSupply+0x70>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e01f      	b.n	800231e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e01d      	b.n	800231e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_PWREx_ConfigSupply+0x70>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	490f      	ldr	r1, [pc, #60]	; (8002328 <HAL_PWREx_ConfigSupply+0x70>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022f2:	f7fe fad7 	bl	80008a4 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f8:	e009      	b.n	800230e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022fa:	f7fe fad3 	bl	80008a4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002308:	d901      	bls.n	800230e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e007      	b.n	800231e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_PWREx_ConfigSupply+0x70>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	d1ee      	bne.n	80022fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	58024800 	.word	0x58024800

0800232c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	58024800 	.word	0x58024800

0800234c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	2b06      	cmp	r3, #6
 800235c:	d80f      	bhi.n	800237e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800235e:	4b86      	ldr	r3, [pc, #536]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 030f 	bic.w	r3, r3, #15
 8002366:	4a84      	ldr	r2, [pc, #528]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002368:	f043 0307 	orr.w	r3, r3, #7
 800236c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	2b07      	cmp	r3, #7
 8002378:	d001      	beq.n	800237e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0f7      	b.n	800256e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800237e:	f7fe fa91 	bl	80008a4 <HAL_GetTick>
 8002382:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002384:	4b7d      	ldr	r3, [pc, #500]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7c      	ldr	r2, [pc, #496]	; (800257c <HAL_RCC_DeInit+0x230>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe fa87 	bl	80008a4 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0e4      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a4:	4b75      	ldr	r3, [pc, #468]	; (800257c <HAL_RCC_DeInit+0x230>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80023b0:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_DeInit+0x230>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_DeInit+0x230>)
 80023b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80023bc:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_DeInit+0x230>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_DeInit+0x234>)
 80023c4:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <HAL_RCC_DeInit+0x238>)
 80023c6:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_DeInit+0x23c>)
 80023ca:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_DeInit+0x238>)
 80023cc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_DeInit+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fa1c 	bl	8000810 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0c5      	b.n	800256e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80023e2:	f7fe fa5f 	bl	80008a4 <HAL_GetTick>
 80023e6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ea:	f7fe fa5b 	bl	80008a4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0b6      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800240c:	f7fe fa4a 	bl	80008a4 <HAL_GetTick>
 8002410:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4959      	ldr	r1, [pc, #356]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002418:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <HAL_RCC_DeInit+0x244>)
 800241a:	4013      	ands	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fa40 	bl	80008a4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e09d      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002432:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800243e:	f7fe fa31 	bl	80008a4 <HAL_GetTick>
 8002442:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_RCC_DeInit+0x230>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fa27 	bl	80008a4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e084      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002464:	4b45      	ldr	r3, [pc, #276]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002470:	f7fe fa18 	bl	80008a4 <HAL_GetTick>
 8002474:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_RCC_DeInit+0x230>)
 800247c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002480:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fa0e 	bl	80008a4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e06b      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002496:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024a2:	f7fe f9ff 	bl	80008a4 <HAL_GetTick>
 80024a6:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80024a8:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe f9f5 	bl	80008a4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e052      	b.n	800256e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80024d4:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
 80024e6:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <HAL_RCC_DeInit+0x248>)
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_RCC_DeInit+0x24c>)
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_RCC_DeInit+0x250>)
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_DeInit+0x230>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_RCC_DeInit+0x250>)
 8002502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002506:	2200      	movs	r2, #0
 8002508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_RCC_DeInit+0x230>)
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <HAL_RCC_DeInit+0x250>)
 800250e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_RCC_DeInit+0x230>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002524:	2200      	movs	r2, #0
 8002526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_RCC_DeInit+0x230>)
 800252a:	f04f 32ff 	mov.w	r2, #4294967295
 800252e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002532:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_RCC_DeInit+0x230>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	2b07      	cmp	r3, #7
 800254a:	d90f      	bls.n	800256c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 030f 	bic.w	r3, r3, #15
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 8002556:	f043 0307 	orr.w	r3, r3, #7
 800255a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_DeInit+0x22c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	2b07      	cmp	r3, #7
 8002566:	d001      	beq.n	800256c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	52002000 	.word	0x52002000
 800257c:	58024400 	.word	0x58024400
 8002580:	24000000 	.word	0x24000000
 8002584:	03d09000 	.word	0x03d09000
 8002588:	24000004 	.word	0x24000004
 800258c:	24000008 	.word	0x24000008
 8002590:	fff6ed45 	.word	0xfff6ed45
 8002594:	02020200 	.word	0x02020200
 8002598:	01ff0000 	.word	0x01ff0000
 800259c:	01010280 	.word	0x01010280

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e3c4      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c0:	4ba2      	ldr	r3, [pc, #648]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ca:	4ba0      	ldr	r3, [pc, #640]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d007      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46>
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	2b18      	cmp	r3, #24
 80025da:	d110      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b99      	ldr	r3, [pc, #612]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x12c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e39e      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x76>
 8002608:	4b90      	ldr	r3, [pc, #576]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a8f      	ldr	r2, [pc, #572]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b8b      	ldr	r3, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a8a      	ldr	r2, [pc, #552]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a87      	ldr	r2, [pc, #540]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xbc>
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a81      	ldr	r2, [pc, #516]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7e      	ldr	r2, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 800265c:	4b7b      	ldr	r3, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7a      	ldr	r2, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a77      	ldr	r2, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe f912 	bl	80008a4 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe f90e 	bl	80008a4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e352      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe4>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe f8fe 	bl	80008a4 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe f8fa 	bl	80008a4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e33e      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x10c>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8092 	beq.w	8002800 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026dc:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026e6:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_RCC_OscConfig+0x162>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b18      	cmp	r3, #24
 80026f6:	d12d      	bne.n	8002754 <HAL_RCC_OscConfig+0x1b4>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d128      	bne.n	8002754 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x17a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e310      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	f7fe f8f1 	bl	8000900 <HAL_GetREVID>
 800271e:	4602      	mov	r2, r0
 8002720:	f241 0303 	movw	r3, #4099	; 0x1003
 8002724:	429a      	cmp	r2, r3
 8002726:	d80a      	bhi.n	800273e <HAL_RCC_OscConfig+0x19e>
 8002728:	4b48      	ldr	r3, [pc, #288]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	031b      	lsls	r3, r3, #12
 8002736:	4945      	ldr	r1, [pc, #276]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	e060      	b.n	8002800 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	493f      	ldr	r1, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002752:	e055      	b.n	8002800 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d038      	beq.n	80027ce <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0219 	bic.w	r2, r3, #25
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4938      	ldr	r1, [pc, #224]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe f899 	bl	80008a4 <HAL_GetTick>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe f895 	bl	80008a4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e2d9      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	f7fe f8b4 	bl	8000900 <HAL_GetREVID>
 8002798:	4602      	mov	r2, r0
 800279a:	f241 0303 	movw	r3, #4099	; 0x1003
 800279e:	429a      	cmp	r2, r3
 80027a0:	d80a      	bhi.n	80027b8 <HAL_RCC_OscConfig+0x218>
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	031b      	lsls	r3, r3, #12
 80027b0:	4926      	ldr	r1, [pc, #152]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
 80027b6:	e023      	b.n	8002800 <HAL_RCC_OscConfig+0x260>
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	4921      	ldr	r1, [pc, #132]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
 80027cc:	e018      	b.n	8002800 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe f863 	bl	80008a4 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe f85f 	bl	80008a4 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e2a3      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8091 	beq.w	8002930 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d007      	beq.n	8002834 <HAL_RCC_OscConfig+0x294>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b18      	cmp	r3, #24
 8002828:	d12f      	bne.n	800288a <HAL_RCC_OscConfig+0x2ea>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d12a      	bne.n	800288a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_RCC_OscConfig+0x2b0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d003      	beq.n	8002850 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e277      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
 800284c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002850:	f7fe f856 	bl	8000900 <HAL_GetREVID>
 8002854:	4602      	mov	r2, r0
 8002856:	f241 0303 	movw	r3, #4099	; 0x1003
 800285a:	429a      	cmp	r2, r3
 800285c:	d80a      	bhi.n	8002874 <HAL_RCC_OscConfig+0x2d4>
 800285e:	4ba2      	ldr	r3, [pc, #648]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	499e      	ldr	r1, [pc, #632]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002872:	e05d      	b.n	8002930 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002874:	4b9c      	ldr	r3, [pc, #624]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	4999      	ldr	r1, [pc, #612]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002884:	4313      	orrs	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002888:	e052      	b.n	8002930 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d035      	beq.n	80028fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002892:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe f801 	bl	80008a4 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028a6:	f7fd fffd 	bl	80008a4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e241      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b8:	4b8b      	ldr	r3, [pc, #556]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c4:	f7fe f81c 	bl	8000900 <HAL_GetREVID>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d80a      	bhi.n	80028e8 <HAL_RCC_OscConfig+0x348>
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	069b      	lsls	r3, r3, #26
 80028e0:	4981      	ldr	r1, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e023      	b.n	8002930 <HAL_RCC_OscConfig+0x390>
 80028e8:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	497c      	ldr	r1, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60cb      	str	r3, [r1, #12]
 80028fc:	e018      	b.n	8002930 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fd ffcb 	bl	80008a4 <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002912:	f7fd ffc7 	bl	80008a4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e20b      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002924:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d036      	beq.n	80029aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d019      	beq.n	8002978 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	4a67      	ldr	r2, [pc, #412]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fd ffa8 	bl	80008a4 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002958:	f7fd ffa4 	bl	80008a4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1e8      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x3b8>
 8002976:	e018      	b.n	80029aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002978:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 800297a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297c:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fd ff8e 	bl	80008a4 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7fd ff8a 	bl	80008a4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1ce      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299e:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d036      	beq.n	8002a24 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ca:	f7fd ff6b 	bl	80008a4 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029d2:	f7fd ff67 	bl	80008a4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1ab      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x432>
 80029f0:	e018      	b.n	8002a24 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029fe:	f7fd ff51 	bl	80008a4 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a06:	f7fd ff4d 	bl	80008a4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e191      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8086 	beq.w	8002b3e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_RCC_OscConfig+0x54c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2d      	ldr	r2, [pc, #180]	; (8002aec <HAL_RCC_OscConfig+0x54c>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a3e:	f7fd ff31 	bl	80008a4 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7fd ff2d 	bl	80008a4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e171      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x54c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4da>
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x536>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4fc>
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002a94:	f023 0304 	bic.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x536>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x51e>
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x536>
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x548>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fd fee1 	bl	80008a4 <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae4:	e00f      	b.n	8002b06 <HAL_RCC_OscConfig+0x566>
 8002ae6:	bf00      	nop
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fd fed8 	bl	80008a4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e11a      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b06:	4b8f      	ldr	r3, [pc, #572]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x550>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fd fec6 	bl	80008a4 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fd fec2 	bl	80008a4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e104      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b32:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80f9 	beq.w	8002d3a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b48:	4b7e      	ldr	r3, [pc, #504]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b50:	2b18      	cmp	r3, #24
 8002b52:	f000 80b4 	beq.w	8002cbe <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	f040 8095 	bne.w	8002c8a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b78      	ldr	r3, [pc, #480]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a77      	ldr	r2, [pc, #476]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fd fe9a 	bl	80008a4 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fd fe96 	bl	80008a4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0da      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b86:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b92:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b96:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCC_OscConfig+0x7a8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4967      	ldr	r1, [pc, #412]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	628b      	str	r3, [r1, #40]	; 0x28
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	025b      	lsls	r3, r3, #9
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bdc:	4959      	ldr	r1, [pc, #356]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002be2:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bee:	4b55      	ldr	r3, [pc, #340]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x7ac>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bfa:	00d2      	lsls	r2, r2, #3
 8002bfc:	4951      	ldr	r1, [pc, #324]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c02:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f023 020c 	bic.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f023 0202 	bic.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	4948      	ldr	r1, [pc, #288]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a3d      	ldr	r2, [pc, #244]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fd fe1f 	bl	80008a4 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fd fe1b 	bl	80008a4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e05f      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x6ca>
 8002c88:	e057      	b.n	8002d3a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fd fe05 	bl	80008a4 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fd fe01 	bl	80008a4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e045      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x6fe>
 8002cbc:	e03d      	b.n	8002d3a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_RCC_OscConfig+0x7a4>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d031      	beq.n	8002d36 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d12a      	bne.n	8002d36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d122      	bne.n	8002d36 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d11a      	bne.n	8002d36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	0a5b      	lsrs	r3, r3, #9
 8002d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d111      	bne.n	8002d36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d108      	bne.n	8002d36 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	0e1b      	lsrs	r3, r3, #24
 8002d28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	58024400 	.word	0x58024400
 8002d48:	fffffc0c 	.word	0xfffffc0c
 8002d4c:	ffff0007 	.word	0xffff0007

08002d50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e19c      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b8a      	ldr	r3, [pc, #552]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d910      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	4985      	ldr	r1, [pc, #532]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b83      	ldr	r3, [pc, #524]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e184      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	4975      	ldr	r1, [pc, #468]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d908      	bls.n	8002df0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d908      	bls.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	495e      	ldr	r1, [pc, #376]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e3a:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4953      	ldr	r1, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f023 020f 	bic.w	r2, r3, #15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4947      	ldr	r1, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d055      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4940      	ldr	r1, [pc, #256]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea0:	4b3c      	ldr	r3, [pc, #240]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d121      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0f6      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eb8:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d115      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0ea      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0de      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d6      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f023 0207 	bic.w	r2, r3, #7
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4925      	ldr	r1, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd fccf 	bl	80008a4 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fd fccb 	bl	80008a4 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0be      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d1eb      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d208      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d214      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	4906      	ldr	r1, [pc, #24]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e086      	b.n	800309e <HAL_RCC_ClockConfig+0x34e>
 8002f90:	52002000 	.word	0x52002000
 8002f94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d208      	bcs.n	8002fc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4939      	ldr	r1, [pc, #228]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d208      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	492e      	ldr	r1, [pc, #184]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d208      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4922      	ldr	r1, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4917      	ldr	r1, [pc, #92]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003050:	f000 f834 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003054:	4601      	mov	r1, r0
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a12      	ldr	r2, [pc, #72]	; (80030ac <HAL_RCC_ClockConfig+0x35c>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
 800306c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_RCC_ClockConfig+0x358>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <HAL_RCC_ClockConfig+0x35c>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x360>)
 8003086:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x364>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x368>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fbbc 	bl	8000810 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
 80030ac:	08007de4 	.word	0x08007de4
 80030b0:	24000004 	.word	0x24000004
 80030b4:	24000000 	.word	0x24000000
 80030b8:	24000008 	.word	0x24000008

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c2:	4baf      	ldr	r3, [pc, #700]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ca:	2b18      	cmp	r3, #24
 80030cc:	f200 814e 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x2b0>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	0800336d 	.word	0x0800336d
 80030e0:	0800336d 	.word	0x0800336d
 80030e4:	0800336d 	.word	0x0800336d
 80030e8:	0800336d 	.word	0x0800336d
 80030ec:	0800336d 	.word	0x0800336d
 80030f0:	0800336d 	.word	0x0800336d
 80030f4:	0800336d 	.word	0x0800336d
 80030f8:	08003163 	.word	0x08003163
 80030fc:	0800336d 	.word	0x0800336d
 8003100:	0800336d 	.word	0x0800336d
 8003104:	0800336d 	.word	0x0800336d
 8003108:	0800336d 	.word	0x0800336d
 800310c:	0800336d 	.word	0x0800336d
 8003110:	0800336d 	.word	0x0800336d
 8003114:	0800336d 	.word	0x0800336d
 8003118:	08003169 	.word	0x08003169
 800311c:	0800336d 	.word	0x0800336d
 8003120:	0800336d 	.word	0x0800336d
 8003124:	0800336d 	.word	0x0800336d
 8003128:	0800336d 	.word	0x0800336d
 800312c:	0800336d 	.word	0x0800336d
 8003130:	0800336d 	.word	0x0800336d
 8003134:	0800336d 	.word	0x0800336d
 8003138:	0800316f 	.word	0x0800316f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800313c:	4b90      	ldr	r3, [pc, #576]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003148:	4b8d      	ldr	r3, [pc, #564]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	4a8c      	ldr	r2, [pc, #560]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
 8003158:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800315a:	e10a      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800315c:	4b89      	ldr	r3, [pc, #548]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800315e:	61bb      	str	r3, [r7, #24]
    break;
 8003160:	e107      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003162:	4b89      	ldr	r3, [pc, #548]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003164:	61bb      	str	r3, [r7, #24]
    break;
 8003166:	e104      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003168:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800316a:	61bb      	str	r3, [r7, #24]
    break;
 800316c:	e101      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800316e:	4b84      	ldr	r3, [pc, #528]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003178:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003182:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800318e:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80da 	beq.w	8003366 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d05a      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x1b2>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d302      	bcc.n	80031c2 <HAL_RCC_GetSysClockFreq+0x106>
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d078      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80031c0:	e099      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031c2:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02d      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031ce:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	4a6a      	ldr	r2, [pc, #424]	; (8003384 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003208:	ed97 6a02 	vldr	s12, [r7, #8]
 800320c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800321c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003224:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003228:	e087      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003234:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003394 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	ee07 3a90 	vmov	s15, r3
 8003248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003250:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800326c:	e065      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2dc>
 800327c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003290:	ed97 6a02 	vldr	s12, [r7, #8]
 8003294:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032b0:	e043      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 800339c <HAL_RCC_GetSysClockFreq+0x2e0>
 80032c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c4:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2d4>
 80032dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f4:	e021      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003300:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003398 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003318:	ed97 6a02 	vldr	s12, [r7, #8]
 800331c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003390 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003338:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003344:	3301      	adds	r3, #1
 8003346:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003352:	edd7 6a07 	vldr	s13, [r7, #28]
 8003356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335e:	ee17 3a90 	vmov	r3, s15
 8003362:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003364:	e005      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
    break;
 800336a:	e002      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800336e:	61bb      	str	r3, [r7, #24]
    break;
 8003370:	bf00      	nop
  }

  return sysclockfreq;
 8003372:	69bb      	ldr	r3, [r7, #24]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3724      	adds	r7, #36	; 0x24
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	58024400 	.word	0x58024400
 8003384:	03d09000 	.word	0x03d09000
 8003388:	003d0900 	.word	0x003d0900
 800338c:	007a1200 	.word	0x007a1200
 8003390:	46000000 	.word	0x46000000
 8003394:	4c742400 	.word	0x4c742400
 8003398:	4a742400 	.word	0x4a742400
 800339c:	4af42400 	.word	0x4af42400

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033a6:	f7ff fe89 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 80033aa:	4601      	mov	r1, r0
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	fa21 f303 	lsr.w	r3, r1, r3
 80033c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	58024400 	.word	0x58024400
 80033f4:	08007de4 	.word	0x08007de4
 80033f8:	24000004 	.word	0x24000004
 80033fc:	24000000 	.word	0x24000000

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800340c:	2300      	movs	r3, #0
 800340e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03d      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003424:	d013      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342a:	d802      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003430:	e01f      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003436:	d013      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800343c:	d01c      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003440:	4baf      	ldr	r3, [pc, #700]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4aae      	ldr	r2, [pc, #696]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 feb1 	bl	80041bc <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff5a 	bl	8004320 <RCCEx_PLL3_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003480:	4b9f      	ldr	r3, [pc, #636]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	499c      	ldr	r1, [pc, #624]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800348e:	4313      	orrs	r3, r2
 8003490:	650b      	str	r3, [r1, #80]	; 0x50
 8003492:	e001      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d826      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003501 	.word	0x08003501
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a8c      	ldr	r2, [pc, #560]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d4:	e015      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fe6d 	bl	80041bc <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e6:	e00c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 ff16 	bl	8004320 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003508:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	497a      	ldr	r1, [pc, #488]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003516:	4313      	orrs	r3, r2
 8003518:	650b      	str	r3, [r1, #80]	; 0x50
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d03e      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d01c      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d804      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d00d      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003540:	e01e      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003542:	2bc0      	cmp	r3, #192	; 0xc0
 8003544:	d01f      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d01e      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800354c:	e018      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800355a:	e017      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fe2a 	bl	80041bc <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800356c:	e00e      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3324      	adds	r3, #36	; 0x24
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fed3 	bl	8004320 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800357e:	e005      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      break;
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800358a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4958      	ldr	r1, [pc, #352]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	650b      	str	r3, [r1, #80]	; 0x50
 80035a4:	e001      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d044      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c0:	d01f      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d805      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d0:	d00e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80035d2:	e01f      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80035d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035d8:	d01f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80035da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035de:	d01e      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80035e0:	e018      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a46      	ldr	r2, [pc, #280]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ee:	e017      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fde0 	bl	80041bc <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003600:	e00e      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3324      	adds	r3, #36	; 0x24
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe89 	bl	8004320 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003612:	e005      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	75fb      	strb	r3, [r7, #23]
      break;
 8003618:	e002      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800361e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003634:	4932      	ldr	r1, [pc, #200]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003636:	4313      	orrs	r3, r2
 8003638:	658b      	str	r3, [r1, #88]	; 0x58
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	2b00      	cmp	r3, #0
 800364a:	d044      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003656:	d01f      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800365c:	d805      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003662:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003666:	d00e      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003668:	e01f      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800366a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800366e:	d01f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003674:	d01e      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003676:	e018      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4a20      	ldr	r2, [pc, #128]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800367e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003684:	e017      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fd95 	bl	80041bc <RCCEx_PLL2_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003696:	e00e      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fe3e 	bl	8004320 <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ca:	490d      	ldr	r1, [pc, #52]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	658b      	str	r3, [r1, #88]	; 0x58
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d035      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d00c      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d802      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80036f2:	e017      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d00c      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d018      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80036fc:	e012      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4baf      	ldr	r3, [pc, #700]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4aae      	ldr	r2, [pc, #696]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003710:	e00e      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fd4f 	bl	80041bc <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003722:	e005      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800372e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003736:	4ba3      	ldr	r3, [pc, #652]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003742:	49a0      	ldr	r1, [pc, #640]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003748:	e001      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d042      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	d01f      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003768:	d805      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d00e      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003774:	e01f      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377a:	d01f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d01e      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003782:	e018      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003784:	4b8f      	ldr	r3, [pc, #572]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a8e      	ldr	r2, [pc, #568]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800378a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003790:	e017      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fd0f 	bl	80041bc <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037a2:	e00e      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fdb8 	bl	8004320 <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b4:	e005      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80037c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037c8:	4b7e      	ldr	r3, [pc, #504]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	497b      	ldr	r1, [pc, #492]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	650b      	str	r3, [r1, #80]	; 0x50
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d042      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f4:	d01b      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fa:	d805      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d022      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003806:	e01b      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800380c:	d01d      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800380e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003812:	d01c      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003814:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003818:	d01b      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800381a:	e011      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fcca 	bl	80041bc <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800382c:	e012      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3324      	adds	r3, #36	; 0x24
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fd73 	bl	8004320 <RCCEx_PLL3_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800383e:	e009      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
      break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003846:	bf00      	nop
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800385a:	4b5a      	ldr	r3, [pc, #360]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003866:	4957      	ldr	r1, [pc, #348]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	650b      	str	r3, [r1, #80]	; 0x50
 800386c:	e001      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003888:	d01b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800388a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388e:	d805      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800389a:	e01b      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a0:	d01d      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a6:	d01c      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80038a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ac:	d01b      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038ae:	e011      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fc80 	bl	80041bc <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038c0:	e012      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	; 0x24
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd29 	bl	8004320 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80038e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038ee:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038fc:	4931      	ldr	r1, [pc, #196]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	658b      	str	r3, [r1, #88]	; 0x58
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391c:	d005      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d009      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003936:	e00c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fc3c 	bl	80041bc <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
      break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003964:	4917      	ldr	r1, [pc, #92]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	650b      	str	r3, [r1, #80]	; 0x50
 800396a:	e001      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d035      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	2b03      	cmp	r3, #3
 8003982:	d81b      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039c9 	.word	0x080039c9
 8003990:	0800399d 	.word	0x0800399d
 8003994:	080039ab 	.word	0x080039ab
 8003998:	080039c9 	.word	0x080039c9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039a8:	e00f      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2102      	movs	r1, #2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc03 	bl	80041bc <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80039c2:	bf00      	nop
 80039c4:	58024400 	.word	0x58024400
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039d0:	4bba      	ldr	r3, [pc, #744]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	f023 0203 	bic.w	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	49b7      	ldr	r1, [pc, #732]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039e2:	e001      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8086 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f6:	4bb2      	ldr	r3, [pc, #712]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4ab1      	ldr	r2, [pc, #708]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a02:	f7fc ff4f 	bl	80008a4 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a08:	e009      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fc ff4b 	bl	80008a4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	; 0x64
 8003a16:	d902      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	75fb      	strb	r3, [r7, #23]
        break;
 8003a1c:	e005      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1e:	4ba8      	ldr	r3, [pc, #672]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ef      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d166      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a30:	4ba2      	ldr	r3, [pc, #648]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a3a:	4053      	eors	r3, r2
 8003a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a44:	4b9d      	ldr	r3, [pc, #628]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	4b9b      	ldr	r3, [pc, #620]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a9a      	ldr	r2, [pc, #616]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5a:	4b98      	ldr	r3, [pc, #608]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4a97      	ldr	r2, [pc, #604]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a66:	4a95      	ldr	r2, [pc, #596]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fc ff14 	bl	80008a4 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fc ff10 	bl	80008a4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d902      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	75fb      	strb	r3, [r7, #23]
            break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a98:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ed      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d126      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003aba:	4b80      	ldr	r3, [pc, #512]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac8:	0919      	lsrs	r1, r3, #4
 8003aca:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003acc:	400b      	ands	r3, r1
 8003ace:	497b      	ldr	r1, [pc, #492]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003ad6:	4b79      	ldr	r3, [pc, #484]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4a78      	ldr	r2, [pc, #480]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003adc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae0:	6113      	str	r3, [r2, #16]
 8003ae2:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	4972      	ldr	r1, [pc, #456]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	670b      	str	r3, [r1, #112]	; 0x70
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	75bb      	strb	r3, [r7, #22]
 8003afc:	e001      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d07d      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b12:	2b28      	cmp	r3, #40	; 0x28
 8003b14:	d866      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003beb 	.word	0x08003beb
 8003b20:	08003be5 	.word	0x08003be5
 8003b24:	08003be5 	.word	0x08003be5
 8003b28:	08003be5 	.word	0x08003be5
 8003b2c:	08003be5 	.word	0x08003be5
 8003b30:	08003be5 	.word	0x08003be5
 8003b34:	08003be5 	.word	0x08003be5
 8003b38:	08003be5 	.word	0x08003be5
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003be5 	.word	0x08003be5
 8003b44:	08003be5 	.word	0x08003be5
 8003b48:	08003be5 	.word	0x08003be5
 8003b4c:	08003be5 	.word	0x08003be5
 8003b50:	08003be5 	.word	0x08003be5
 8003b54:	08003be5 	.word	0x08003be5
 8003b58:	08003be5 	.word	0x08003be5
 8003b5c:	08003bd3 	.word	0x08003bd3
 8003b60:	08003be5 	.word	0x08003be5
 8003b64:	08003be5 	.word	0x08003be5
 8003b68:	08003be5 	.word	0x08003be5
 8003b6c:	08003be5 	.word	0x08003be5
 8003b70:	08003be5 	.word	0x08003be5
 8003b74:	08003be5 	.word	0x08003be5
 8003b78:	08003be5 	.word	0x08003be5
 8003b7c:	08003beb 	.word	0x08003beb
 8003b80:	08003be5 	.word	0x08003be5
 8003b84:	08003be5 	.word	0x08003be5
 8003b88:	08003be5 	.word	0x08003be5
 8003b8c:	08003be5 	.word	0x08003be5
 8003b90:	08003be5 	.word	0x08003be5
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003be5 	.word	0x08003be5
 8003b9c:	08003beb 	.word	0x08003beb
 8003ba0:	08003be5 	.word	0x08003be5
 8003ba4:	08003be5 	.word	0x08003be5
 8003ba8:	08003be5 	.word	0x08003be5
 8003bac:	08003be5 	.word	0x08003be5
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003be5 	.word	0x08003be5
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003beb 	.word	0x08003beb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 faf8 	bl	80041bc <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fba1 	bl	8004320 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfe:	492f      	ldr	r1, [pc, #188]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	654b      	str	r3, [r1, #84]	; 0x54
 8003c04:	e001      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
 8003c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d037      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d820      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c67 	.word	0x08003c67
 8003c28:	08003c3d 	.word	0x08003c3d
 8003c2c:	08003c4f 	.word	0x08003c4f
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c67 	.word	0x08003c67
 8003c38:	08003c67 	.word	0x08003c67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 faba 	bl	80041bc <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb63 	bl	8004320 <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f023 0207 	bic.w	r2, r3, #7
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4910      	ldr	r1, [pc, #64]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c80:	e001      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d040      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d827      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cf3 	.word	0x08003cf3
 8003ca8:	08003cc9 	.word	0x08003cc9
 8003cac:	08003cdb 	.word	0x08003cdb
 8003cb0:	08003cf3 	.word	0x08003cf3
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003cf3 	.word	0x08003cf3
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	58024800 	.word	0x58024800
 8003cc4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa74 	bl	80041bc <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cd8:	e00c      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3324      	adds	r3, #36	; 0x24
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fb1d 	bl	8004320 <RCCEx_PLL3_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cfa:	4bb2      	ldr	r3, [pc, #712]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	49ae      	ldr	r1, [pc, #696]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0e:	e001      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d044      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d01b      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d805      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d022      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003d3c:	e01b      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d01d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d48:	d01c      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d4e:	d01b      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003d50:	e011      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fa2f 	bl	80041bc <RCCEx_PLL2_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d62:	e012      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3324      	adds	r3, #36	; 0x24
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fad8 	bl	8004320 <RCCEx_PLL3_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d74:	e009      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7a:	e006      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d7c:	bf00      	nop
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d90:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9e:	4989      	ldr	r1, [pc, #548]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	654b      	str	r3, [r1, #84]	; 0x54
 8003da4:	e001      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d01b      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d805      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d022      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003dd2:	e01b      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d01d      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003dda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dde:	d01c      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de4:	d01b      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003de6:	e011      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f9e4 	bl	80041bc <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003df8:	e012      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3324      	adds	r3, #36	; 0x24
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fa8d 	bl	8004320 <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e0a:	e009      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e34:	4963      	ldr	r1, [pc, #396]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3a:	e001      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d044      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e56:	d01b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5c:	d805      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d022      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e68:	e01b      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6e:	d01d      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003e70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e74:	d01c      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003e76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e7a:	d01b      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f999 	bl	80041bc <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e012      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3324      	adds	r3, #36	; 0x24
 8003e94:	2102      	movs	r1, #2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa42 	bl	8004320 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e009      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea6:	e006      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eac:	bf00      	nop
 8003eae:	e002      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ebc:	4b41      	ldr	r3, [pc, #260]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	493e      	ldr	r1, [pc, #248]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed0:	e001      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d10a      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fa13 	bl	8004320 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f12:	492c      	ldr	r1, [pc, #176]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	d10a      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f9f2 	bl	8004320 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f54:	491b      	ldr	r1, [pc, #108]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d032      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d00d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f76:	d016      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f91a 	bl	80041bc <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f8c:	e00c      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3324      	adds	r3, #36	; 0x24
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f9c3 	bl	8004320 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fbc:	4901      	ldr	r1, [pc, #4]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fc2:	e003      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe2:	d00c      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003fe4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe8:	d015      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10f      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b71      	ldr	r3, [pc, #452]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a70      	ldr	r2, [pc, #448]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3324      	adds	r3, #36	; 0x24
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f98b 	bl	8004320 <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
      break;
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401e:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	4962      	ldr	r1, [pc, #392]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800402e:	4313      	orrs	r3, r2
 8004030:	654b      	str	r3, [r1, #84]	; 0x54
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d029      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d007      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004052:	e00f      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004054:	4b58      	ldr	r3, [pc, #352]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a57      	ldr	r2, [pc, #348]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800405a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004060:	e00b      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f8a7 	bl	80041bc <RCCEx_PLL2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004072:	e002      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	494a      	ldr	r1, [pc, #296]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f938 	bl	8004320 <RCCEx_PLL3_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d02f      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d00c      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d4:	d802      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80040da:	e00d      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d00f      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e6:	d00e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ea:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040f6:	e007      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411a:	4927      	ldr	r1, [pc, #156]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	654b      	str	r3, [r1, #84]	; 0x54
 8004120:	e001      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	491e      	ldr	r1, [pc, #120]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	4916      	ldr	r1, [pc, #88]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004178:	6113      	str	r3, [r2, #16]
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004184:	490c      	ldr	r1, [pc, #48]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	da08      	bge.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	4906      	ldr	r1, [pc, #24]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80041a4:	7dbb      	ldrb	r3, [r7, #22]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	58024400 	.word	0x58024400

080041bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d101      	bne.n	80041da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e099      	b.n	800430e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041da:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a4e      	ldr	r2, [pc, #312]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fc fb5d 	bl	80008a4 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041ec:	e008      	b.n	8004200 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041ee:	f7fc fb59 	bl	80008a4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e086      	b.n	800430e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	493f      	ldr	r1, [pc, #252]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	628b      	str	r3, [r1, #40]	; 0x28
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	3b01      	subs	r3, #1
 8004226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	3b01      	subs	r3, #1
 8004230:	025b      	lsls	r3, r3, #9
 8004232:	b29b      	uxth	r3, r3
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	3b01      	subs	r3, #1
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004250:	4931      	ldr	r1, [pc, #196]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004256:	4b30      	ldr	r3, [pc, #192]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	492d      	ldr	r1, [pc, #180]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004268:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f023 0220 	bic.w	r2, r3, #32
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	4928      	ldr	r1, [pc, #160]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800427a:	4b27      	ldr	r3, [pc, #156]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <RCCEx_PLL2_Config+0x160>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	69d2      	ldr	r2, [r2, #28]
 8004292:	00d2      	lsls	r2, r2, #3
 8004294:	4920      	ldr	r1, [pc, #128]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800429a:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f043 0310 	orr.w	r3, r3, #16
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042b8:	e00f      	b.n	80042da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d106      	bne.n	80042ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042cc:	e005      	b.n	80042da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 80042e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e6:	f7fc fadd 	bl	80008a4 <HAL_GetTick>
 80042ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042ec:	e008      	b.n	8004300 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ee:	f7fc fad9 	bl	80008a4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e006      	b.n	800430e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <RCCEx_PLL2_Config+0x15c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
 800431c:	ffff0007 	.word	0xffff0007

08004320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800432e:	4b53      	ldr	r3, [pc, #332]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b03      	cmp	r3, #3
 8004338:	d101      	bne.n	800433e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e099      	b.n	8004472 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800433e:	4b4f      	ldr	r3, [pc, #316]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4e      	ldr	r2, [pc, #312]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fc faab 	bl	80008a4 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004350:	e008      	b.n	8004364 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004352:	f7fc faa7 	bl	80008a4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e086      	b.n	8004472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	493f      	ldr	r1, [pc, #252]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	628b      	str	r3, [r1, #40]	; 0x28
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	3b01      	subs	r3, #1
 800438a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	3b01      	subs	r3, #1
 8004394:	025b      	lsls	r3, r3, #9
 8004396:	b29b      	uxth	r3, r3
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043b4:	4931      	ldr	r1, [pc, #196]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	492d      	ldr	r1, [pc, #180]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	4928      	ldr	r1, [pc, #160]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <RCCEx_PLL3_Config+0x160>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	69d2      	ldr	r2, [r2, #28]
 80043f6:	00d2      	lsls	r2, r2, #3
 80043f8:	4920      	ldr	r1, [pc, #128]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043fe:	4b1f      	ldr	r3, [pc, #124]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a1e      	ldr	r2, [pc, #120]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004410:	4b1a      	ldr	r3, [pc, #104]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800441c:	e00f      	b.n	800443e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d106      	bne.n	8004432 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 800442a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004430:	e005      	b.n	800443e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a0e      	ldr	r2, [pc, #56]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444a:	f7fc fa2b 	bl	80008a4 <HAL_GetTick>
 800444e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004450:	e008      	b.n	8004464 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004452:	f7fc fa27 	bl	80008a4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e006      	b.n	8004472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <RCCEx_PLL3_Config+0x15c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	ffff0007 	.word	0xffff0007

08004484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004484:	b084      	sub	sp, #16
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	f107 001c 	add.w	r0, r7, #28
 8004492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	2b01      	cmp	r3, #1
 800449a:	d120      	bne.n	80044de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <USB_CoreInit+0xc0>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d105      	bne.n	80044d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f001 fa66 	bl	80059a4 <USB_CoreReset>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
 80044dc:	e01a      	b.n	8004514 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fa5a 	bl	80059a4 <USB_CoreReset>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
 8004506:	e005      	b.n	8004514 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10b      	bne.n	8004532 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f043 0206 	orr.w	r2, r3, #6
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800453e:	b004      	add	sp, #16
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	ffbdffbf 	.word	0xffbdffbf

08004548 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d165      	bne.n	8004628 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a41      	ldr	r2, [pc, #260]	; (8004664 <USB_SetTurnaroundTime+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d906      	bls.n	8004572 <USB_SetTurnaroundTime+0x2a>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <USB_SetTurnaroundTime+0x120>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d802      	bhi.n	8004572 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800456c:	230f      	movs	r3, #15
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e062      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <USB_SetTurnaroundTime+0x120>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d906      	bls.n	8004588 <USB_SetTurnaroundTime+0x40>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a3b      	ldr	r2, [pc, #236]	; (800466c <USB_SetTurnaroundTime+0x124>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d802      	bhi.n	8004588 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004582:	230e      	movs	r3, #14
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e057      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a38      	ldr	r2, [pc, #224]	; (800466c <USB_SetTurnaroundTime+0x124>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d906      	bls.n	800459e <USB_SetTurnaroundTime+0x56>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a37      	ldr	r2, [pc, #220]	; (8004670 <USB_SetTurnaroundTime+0x128>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d802      	bhi.n	800459e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004598:	230d      	movs	r3, #13
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e04c      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a33      	ldr	r2, [pc, #204]	; (8004670 <USB_SetTurnaroundTime+0x128>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d906      	bls.n	80045b4 <USB_SetTurnaroundTime+0x6c>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a32      	ldr	r2, [pc, #200]	; (8004674 <USB_SetTurnaroundTime+0x12c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045ae:	230c      	movs	r3, #12
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e041      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <USB_SetTurnaroundTime+0x12c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d906      	bls.n	80045ca <USB_SetTurnaroundTime+0x82>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a2e      	ldr	r2, [pc, #184]	; (8004678 <USB_SetTurnaroundTime+0x130>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d802      	bhi.n	80045ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045c4:	230b      	movs	r3, #11
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e036      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <USB_SetTurnaroundTime+0x130>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d906      	bls.n	80045e0 <USB_SetTurnaroundTime+0x98>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <USB_SetTurnaroundTime+0x134>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045da:	230a      	movs	r3, #10
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e02b      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a26      	ldr	r2, [pc, #152]	; (800467c <USB_SetTurnaroundTime+0x134>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d906      	bls.n	80045f6 <USB_SetTurnaroundTime+0xae>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <USB_SetTurnaroundTime+0x138>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d802      	bhi.n	80045f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045f0:	2309      	movs	r3, #9
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e020      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <USB_SetTurnaroundTime+0x138>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d906      	bls.n	800460c <USB_SetTurnaroundTime+0xc4>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a20      	ldr	r2, [pc, #128]	; (8004684 <USB_SetTurnaroundTime+0x13c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d802      	bhi.n	800460c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004606:	2308      	movs	r3, #8
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e015      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <USB_SetTurnaroundTime+0x13c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d906      	bls.n	8004622 <USB_SetTurnaroundTime+0xda>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <USB_SetTurnaroundTime+0x140>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d802      	bhi.n	8004622 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800461c:	2307      	movs	r3, #7
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e00a      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004622:	2306      	movs	r3, #6
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e007      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800462e:	2309      	movs	r3, #9
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e001      	b.n	8004638 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004634:	2309      	movs	r3, #9
 8004636:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	029b      	lsls	r3, r3, #10
 800464c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	00d8acbf 	.word	0x00d8acbf
 8004668:	00e4e1bf 	.word	0x00e4e1bf
 800466c:	00f423ff 	.word	0x00f423ff
 8004670:	0106737f 	.word	0x0106737f
 8004674:	011a499f 	.word	0x011a499f
 8004678:	01312cff 	.word	0x01312cff
 800467c:	014ca43f 	.word	0x014ca43f
 8004680:	016e35ff 	.word	0x016e35ff
 8004684:	01a6ab1f 	.word	0x01a6ab1f
 8004688:	01e847ff 	.word	0x01e847ff

0800468c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0201 	bic.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	e00b      	b.n	8004714 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e001      	b.n	8004714 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e003      	b.n	800471c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004714:	2032      	movs	r0, #50	; 0x32
 8004716:	f7fc f8d1 	bl	80008bc <HAL_Delay>

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e009      	b.n	8004758 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3340      	adds	r3, #64	; 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0e      	cmp	r3, #14
 800475c:	d9f2      	bls.n	8004744 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11c      	bne.n	800479e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e005      	b.n	80047aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047bc:	4619      	mov	r1, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c4:	461a      	mov	r2, r3
 80047c6:	680b      	ldr	r3, [r1, #0]
 80047c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10c      	bne.n	80047ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f949 	bl	8004a70 <USB_SetDevSpeed>
 80047de:	e008      	b.n	80047f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047e0:	2101      	movs	r1, #1
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f944 	bl	8004a70 <USB_SetDevSpeed>
 80047e8:	e003      	b.n	80047f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ea:	2103      	movs	r1, #3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f93f 	bl	8004a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047f2:	2110      	movs	r1, #16
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8f3 	bl	80049e0 <USB_FlushTxFifo>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f911 	bl	8004a2c <USB_FlushRxFifo>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	461a      	mov	r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e043      	b.n	80048c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004854:	d118      	bne.n	8004888 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	461a      	mov	r2, r3
 800486a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e013      	b.n	800489a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e008      	b.n	800489a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	2300      	movs	r3, #0
 80048aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	461a      	mov	r2, r3
 80048ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3301      	adds	r3, #1
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3b7      	bcc.n	800483e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e043      	b.n	800495c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ea:	d118      	bne.n	800491e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e013      	b.n	8004930 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e008      	b.n	8004930 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2300      	movs	r3, #0
 800492e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004954:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3301      	adds	r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	d3b7      	bcc.n	80048d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004976:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004984:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <USB_DevInit+0x2b4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f043 0208 	orr.w	r2, r3, #8
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <USB_DevInit+0x2b8>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d4:	b004      	add	sp, #16
 80049d6:	4770      	bx	lr
 80049d8:	803c3800 	.word	0x803c3800
 80049dc:	40000004 	.word	0x40000004

080049e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <USB_FlushTxFifo+0x48>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d0f0      	beq.n	80049fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	00030d40 	.word	0x00030d40

08004a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <USB_FlushRxFifo+0x40>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e006      	b.n	8004a5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d0f0      	beq.n	8004a3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	00030d40 	.word	0x00030d40

08004a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
 8004ac6:	e00a      	b.n	8004ade <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d002      	beq.n	8004ad4 <USB_GetDevSpeed+0x32>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d102      	bne.n	8004ada <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	75fb      	strb	r3, [r7, #23]
 8004ad8:	e001      	b.n	8004ade <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ada:	230f      	movs	r3, #15
 8004adc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d139      	bne.n	8004b7c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d153      	bne.n	8004be8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	78db      	ldrb	r3, [r3, #3]
 8004b5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	4619      	mov	r1, r3
 8004b74:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <USB_ActivateEndpoint+0x10c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
 8004b7a:	e035      	b.n	8004be8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d119      	bne.n	8004be8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	4619      	mov	r1, r3
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <USB_ActivateEndpoint+0x10c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	10008000 	.word	0x10008000

08004bfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d135      	bne.n	8004c84 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c38:	4013      	ands	r3, r2
 8004c3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	0159      	lsls	r1, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <USB_DeactivateEndpoint+0x100>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
 8004c82:	e034      	b.n	8004cee <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0159      	lsls	r1, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <USB_DeactivateEndpoint+0x104>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	ec337800 	.word	0xec337800
 8004d00:	eff37800 	.word	0xeff37800

08004d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 8163 	bne.w	8004fec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d132      	bne.n	8004d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	0159      	lsls	r1, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	440b      	add	r3, r1
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4ba5      	ldr	r3, [pc, #660]	; (8004fe0 <USB_EPStartXfer+0x2dc>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	0159      	lsls	r1, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4b95      	ldr	r3, [pc, #596]	; (8004fe4 <USB_EPStartXfer+0x2e0>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
 8004d92:	e074      	b.n	8004e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	0159      	lsls	r1, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	440b      	add	r3, r1
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	4619      	mov	r1, r3
 8004db0:	4b8c      	ldr	r3, [pc, #560]	; (8004fe4 <USB_EPStartXfer+0x2e0>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	440b      	add	r3, r1
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4b83      	ldr	r3, [pc, #524]	; (8004fe0 <USB_EPStartXfer+0x2dc>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6959      	ldr	r1, [r3, #20]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	440b      	add	r3, r1
 8004df0:	1e59      	subs	r1, r3, #1
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dfa:	04d9      	lsls	r1, r3, #19
 8004dfc:	4b7a      	ldr	r3, [pc, #488]	; (8004fe8 <USB_EPStartXfer+0x2e4>)
 8004dfe:	400b      	ands	r3, r1
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	0148      	lsls	r0, r1, #5
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	4401      	add	r1, r0
 8004e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	0148      	lsls	r0, r1, #5
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	4401      	add	r1, r0
 8004e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e32:	4313      	orrs	r3, r2
 8004e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	78db      	ldrb	r3, [r3, #3]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d11f      	bne.n	8004e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d14b      	bne.n	8004f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	78db      	ldrb	r3, [r3, #3]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d128      	bne.n	8004efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d110      	bne.n	8004eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e00f      	b.n	8004efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e133      	b.n	8005184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d015      	beq.n	8004f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 811b 	beq.w	8005184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f6e:	e109      	b.n	8005184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e00f      	b.n	8004fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	68d9      	ldr	r1, [r3, #12]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	b298      	uxth	r0, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fa38 	bl	800544c <USB_WritePacket>
 8004fdc:	e0d2      	b.n	8005184 <USB_EPStartXfer+0x480>
 8004fde:	bf00      	nop
 8004fe0:	e007ffff 	.word	0xe007ffff
 8004fe4:	fff80000 	.word	0xfff80000
 8004fe8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	0159      	lsls	r1, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	440b      	add	r3, r1
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	4619      	mov	r1, r3
 8005008:	4b61      	ldr	r3, [pc, #388]	; (8005190 <USB_EPStartXfer+0x48c>)
 800500a:	4013      	ands	r3, r2
 800500c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	0159      	lsls	r1, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	440b      	add	r3, r1
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	4619      	mov	r1, r3
 800502a:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <USB_EPStartXfer+0x490>)
 800502c:	4013      	ands	r3, r2
 800502e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d123      	bne.n	8005080 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	0148      	lsls	r0, r1, #5
 8005052:	69f9      	ldr	r1, [r7, #28]
 8005054:	4401      	add	r1, r0
 8005056:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800507c:	6113      	str	r3, [r2, #16]
 800507e:	e033      	b.n	80050e8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4413      	add	r3, r2
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	8afb      	ldrh	r3, [r7, #22]
 80050a6:	04d9      	lsls	r1, r3, #19
 80050a8:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <USB_EPStartXfer+0x494>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	0148      	lsls	r0, r1, #5
 80050b0:	69f9      	ldr	r1, [r7, #28]
 80050b2:	4401      	add	r1, r0
 80050b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	8af9      	ldrh	r1, [r7, #22]
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	0148      	lsls	r0, r1, #5
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	4401      	add	r1, r0
 80050e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10d      	bne.n	800510a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68d9      	ldr	r1, [r3, #12]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	460a      	mov	r2, r1
 8005108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d128      	bne.n	8005164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d110      	bne.n	8005144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e00f      	b.n	8005164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	fff80000 	.word	0xfff80000
 8005194:	e007ffff 	.word	0xe007ffff
 8005198:	1ff80000 	.word	0x1ff80000

0800519c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	f040 80cd 	bne.w	8005358 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d132      	bne.n	800522c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	0159      	lsls	r1, r3, #5
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	440b      	add	r3, r1
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	4619      	mov	r1, r3
 80051e2:	4b98      	ldr	r3, [pc, #608]	; (8005444 <USB_EP0StartXfer+0x2a8>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	0159      	lsls	r1, r3, #5
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	440b      	add	r3, r1
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	4619      	mov	r1, r3
 8005224:	4b88      	ldr	r3, [pc, #544]	; (8005448 <USB_EP0StartXfer+0x2ac>)
 8005226:	4013      	ands	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
 800522a:	e04e      	b.n	80052ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	0159      	lsls	r1, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	440b      	add	r3, r1
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	4619      	mov	r1, r3
 8005248:	4b7f      	ldr	r3, [pc, #508]	; (8005448 <USB_EP0StartXfer+0x2ac>)
 800524a:	4013      	ands	r3, r2
 800524c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	0159      	lsls	r1, r3, #5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	440b      	add	r3, r1
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	4619      	mov	r1, r3
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <USB_EP0StartXfer+0x2a8>)
 800526c:	4013      	ands	r3, r2
 800526e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d903      	bls.n	8005284 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ba:	6939      	ldr	r1, [r7, #16]
 80052bc:	0148      	lsls	r0, r1, #5
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	4401      	add	r1, r0
 80052c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d11e      	bne.n	800530e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	461a      	mov	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e092      	b.n	8005434 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800532c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07e      	beq.n	8005434 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005352:	4313      	orrs	r3, r2
 8005354:	634b      	str	r3, [r1, #52]	; 0x34
 8005356:	e06d      	b.n	8005434 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	0159      	lsls	r1, r3, #5
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	440b      	add	r3, r1
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	4619      	mov	r1, r3
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <USB_EP0StartXfer+0x2ac>)
 8005376:	4013      	ands	r3, r2
 8005378:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	0159      	lsls	r1, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	440b      	add	r3, r1
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	4619      	mov	r1, r3
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <USB_EP0StartXfer+0x2a8>)
 8005398:	4013      	ands	r3, r2
 800539a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	0148      	lsls	r0, r1, #5
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	4401      	add	r1, r0
 80053ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10d      	bne.n	8005414 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68d9      	ldr	r1, [r3, #12]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	460a      	mov	r2, r1
 8005412:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	e007ffff 	.word	0xe007ffff
 8005448:	fff80000 	.word	0xfff80000

0800544c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	460b      	mov	r3, r1
 800545c:	71fb      	strb	r3, [r7, #7]
 800545e:	4613      	mov	r3, r2
 8005460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800546a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11a      	bne.n	80054a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005472:	88bb      	ldrh	r3, [r7, #4]
 8005474:	3303      	adds	r3, #3
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e00f      	b.n	80054a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	031a      	lsls	r2, r3, #12
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548c:	461a      	mov	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3304      	adds	r3, #4
 8005498:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	3301      	adds	r3, #1
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3eb      	bcc.n	8005480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3724      	adds	r7, #36	; 0x24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b089      	sub	sp, #36	; 0x24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	4613      	mov	r3, r2
 80054c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	3303      	adds	r3, #3
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e00b      	b.n	80054f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3304      	adds	r3, #4
 80054ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3ef      	bcc.n	80054da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80054fa:	69fb      	ldr	r3, [r7, #28]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3724      	adds	r7, #36	; 0x24
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12c      	bne.n	800557e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	db12      	blt.n	800555c <USB_EPSetStall+0x54>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e02b      	b.n	80055d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	db12      	blt.n	80055b6 <USB_EPSetStall+0xae>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d128      	bne.n	8005652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d003      	beq.n	8005630 <USB_EPClearStall+0x4c>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d138      	bne.n	80056a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e027      	b.n	80056a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b03      	cmp	r3, #3
 8005678:	d003      	beq.n	8005682 <USB_EPClearStall+0x9e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	78db      	ldrb	r3, [r3, #3]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d10f      	bne.n	80056a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f023 0302 	bic.w	r3, r3, #2
 800571a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800571c:	2003      	movs	r0, #3
 800571e:	f7fb f8cd 	bl	80008bc <HAL_Delay>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800574c:	2003      	movs	r0, #3
 800574e:	f7fb f8b5 	bl	80008bc <HAL_Delay>

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4013      	ands	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4013      	ands	r3, r2
 80057a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	0c1b      	lsrs	r3, r3, #16
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	4013      	ands	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	b29b      	uxth	r3, r3
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005818:	68bb      	ldr	r3, [r7, #8]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005826:	b480      	push	{r7}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	b2db      	uxtb	r3, r3
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4013      	ands	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005874:	68bb      	ldr	r3, [r7, #8]
}
 8005876:	4618      	mov	r0, r3
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	4619      	mov	r1, r3
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <USB_ActivateSetup+0x44>)
 80058be:	4013      	ands	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	fffff800 	.word	0xfffff800

080058e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	460b      	mov	r3, r1
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	333c      	adds	r3, #60	; 0x3c
 80058fe:	3304      	adds	r3, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <USB_EP0_OutStart+0xb8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d90a      	bls.n	8005922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591c:	d101      	bne.n	8005922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e037      	b.n	8005992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005950:	f043 0318 	orr.w	r3, r3, #24
 8005954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10f      	bne.n	8005990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800598e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	4f54300a 	.word	0x4f54300a

080059a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <USB_CoreReset+0x64>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e01b      	b.n	80059fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	daf2      	bge.n	80059b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_CoreReset+0x64>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d0f0      	beq.n	80059da <USB_CoreReset+0x36>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7c1b      	ldrb	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d115      	bne.n	8005a50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a28:	2202      	movs	r2, #2
 8005a2a:	2181      	movs	r1, #129	; 0x81
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 ff56 	bl	80078de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 ff4c 	bl	80078de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a4e:	e012      	b.n	8005a76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	2202      	movs	r2, #2
 8005a54:	2181      	movs	r1, #129	; 0x81
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 ff41 	bl	80078de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	2202      	movs	r2, #2
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 ff38 	bl	80078de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a76:	2308      	movs	r3, #8
 8005a78:	2203      	movs	r2, #3
 8005a7a:	2182      	movs	r1, #130	; 0x82
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 ff2e 	bl	80078de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a8c:	f002 f8a4 	bl	8007bd8 <malloc>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
 8005aa8:	e026      	b.n	8005af8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7c1b      	ldrb	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ade:	2101      	movs	r1, #1
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 ffed 	bl	8007ac0 <USBD_LL_PrepareReceive>
 8005ae6:	e007      	b.n	8005af8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	2101      	movs	r1, #1
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 ffe4 	bl	8007ac0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b12:	2181      	movs	r1, #129	; 0x81
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 ff08 	bl	800792a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b20:	2101      	movs	r1, #1
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 ff01 	bl	800792a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b30:	2182      	movs	r1, #130	; 0x82
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fef9 	bl	800792a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 f845 	bl	8007be8 <free>
    pdev->pClassData = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d039      	beq.n	8005c0e <USBD_CDC_Setup+0x9e>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d17c      	bne.n	8005c98 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d029      	beq.n	8005bfa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da11      	bge.n	8005bd4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005bbc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	88d2      	ldrh	r2, [r2, #6]
 8005bc2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bc4:	6939      	ldr	r1, [r7, #16]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fa3f 	bl	8007050 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005bd2:	e068      	b.n	8005ca6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	785a      	ldrb	r2, [r3, #1]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bea:	6939      	ldr	r1, [r7, #16]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	88db      	ldrh	r3, [r3, #6]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fa5a 	bl	80070ac <USBD_CtlPrepareRx>
      break;
 8005bf8:	e055      	b.n	8005ca6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	7850      	ldrb	r0, [r2, #1]
 8005c06:	2200      	movs	r2, #0
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	4798      	blx	r3
      break;
 8005c0c:	e04b      	b.n	8005ca6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b0a      	cmp	r3, #10
 8005c14:	d017      	beq.n	8005c46 <USBD_CDC_Setup+0xd6>
 8005c16:	2b0b      	cmp	r3, #11
 8005c18:	d029      	beq.n	8005c6e <USBD_CDC_Setup+0xfe>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d133      	bne.n	8005c86 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d107      	bne.n	8005c38 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c28:	f107 030c 	add.w	r3, r7, #12
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fa0d 	bl	8007050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c36:	e02e      	b.n	8005c96 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 f99d 	bl	8006f7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c40:	2302      	movs	r3, #2
 8005c42:	75fb      	strb	r3, [r7, #23]
          break;
 8005c44:	e027      	b.n	8005c96 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d107      	bne.n	8005c60 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c50:	f107 030f 	add.w	r3, r7, #15
 8005c54:	2201      	movs	r2, #1
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f9f9 	bl	8007050 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c5e:	e01a      	b.n	8005c96 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f989 	bl	8006f7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6c:	e013      	b.n	8005c96 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d00d      	beq.n	8005c94 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f001 f97d 	bl	8006f7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c80:	2302      	movs	r3, #2
 8005c82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c84:	e006      	b.n	8005c94 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 f976 	bl	8006f7a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	75fb      	strb	r3, [r7, #23]
          break;
 8005c92:	e000      	b.n	8005c96 <USBD_CDC_Setup+0x126>
          break;
 8005c94:	bf00      	nop
      }
      break;
 8005c96:	e006      	b.n	8005ca6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f96d 	bl	8006f7a <USBD_CtlError>
      ret = USBD_FAIL;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	bf00      	nop
  }

  return ret;
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cca:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03a      	beq.n	8005d4c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	331c      	adds	r3, #28
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d029      	beq.n	8005d40 <USBD_CDC_DataIn+0x90>
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	331c      	adds	r3, #28
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	78f9      	ldrb	r1, [r7, #3]
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	460b      	mov	r3, r1
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	1a5b      	subs	r3, r3, r1
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4403      	add	r3, r0
 8005d0c:	3344      	adds	r3, #68	; 0x44
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d14:	fb03 f301 	mul.w	r3, r3, r1
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d110      	bne.n	8005d40 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d32:	78f9      	ldrb	r1, [r7, #3]
 8005d34:	2300      	movs	r3, #0
 8005d36:	2200      	movs	r2, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fe9e 	bl	8007a7a <USBD_LL_Transmit>
 8005d3e:	e003      	b.n	8005d48 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d4c:	2302      	movs	r3, #2
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fec9 	bl	8007b06 <USBD_LL_GetRxDataSize>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00d      	beq.n	8005da2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4798      	blx	r3

    return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d015      	beq.n	8005df2 <USBD_CDC_EP0_RxReady+0x46>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dcc:	2bff      	cmp	r3, #255	; 0xff
 8005dce:	d010      	beq.n	8005df2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005dde:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005de6:	b292      	uxth	r2, r2
 8005de8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	22ff      	movs	r2, #255	; 0xff
 8005dee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2243      	movs	r2, #67	; 0x43
 8005e08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	24000098 	.word	0x24000098

08005e1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2243      	movs	r2, #67	; 0x43
 8005e28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e2a:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	24000054 	.word	0x24000054

08005e3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2243      	movs	r2, #67	; 0x43
 8005e48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e4a:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	240000dc 	.word	0x240000dc

08005e5c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	220a      	movs	r2, #10
 8005e68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	24000010 	.word	0x24000010

08005e7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e86:	2302      	movs	r3, #2
 8005e88:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01c      	beq.n	8005f5a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d115      	bne.n	8005f56 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2181      	movs	r1, #129	; 0x81
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fd94 	bl	8007a7a <USBD_LL_Transmit>

      return USBD_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e002      	b.n	8005f5c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d017      	beq.n	8005fae <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7c1b      	ldrb	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f90:	2101      	movs	r1, #1
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fd94 	bl	8007ac0 <USBD_LL_PrepareReceive>
 8005f98:	e007      	b.n	8005faa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fd8b 	bl	8007ac0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e01a      	b.n	8006006 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	79fa      	ldrb	r2, [r7, #7]
 8005ffc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 fc02 	bl	8007808 <USBD_LL_Init>

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
 800602e:	e001      	b.n	8006034 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006030:	2302      	movs	r3, #2
 8006032:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fc2c 	bl	80078a8 <USBD_LL_Start>

  return USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800607c:	2302      	movs	r3, #2
 800607e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	4611      	mov	r1, r2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	4611      	mov	r1, r2
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 ff0a 	bl	8006f00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2b01      	cmp	r3, #1
 800610e:	d00c      	beq.n	800612a <USBD_LL_SetupStage+0x56>
 8006110:	2b01      	cmp	r3, #1
 8006112:	d302      	bcc.n	800611a <USBD_LL_SetupStage+0x46>
 8006114:	2b02      	cmp	r3, #2
 8006116:	d010      	beq.n	800613a <USBD_LL_SetupStage+0x66>
 8006118:	e017      	b.n	800614a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa0a 	bl	800653c <USBD_StdDevReq>
      break;
 8006128:	e01a      	b.n	8006160 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa6c 	bl	8006610 <USBD_StdItfReq>
      break;
 8006138:	e012      	b.n	8006160 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 faaa 	bl	800669c <USBD_StdEPReq>
      break;
 8006148:	e00a      	b.n	8006160 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006150:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006154:	b2db      	uxtb	r3, r3
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fc05 	bl	8007968 <USBD_LL_StallEP>
      break;
 800615e:	bf00      	nop
  }

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	460b      	mov	r3, r1
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d14b      	bne.n	8006216 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006184:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800618c:	2b03      	cmp	r3, #3
 800618e:	d134      	bne.n	80061fa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	429a      	cmp	r2, r3
 800619a:	d919      	bls.n	80061d0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d203      	bcs.n	80061be <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	e002      	b.n	80061c4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 ff8d 	bl	80070e8 <USBD_CtlContinueRx>
 80061ce:	e038      	b.n	8006242 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d105      	bne.n	80061f2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 ff8a 	bl	800710c <USBD_CtlSendStatus>
 80061f8:	e023      	b.n	8006242 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006200:	2b05      	cmp	r3, #5
 8006202:	d11e      	bne.n	8006242 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800620c:	2100      	movs	r1, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f001 fbaa 	bl	8007968 <USBD_LL_StallEP>
 8006214:	e015      	b.n	8006242 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006228:	2b03      	cmp	r3, #3
 800622a:	d108      	bne.n	800623e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	7afa      	ldrb	r2, [r7, #11]
 8006236:	4611      	mov	r1, r2
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	4798      	blx	r3
 800623c:	e001      	b.n	8006242 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800623e:	2302      	movs	r3, #2
 8006240:	e000      	b.n	8006244 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	460b      	mov	r3, r1
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d17f      	bne.n	8006360 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3314      	adds	r3, #20
 8006264:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800626c:	2b02      	cmp	r3, #2
 800626e:	d15c      	bne.n	800632a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d915      	bls.n	80062a8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fef7 	bl	8007088 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800629a:	2300      	movs	r3, #0
 800629c:	2200      	movs	r2, #0
 800629e:	2100      	movs	r1, #0
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f001 fc0d 	bl	8007ac0 <USBD_LL_PrepareReceive>
 80062a6:	e04e      	b.n	8006346 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	6912      	ldr	r2, [r2, #16]
 80062b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b4:	fb02 f201 	mul.w	r2, r2, r1
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d11c      	bne.n	80062f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d316      	bcc.n	80062f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d20f      	bcs.n	80062f8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062d8:	2200      	movs	r2, #0
 80062da:	2100      	movs	r1, #0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fed3 	bl	8007088 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062ea:	2300      	movs	r3, #0
 80062ec:	2200      	movs	r2, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 fbe5 	bl	8007ac0 <USBD_LL_PrepareReceive>
 80062f6:	e026      	b.n	8006346 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800630a:	2b03      	cmp	r3, #3
 800630c:	d105      	bne.n	800631a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f001 fb23 	bl	8007968 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 ff05 	bl	8007132 <USBD_CtlReceiveStatus>
 8006328:	e00d      	b.n	8006346 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006330:	2b04      	cmp	r3, #4
 8006332:	d004      	beq.n	800633e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f001 fb11 	bl	8007968 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d11d      	bne.n	800638c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fe82 	bl	800605a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800635e:	e015      	b.n	800638c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00d      	beq.n	8006388 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006372:	2b03      	cmp	r3, #3
 8006374:	d108      	bne.n	8006388 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	7afa      	ldrb	r2, [r7, #11]
 8006380:	4611      	mov	r1, r2
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	4798      	blx	r3
 8006386:	e001      	b.n	800638c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006388:	2302      	movs	r3, #2
 800638a:	e000      	b.n	800638e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fa9a 	bl	80078de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2240      	movs	r2, #64	; 0x40
 80063b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063ba:	2340      	movs	r3, #64	; 0x40
 80063bc:	2200      	movs	r2, #0
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fa8c 	bl	80078de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6852      	ldr	r2, [r2, #4]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	4611      	mov	r1, r2
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
  }

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006470:	2b04      	cmp	r3, #4
 8006472:	d105      	bne.n	8006480 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	2b03      	cmp	r3, #3
 800649e:	d10b      	bne.n	80064b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6852      	ldr	r2, [r2, #4]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	4611      	mov	r1, r2
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3

  return USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006552:	2b20      	cmp	r3, #32
 8006554:	d004      	beq.n	8006560 <USBD_StdDevReq+0x24>
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d002      	beq.n	8006560 <USBD_StdDevReq+0x24>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d008      	beq.n	8006570 <USBD_StdDevReq+0x34>
 800655e:	e04c      	b.n	80065fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
      break;
 800656e:	e049      	b.n	8006604 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b09      	cmp	r3, #9
 8006576:	d83a      	bhi.n	80065ee <USBD_StdDevReq+0xb2>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <USBD_StdDevReq+0x44>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065d1 	.word	0x080065d1
 8006584:	080065e5 	.word	0x080065e5
 8006588:	080065ef 	.word	0x080065ef
 800658c:	080065db 	.word	0x080065db
 8006590:	080065ef 	.word	0x080065ef
 8006594:	080065b3 	.word	0x080065b3
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065ef 	.word	0x080065ef
 80065a0:	080065c7 	.word	0x080065c7
 80065a4:	080065bd 	.word	0x080065bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9d4 	bl	8006958 <USBD_GetDescriptor>
          break;
 80065b0:	e022      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fb37 	bl	8006c28 <USBD_SetAddress>
          break;
 80065ba:	e01d      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fb74 	bl	8006cac <USBD_SetConfig>
          break;
 80065c4:	e018      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fbfd 	bl	8006dc8 <USBD_GetConfig>
          break;
 80065ce:	e013      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fc2c 	bl	8006e30 <USBD_GetStatus>
          break;
 80065d8:	e00e      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc5a 	bl	8006e96 <USBD_SetFeature>
          break;
 80065e2:	e009      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fc69 	bl	8006ebe <USBD_ClrFeature>
          break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fcc2 	bl	8006f7a <USBD_CtlError>
          break;
 80065f6:	bf00      	nop
      }
      break;
 80065f8:	e004      	b.n	8006604 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fcbc 	bl	8006f7a <USBD_CtlError>
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006626:	2b20      	cmp	r3, #32
 8006628:	d003      	beq.n	8006632 <USBD_StdItfReq+0x22>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d001      	beq.n	8006632 <USBD_StdItfReq+0x22>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d12a      	bne.n	8006688 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006638:	3b01      	subs	r3, #1
 800663a:	2b02      	cmp	r3, #2
 800663c:	d81d      	bhi.n	800667a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	889b      	ldrh	r3, [r3, #4]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	d813      	bhi.n	8006670 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	88db      	ldrh	r3, [r3, #6]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d110      	bne.n	8006684 <USBD_StdItfReq+0x74>
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd4f 	bl	800710c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800666e:	e009      	b.n	8006684 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fc81 	bl	8006f7a <USBD_CtlError>
          break;
 8006678:	e004      	b.n	8006684 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fc7c 	bl	8006f7a <USBD_CtlError>
          break;
 8006682:	e000      	b.n	8006686 <USBD_StdItfReq+0x76>
          break;
 8006684:	bf00      	nop
      }
      break;
 8006686:	e004      	b.n	8006692 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fc75 	bl	8006f7a <USBD_CtlError>
      break;
 8006690:	bf00      	nop
  }

  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	889b      	ldrh	r3, [r3, #4]
 80066ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d004      	beq.n	80066c6 <USBD_StdEPReq+0x2a>
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	d002      	beq.n	80066c6 <USBD_StdEPReq+0x2a>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <USBD_StdEPReq+0x3a>
 80066c4:	e13d      	b.n	8006942 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
      break;
 80066d4:	e13a      	b.n	800694c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d10a      	bne.n	80066f8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	e12a      	b.n	800694e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d03e      	beq.n	800677e <USBD_StdEPReq+0xe2>
 8006700:	2b03      	cmp	r3, #3
 8006702:	d002      	beq.n	800670a <USBD_StdEPReq+0x6e>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d070      	beq.n	80067ea <USBD_StdEPReq+0x14e>
 8006708:	e115      	b.n	8006936 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	2b02      	cmp	r3, #2
 8006712:	d002      	beq.n	800671a <USBD_StdEPReq+0x7e>
 8006714:	2b03      	cmp	r3, #3
 8006716:	d015      	beq.n	8006744 <USBD_StdEPReq+0xa8>
 8006718:	e02b      	b.n	8006772 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <USBD_StdEPReq+0x9e>
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d009      	beq.n	800673a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f91c 	bl	8007968 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f918 	bl	8007968 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006738:	e020      	b.n	800677c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fc1c 	bl	8006f7a <USBD_CtlError>
              break;
 8006742:	e01b      	b.n	800677c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	885b      	ldrh	r3, [r3, #2]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10e      	bne.n	800676a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <USBD_StdEPReq+0xce>
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b80      	cmp	r3, #128	; 0x80
 8006756:	d008      	beq.n	800676a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	88db      	ldrh	r3, [r3, #6]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 f8ff 	bl	8007968 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fcce 	bl	800710c <USBD_CtlSendStatus>

              break;
 8006770:	e004      	b.n	800677c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc00 	bl	8006f7a <USBD_CtlError>
              break;
 800677a:	bf00      	nop
          }
          break;
 800677c:	e0e0      	b.n	8006940 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006784:	2b02      	cmp	r3, #2
 8006786:	d002      	beq.n	800678e <USBD_StdEPReq+0xf2>
 8006788:	2b03      	cmp	r3, #3
 800678a:	d015      	beq.n	80067b8 <USBD_StdEPReq+0x11c>
 800678c:	e026      	b.n	80067dc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00c      	beq.n	80067ae <USBD_StdEPReq+0x112>
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d009      	beq.n	80067ae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f8e2 	bl	8007968 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 f8de 	bl	8007968 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067ac:	e01c      	b.n	80067e8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fbe2 	bl	8006f7a <USBD_CtlError>
              break;
 80067b6:	e017      	b.n	80067e8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	885b      	ldrh	r3, [r3, #2]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d112      	bne.n	80067e6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 f8e9 	bl	80079a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc99 	bl	800710c <USBD_CtlSendStatus>
              }
              break;
 80067da:	e004      	b.n	80067e6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fbcb 	bl	8006f7a <USBD_CtlError>
              break;
 80067e4:	e000      	b.n	80067e8 <USBD_StdEPReq+0x14c>
              break;
 80067e6:	bf00      	nop
          }
          break;
 80067e8:	e0aa      	b.n	8006940 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d002      	beq.n	80067fa <USBD_StdEPReq+0x15e>
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d032      	beq.n	800685e <USBD_StdEPReq+0x1c2>
 80067f8:	e097      	b.n	800692a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <USBD_StdEPReq+0x174>
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d004      	beq.n	8006810 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fbb6 	bl	8006f7a <USBD_CtlError>
                break;
 800680e:	e091      	b.n	8006934 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da0b      	bge.n	8006830 <USBD_StdEPReq+0x194>
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	3310      	adds	r3, #16
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	e00b      	b.n	8006848 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	3304      	adds	r3, #4
 8006848:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2202      	movs	r2, #2
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fbfa 	bl	8007050 <USBD_CtlSendData>
              break;
 800685c:	e06a      	b.n	8006934 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800685e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	da11      	bge.n	800688a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	f003 020f 	and.w	r2, r3, #15
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3318      	adds	r3, #24
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d117      	bne.n	80068b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fb79 	bl	8006f7a <USBD_CtlError>
                  break;
 8006888:	e054      	b.n	8006934 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb66 	bl	8006f7a <USBD_CtlError>
                  break;
 80068ae:	e041      	b.n	8006934 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da0b      	bge.n	80068d0 <USBD_StdEPReq+0x234>
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	3310      	adds	r3, #16
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	e00b      	b.n	80068e8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4413      	add	r3, r2
 80068e6:	3304      	adds	r3, #4
 80068e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <USBD_StdEPReq+0x25a>
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d103      	bne.n	80068fe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e00e      	b.n	800691c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 f86e 	bl	80079e4 <USBD_LL_IsStallEP>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e002      	b.n	800691c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2202      	movs	r2, #2
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fb94 	bl	8007050 <USBD_CtlSendData>
              break;
 8006928:	e004      	b.n	8006934 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fb24 	bl	8006f7a <USBD_CtlError>
              break;
 8006932:	bf00      	nop
          }
          break;
 8006934:	e004      	b.n	8006940 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb1e 	bl	8006f7a <USBD_CtlError>
          break;
 800693e:	bf00      	nop
      }
      break;
 8006940:	e004      	b.n	800694c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fb18 	bl	8006f7a <USBD_CtlError>
      break;
 800694a:	bf00      	nop
  }

  return ret;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	2b06      	cmp	r3, #6
 800697a:	f200 8128 	bhi.w	8006bce <USBD_GetDescriptor+0x276>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <USBD_GetDescriptor+0x2c>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069a1 	.word	0x080069a1
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069f9 	.word	0x080069f9
 8006990:	08006bcf 	.word	0x08006bcf
 8006994:	08006bcf 	.word	0x08006bcf
 8006998:	08006b6f 	.word	0x08006b6f
 800699c:	08006b9b 	.word	0x08006b9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	f107 0108 	add.w	r1, r7, #8
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	60f8      	str	r0, [r7, #12]
      break;
 80069b6:	e112      	b.n	8006bde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7c1b      	ldrb	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10d      	bne.n	80069dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f107 0208 	add.w	r2, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	2202      	movs	r2, #2
 80069d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069da:	e100      	b.n	8006bde <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	f107 0208 	add.w	r2, r7, #8
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
 80069ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	2202      	movs	r2, #2
 80069f4:	701a      	strb	r2, [r3, #0]
      break;
 80069f6:	e0f2      	b.n	8006bde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	885b      	ldrh	r3, [r3, #2]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	f200 80ac 	bhi.w	8006b5c <USBD_GetDescriptor+0x204>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <USBD_GetDescriptor+0xb4>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a25 	.word	0x08006a25
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a8d 	.word	0x08006a8d
 8006a18:	08006ac1 	.word	0x08006ac1
 8006a1c:	08006af5 	.word	0x08006af5
 8006a20:	08006b29 	.word	0x08006b29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a46:	e091      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa95 	bl	8006f7a <USBD_CtlError>
            err++;
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	3301      	adds	r3, #1
 8006a54:	72fb      	strb	r3, [r7, #11]
          break;
 8006a56:	e089      	b.n	8006b6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	7c12      	ldrb	r2, [r2, #16]
 8006a70:	f107 0108 	add.w	r1, r7, #8
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a7a:	e077      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa7b 	bl	8006f7a <USBD_CtlError>
            err++;
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	3301      	adds	r3, #1
 8006a88:	72fb      	strb	r3, [r7, #11]
          break;
 8006a8a:	e06f      	b.n	8006b6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	7c12      	ldrb	r2, [r2, #16]
 8006aa4:	f107 0108 	add.w	r1, r7, #8
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aae:	e05d      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa61 	bl	8006f7a <USBD_CtlError>
            err++;
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	3301      	adds	r3, #1
 8006abc:	72fb      	strb	r3, [r7, #11]
          break;
 8006abe:	e055      	b.n	8006b6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7c12      	ldrb	r2, [r2, #16]
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ae2:	e043      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa47 	bl	8006f7a <USBD_CtlError>
            err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
          break;
 8006af2:	e03b      	b.n	8006b6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b16:	e029      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa2d 	bl	8006f7a <USBD_CtlError>
            err++;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	3301      	adds	r3, #1
 8006b24:	72fb      	strb	r3, [r7, #11]
          break;
 8006b26:	e021      	b.n	8006b6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	7c12      	ldrb	r2, [r2, #16]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b4a:	e00f      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa13 	bl	8006f7a <USBD_CtlError>
            err++;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	3301      	adds	r3, #1
 8006b58:	72fb      	strb	r3, [r7, #11]
          break;
 8006b5a:	e007      	b.n	8006b6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa0b 	bl	8006f7a <USBD_CtlError>
          err++;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	3301      	adds	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006b6a:	e038      	b.n	8006bde <USBD_GetDescriptor+0x286>
 8006b6c:	e037      	b.n	8006bde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7c1b      	ldrb	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	f107 0208 	add.w	r2, r7, #8
 8006b82:	4610      	mov	r0, r2
 8006b84:	4798      	blx	r3
 8006b86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b88:	e029      	b.n	8006bde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f9f4 	bl	8006f7a <USBD_CtlError>
        err++;
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	3301      	adds	r3, #1
 8006b96:	72fb      	strb	r3, [r7, #11]
      break;
 8006b98:	e021      	b.n	8006bde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7c1b      	ldrb	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10d      	bne.n	8006bbe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f107 0208 	add.w	r2, r7, #8
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4798      	blx	r3
 8006bb2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	2207      	movs	r2, #7
 8006bba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bbc:	e00f      	b.n	8006bde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9da 	bl	8006f7a <USBD_CtlError>
        err++;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	72fb      	strb	r3, [r7, #11]
      break;
 8006bcc:	e007      	b.n	8006bde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f9d2 	bl	8006f7a <USBD_CtlError>
      err++;
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	72fb      	strb	r3, [r7, #11]
      break;
 8006bdc:	bf00      	nop
  }

  if (err != 0U)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11c      	bne.n	8006c1e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006be4:	893b      	ldrh	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <USBD_GetDescriptor+0x2b6>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	88db      	ldrh	r3, [r3, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88da      	ldrh	r2, [r3, #6]
 8006bf6:	893b      	ldrh	r3, [r7, #8]
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	bf28      	it	cs
 8006bfc:	4613      	movcs	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c02:	893b      	ldrh	r3, [r7, #8]
 8006c04:	461a      	mov	r2, r3
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa21 	bl	8007050 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa78 	bl	800710c <USBD_CtlSendStatus>
 8006c1c:	e000      	b.n	8006c20 <USBD_GetDescriptor+0x2c8>
    return;
 8006c1e:	bf00      	nop
    }
  }
}
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop

08006c28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d130      	bne.n	8006c9c <USBD_SetAddress+0x74>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d12c      	bne.n	8006c9c <USBD_SetAddress+0x74>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	2b7f      	cmp	r3, #127	; 0x7f
 8006c48:	d828      	bhi.n	8006c9c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d104      	bne.n	8006c6a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f989 	bl	8006f7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c68:	e01c      	b.n	8006ca4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7bfa      	ldrb	r2, [r7, #15]
 8006c6e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fee0 	bl	8007a3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa45 	bl	800710c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c90:	e008      	b.n	8006ca4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9a:	e003      	b.n	8006ca4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f96b 	bl	8006f7a <USBD_CtlError>
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006cbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cc0:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d904      	bls.n	8006cd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f955 	bl	8006f7a <USBD_CtlError>
 8006cd0:	e075      	b.n	8006dbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d002      	beq.n	8006ce2 <USBD_SetConfig+0x36>
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d023      	beq.n	8006d28 <USBD_SetConfig+0x7c>
 8006ce0:	e062      	b.n	8006da8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ce2:	4b38      	ldr	r3, [pc, #224]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01a      	beq.n	8006d20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006cea:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cfc:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff f9b4 	bl	8006070 <USBD_SetClassConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d104      	bne.n	8006d18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f932 	bl	8006f7a <USBD_CtlError>
            return;
 8006d16:	e052      	b.n	8006dbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9f7 	bl	800710c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d1e:	e04e      	b.n	8006dbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9f3 	bl	800710c <USBD_CtlSendStatus>
        break;
 8006d26:	e04a      	b.n	8006dbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006d28:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d112      	bne.n	8006d56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006d38:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006d42:	4b20      	ldr	r3, [pc, #128]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f9b0 	bl	80060ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9dc 	bl	800710c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d54:	e033      	b.n	8006dbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006d56:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d01d      	beq.n	8006da0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff f99e 	bl	80060ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff f974 	bl	8006070 <USBD_SetClassConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d104      	bne.n	8006d98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8f2 	bl	8006f7a <USBD_CtlError>
            return;
 8006d96:	e012      	b.n	8006dbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f9b7 	bl	800710c <USBD_CtlSendStatus>
        break;
 8006d9e:	e00e      	b.n	8006dbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f9b3 	bl	800710c <USBD_CtlSendStatus>
        break;
 8006da6:	e00a      	b.n	8006dbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f8e5 	bl	8006f7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <USBD_SetConfig+0x118>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f979 	bl	80060ae <USBD_ClrClassConfig>
        break;
 8006dbc:	bf00      	nop
    }
  }
}
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	24000204 	.word	0x24000204

08006dc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d004      	beq.n	8006de4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f8cc 	bl	8006f7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006de2:	e021      	b.n	8006e28 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	db17      	blt.n	8006e1e <USBD_GetConfig+0x56>
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	dd02      	ble.n	8006df8 <USBD_GetConfig+0x30>
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d00b      	beq.n	8006e0e <USBD_GetConfig+0x46>
 8006df6:	e012      	b.n	8006e1e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3308      	adds	r3, #8
 8006e02:	2201      	movs	r2, #1
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f922 	bl	8007050 <USBD_CtlSendData>
        break;
 8006e0c:	e00c      	b.n	8006e28 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	2201      	movs	r2, #1
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f91a 	bl	8007050 <USBD_CtlSendData>
        break;
 8006e1c:	e004      	b.n	8006e28 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8aa 	bl	8006f7a <USBD_CtlError>
        break;
 8006e26:	bf00      	nop
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	3b01      	subs	r3, #1
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d81e      	bhi.n	8006e84 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	88db      	ldrh	r3, [r3, #6]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d004      	beq.n	8006e58 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f892 	bl	8006f7a <USBD_CtlError>
        break;
 8006e56:	e01a      	b.n	8006e8e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f043 0202 	orr.w	r2, r3, #2
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	330c      	adds	r3, #12
 8006e78:	2202      	movs	r2, #2
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f8e7 	bl	8007050 <USBD_CtlSendData>
      break;
 8006e82:	e004      	b.n	8006e8e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f877 	bl	8006f7a <USBD_CtlError>
      break;
 8006e8c:	bf00      	nop
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	885b      	ldrh	r3, [r3, #2]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f92b 	bl	800710c <USBD_CtlSendStatus>
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d80b      	bhi.n	8006eec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	885b      	ldrh	r3, [r3, #2]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d10c      	bne.n	8006ef6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f911 	bl	800710c <USBD_CtlSendStatus>
      }
      break;
 8006eea:	e004      	b.n	8006ef6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f843 	bl	8006f7a <USBD_CtlError>
      break;
 8006ef4:	e000      	b.n	8006ef8 <USBD_ClrFeature+0x3a>
      break;
 8006ef6:	bf00      	nop
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	785a      	ldrb	r2, [r3, #1]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	3303      	adds	r3, #3
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	3305      	adds	r3, #5
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	3306      	adds	r3, #6
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	3307      	adds	r3, #7
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	80da      	strh	r2, [r3, #6]

}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f84:	2180      	movs	r1, #128	; 0x80
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fcee 	bl	8007968 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fcea 	bl	8007968 <USBD_LL_StallEP>
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d032      	beq.n	8007018 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f834 	bl	8007020 <USBD_GetLen>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	3301      	adds	r3, #1
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	75fa      	strb	r2, [r7, #23]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	75fa      	strb	r2, [r7, #23]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006fe8:	e012      	b.n	8007010 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	60fa      	str	r2, [r7, #12]
 8006ff0:	7dfa      	ldrb	r2, [r7, #23]
 8006ff2:	1c51      	adds	r1, r2, #1
 8006ff4:	75f9      	strb	r1, [r7, #23]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	75fa      	strb	r2, [r7, #23]
 8007006:	461a      	mov	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4413      	add	r3, r2
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e8      	bne.n	8006fea <USBD_GetString+0x4e>
    }
  }
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800702c:	e005      	b.n	800703a <USBD_GetLen+0x1a>
  {
    len++;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	3301      	adds	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3301      	adds	r3, #1
 8007038:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f5      	bne.n	800702e <USBD_GetLen+0xe>
  }

  return len;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4613      	mov	r3, r2
 800705c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2202      	movs	r2, #2
 8007062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fcfe 	bl	8007a7a <USBD_LL_Transmit>

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	2100      	movs	r1, #0
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fcec 	bl	8007a7a <USBD_LL_Transmit>

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2203      	movs	r2, #3
 80070be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	2100      	movs	r1, #0
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fcf1 	bl	8007ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	2100      	movs	r1, #0
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fcdf 	bl	8007ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2204      	movs	r2, #4
 8007118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fca9 	bl	8007a7a <USBD_LL_Transmit>

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2205      	movs	r2, #5
 800713e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fcb9 	bl	8007ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800715c:	2200      	movs	r2, #0
 800715e:	4913      	ldr	r1, [pc, #76]	; (80071ac <MX_USB_DEVICE_Init+0x54>)
 8007160:	4813      	ldr	r0, [pc, #76]	; (80071b0 <MX_USB_DEVICE_Init+0x58>)
 8007162:	f7fe ff29 	bl	8005fb8 <USBD_Init>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800716c:	f7f9 fa02 	bl	8000574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007170:	4910      	ldr	r1, [pc, #64]	; (80071b4 <MX_USB_DEVICE_Init+0x5c>)
 8007172:	480f      	ldr	r0, [pc, #60]	; (80071b0 <MX_USB_DEVICE_Init+0x58>)
 8007174:	f7fe ff4b 	bl	800600e <USBD_RegisterClass>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800717e:	f7f9 f9f9 	bl	8000574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007182:	490d      	ldr	r1, [pc, #52]	; (80071b8 <MX_USB_DEVICE_Init+0x60>)
 8007184:	480a      	ldr	r0, [pc, #40]	; (80071b0 <MX_USB_DEVICE_Init+0x58>)
 8007186:	f7fe fe79 	bl	8005e7c <USBD_CDC_RegisterInterface>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007190:	f7f9 f9f0 	bl	8000574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007194:	4806      	ldr	r0, [pc, #24]	; (80071b0 <MX_USB_DEVICE_Init+0x58>)
 8007196:	f7fe ff54 	bl	8006042 <USBD_Start>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071a0:	f7f9 f9e8 	bl	8000574 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80071a4:	f7fb f8c2 	bl	800232c <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071a8:	bf00      	nop
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	24000130 	.word	0x24000130
 80071b0:	24000214 	.word	0x24000214
 80071b4:	2400001c 	.word	0x2400001c
 80071b8:	24000120 	.word	0x24000120

080071bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071c0:	2200      	movs	r2, #0
 80071c2:	4905      	ldr	r1, [pc, #20]	; (80071d8 <CDC_Init_FS+0x1c>)
 80071c4:	4805      	ldr	r0, [pc, #20]	; (80071dc <CDC_Init_FS+0x20>)
 80071c6:	f7fe fe70 	bl	8005eaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071ca:	4905      	ldr	r1, [pc, #20]	; (80071e0 <CDC_Init_FS+0x24>)
 80071cc:	4803      	ldr	r0, [pc, #12]	; (80071dc <CDC_Init_FS+0x20>)
 80071ce:	f7fe fe86 	bl	8005ede <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	24000cd8 	.word	0x24000cd8
 80071dc:	24000214 	.word	0x24000214
 80071e0:	240004d8 	.word	0x240004d8

080071e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	4613      	mov	r3, r2
 8007202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b23      	cmp	r3, #35	; 0x23
 8007208:	d84a      	bhi.n	80072a0 <CDC_Control_FS+0xac>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <CDC_Control_FS+0x1c>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072a1 	.word	0x080072a1
 8007218:	080072a1 	.word	0x080072a1
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080072a1 	.word	0x080072a1
 8007224:	080072a1 	.word	0x080072a1
 8007228:	080072a1 	.word	0x080072a1
 800722c:	080072a1 	.word	0x080072a1
 8007230:	080072a1 	.word	0x080072a1
 8007234:	080072a1 	.word	0x080072a1
 8007238:	080072a1 	.word	0x080072a1
 800723c:	080072a1 	.word	0x080072a1
 8007240:	080072a1 	.word	0x080072a1
 8007244:	080072a1 	.word	0x080072a1
 8007248:	080072a1 	.word	0x080072a1
 800724c:	080072a1 	.word	0x080072a1
 8007250:	080072a1 	.word	0x080072a1
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a1 	.word	0x080072a1
 800725c:	080072a1 	.word	0x080072a1
 8007260:	080072a1 	.word	0x080072a1
 8007264:	080072a1 	.word	0x080072a1
 8007268:	080072a1 	.word	0x080072a1
 800726c:	080072a1 	.word	0x080072a1
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072a1 	.word	0x080072a1
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a1 	.word	0x080072a1
 8007284:	080072a1 	.word	0x080072a1
 8007288:	080072a1 	.word	0x080072a1
 800728c:	080072a1 	.word	0x080072a1
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072a1 	.word	0x080072a1
 8007298:	080072a1 	.word	0x080072a1
 800729c:	080072a1 	.word	0x080072a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072a0:	bf00      	nop
  }

  return (USBD_OK);
 80072a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	switch (Buf[0])
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b68      	cmp	r3, #104	; 0x68
 80072c0:	d009      	beq.n	80072d6 <CDC_Receive_FS+0x26>
 80072c2:	2b79      	cmp	r3, #121	; 0x79
 80072c4:	d002      	beq.n	80072cc <CDC_Receive_FS+0x1c>
 80072c6:	2b62      	cmp	r3, #98	; 0x62
 80072c8:	d00a      	beq.n	80072e0 <CDC_Receive_FS+0x30>
		    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
//		    	HAL_Delay(1000);
		    	JumpToBootloader();
		        break;
		    default:
		    	break;
 80072ca:	e014      	b.n	80072f6 <CDC_Receive_FS+0x46>
		    case 'y': HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	4810      	ldr	r0, [pc, #64]	; (8007310 <CDC_Receive_FS+0x60>)
 80072d0:	f7f9 fdfb 	bl	8000eca <HAL_GPIO_TogglePin>
		        break;
 80072d4:	e00f      	b.n	80072f6 <CDC_Receive_FS+0x46>
		    case 'h': HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	480d      	ldr	r0, [pc, #52]	; (8007310 <CDC_Receive_FS+0x60>)
 80072da:	f7f9 fdf6 	bl	8000eca <HAL_GPIO_TogglePin>
		    	break;
 80072de:	e00a      	b.n	80072f6 <CDC_Receive_FS+0x46>
		    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80072e0:	2180      	movs	r1, #128	; 0x80
 80072e2:	480b      	ldr	r0, [pc, #44]	; (8007310 <CDC_Receive_FS+0x60>)
 80072e4:	f7f9 fdf1 	bl	8000eca <HAL_GPIO_TogglePin>
		    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80072e8:	2180      	movs	r1, #128	; 0x80
 80072ea:	4809      	ldr	r0, [pc, #36]	; (8007310 <CDC_Receive_FS+0x60>)
 80072ec:	f7f9 fded 	bl	8000eca <HAL_GPIO_TogglePin>
		    	JumpToBootloader();
 80072f0:	f7f8 fff2 	bl	80002d8 <JumpToBootloader>
		        break;
 80072f4:	bf00      	nop
		}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4806      	ldr	r0, [pc, #24]	; (8007314 <CDC_Receive_FS+0x64>)
 80072fa:	f7fe fdf0 	bl	8005ede <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072fe:	4805      	ldr	r0, [pc, #20]	; (8007314 <CDC_Receive_FS+0x64>)
 8007300:	f7fe fe30 	bl	8005f64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	58020400 	.word	0x58020400
 8007314:	24000214 	.word	0x24000214

08007318 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007328:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <CDC_Transmit_FS+0x48>)
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800733a:	2301      	movs	r3, #1
 800733c:	e00b      	b.n	8007356 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800733e:	887b      	ldrh	r3, [r7, #2]
 8007340:	461a      	mov	r2, r3
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4806      	ldr	r0, [pc, #24]	; (8007360 <CDC_Transmit_FS+0x48>)
 8007346:	f7fe fdb0 	bl	8005eaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <CDC_Transmit_FS+0x48>)
 800734c:	f7fe fddb 	bl	8005f06 <USBD_CDC_TransmitPacket>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	24000214 	.word	0x24000214

08007364 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2212      	movs	r2, #18
 8007374:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007376:	4b03      	ldr	r3, [pc, #12]	; (8007384 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	2400014c 	.word	0x2400014c

08007388 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2204      	movs	r2, #4
 8007398:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800739a:	4b03      	ldr	r3, [pc, #12]	; (80073a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	24000160 	.word	0x24000160

080073ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4907      	ldr	r1, [pc, #28]	; (80073e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073c2:	4808      	ldr	r0, [pc, #32]	; (80073e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073c4:	f7ff fdea 	bl	8006f9c <USBD_GetString>
 80073c8:	e004      	b.n	80073d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80073ce:	4805      	ldr	r0, [pc, #20]	; (80073e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80073d0:	f7ff fde4 	bl	8006f9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	240014d8 	.word	0x240014d8
 80073e4:	08007d9c 	.word	0x08007d9c

080073e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	4904      	ldr	r1, [pc, #16]	; (8007408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073f8:	4804      	ldr	r0, [pc, #16]	; (800740c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073fa:	f7ff fdcf 	bl	8006f9c <USBD_GetString>
  return USBD_StrDesc;
 80073fe:	4b02      	ldr	r3, [pc, #8]	; (8007408 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	240014d8 	.word	0x240014d8
 800740c:	08007db4 	.word	0x08007db4

08007410 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	221a      	movs	r2, #26
 8007420:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007422:	f000 f843 	bl	80074ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007426:	4b02      	ldr	r3, [pc, #8]	; (8007430 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	24000164 	.word	0x24000164

08007434 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d105      	bne.n	8007452 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	4907      	ldr	r1, [pc, #28]	; (8007468 <USBD_FS_ConfigStrDescriptor+0x34>)
 800744a:	4808      	ldr	r0, [pc, #32]	; (800746c <USBD_FS_ConfigStrDescriptor+0x38>)
 800744c:	f7ff fda6 	bl	8006f9c <USBD_GetString>
 8007450:	e004      	b.n	800745c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007456:	4805      	ldr	r0, [pc, #20]	; (800746c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007458:	f7ff fda0 	bl	8006f9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800745c:	4b02      	ldr	r3, [pc, #8]	; (8007468 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	240014d8 	.word	0x240014d8
 800746c:	08007dc8 	.word	0x08007dc8

08007470 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4907      	ldr	r1, [pc, #28]	; (80074a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007486:	4808      	ldr	r0, [pc, #32]	; (80074a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007488:	f7ff fd88 	bl	8006f9c <USBD_GetString>
 800748c:	e004      	b.n	8007498 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	4904      	ldr	r1, [pc, #16]	; (80074a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007494:	f7ff fd82 	bl	8006f9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	240014d8 	.word	0x240014d8
 80074a8:	08007dd4 	.word	0x08007dd4

080074ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <Get_SerialNum+0x44>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074b8:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <Get_SerialNum+0x48>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <Get_SerialNum+0x4c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d009      	beq.n	80074e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074d2:	2208      	movs	r2, #8
 80074d4:	4909      	ldr	r1, [pc, #36]	; (80074fc <Get_SerialNum+0x50>)
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f814 	bl	8007504 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074dc:	2204      	movs	r2, #4
 80074de:	4908      	ldr	r1, [pc, #32]	; (8007500 <Get_SerialNum+0x54>)
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 f80f 	bl	8007504 <IntToUnicode>
  }
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	1ff1e800 	.word	0x1ff1e800
 80074f4:	1ff1e804 	.word	0x1ff1e804
 80074f8:	1ff1e808 	.word	0x1ff1e808
 80074fc:	24000166 	.word	0x24000166
 8007500:	24000176 	.word	0x24000176

08007504 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
 800751a:	e027      	b.n	800756c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0f1b      	lsrs	r3, r3, #28
 8007520:	2b09      	cmp	r3, #9
 8007522:	d80b      	bhi.n	800753c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0f1b      	lsrs	r3, r3, #28
 8007528:	b2da      	uxtb	r2, r3
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4619      	mov	r1, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	440b      	add	r3, r1
 8007534:	3230      	adds	r2, #48	; 0x30
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	e00a      	b.n	8007552 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	0f1b      	lsrs	r3, r3, #28
 8007540:	b2da      	uxtb	r2, r3
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4619      	mov	r1, r3
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	440b      	add	r3, r1
 800754c:	3237      	adds	r2, #55	; 0x37
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	3301      	adds	r3, #1
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	3301      	adds	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
 800756c:	7dfa      	ldrb	r2, [r7, #23]
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	429a      	cmp	r2, r3
 8007572:	d3d3      	bcc.n	800751c <IntToUnicode+0x18>
  }
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	; 0x28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <HAL_PCD_MspInit+0x98>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d136      	bne.n	8007610 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a2:	4b1e      	ldr	r3, [pc, #120]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a8:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075b2:	4b1a      	ldr	r3, [pc, #104]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c6:	2302      	movs	r3, #2
 80075c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ce:	2300      	movs	r3, #0
 80075d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80075d2:	230a      	movs	r3, #10
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d6:	f107 0314 	add.w	r3, r7, #20
 80075da:	4619      	mov	r1, r3
 80075dc:	4810      	ldr	r0, [pc, #64]	; (8007620 <HAL_PCD_MspInit+0xa0>)
 80075de:	f7f9 faab 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075e2:	4b0e      	ldr	r3, [pc, #56]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075e8:	4a0c      	ldr	r2, [pc, #48]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_PCD_MspInit+0x9c>)
 80075f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007600:	2200      	movs	r2, #0
 8007602:	2100      	movs	r1, #0
 8007604:	2065      	movs	r0, #101	; 0x65
 8007606:	f7f9 fa62 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800760a:	2065      	movs	r0, #101	; 0x65
 800760c:	f7f9 fa79 	bl	8000b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007610:	bf00      	nop
 8007612:	3728      	adds	r7, #40	; 0x28
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40080000 	.word	0x40080000
 800761c:	58024400 	.word	0x58024400
 8007620:	58020000 	.word	0x58020000

08007624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f7fe fd4a 	bl	80060d4 <USBD_LL_SetupStage>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	4619      	mov	r1, r3
 8007672:	f7fe fd7a 	bl	800616a <USBD_LL_DataOutStage>
}
 8007676:	bf00      	nop
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3348      	adds	r3, #72	; 0x48
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	4619      	mov	r1, r3
 80076a6:	f7fe fdd1 	bl	800624c <USBD_LL_DataInStage>
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fee4 	bl	800648e <USBD_LL_SOF>
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	e008      	b.n	80076fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d102      	bne.n	80076f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e001      	b.n	80076fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076f6:	f7f8 ff3d 	bl	8000574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007700:	7bfa      	ldrb	r2, [r7, #15]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fe87 	bl	8006418 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fe40 	bl	8006396 <USBD_LL_Reset>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fe82 	bl	8006438 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <HAL_PCD_SuspendCallback+0x48>)
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	4a03      	ldr	r2, [pc, #12]	; (8007768 <HAL_PCD_SuspendCallback+0x48>)
 800775a:	f043 0306 	orr.w	r3, r3, #6
 800775e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	e000ed00 	.word	0xe000ed00

0800776c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fe71 	bl	8006462 <USBD_LL_Resume>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fe9c 	bl	80064dc <USBD_LL_IsoOUTIncomplete>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fe7d 	bl	80064c2 <USBD_LL_IsoINIncomplete>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fe89 	bl	80064f6 <USBD_LL_DevConnected>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fe86 	bl	800650c <USBD_LL_DevDisconnected>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d13e      	bne.n	8007896 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007818:	4a21      	ldr	r2, [pc, #132]	; (80078a0 <USBD_LL_Init+0x98>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <USBD_LL_Init+0x98>)
 8007824:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <USBD_LL_Init+0x98>)
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <USBD_LL_Init+0x9c>)
 800782c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <USBD_LL_Init+0x98>)
 8007830:	2209      	movs	r2, #9
 8007832:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <USBD_LL_Init+0x98>)
 8007836:	2202      	movs	r2, #2
 8007838:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <USBD_LL_Init+0x98>)
 800783c:	2200      	movs	r2, #0
 800783e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <USBD_LL_Init+0x98>)
 8007842:	2202      	movs	r2, #2
 8007844:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <USBD_LL_Init+0x98>)
 8007848:	2200      	movs	r2, #0
 800784a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <USBD_LL_Init+0x98>)
 800784e:	2200      	movs	r2, #0
 8007850:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <USBD_LL_Init+0x98>)
 8007854:	2200      	movs	r2, #0
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <USBD_LL_Init+0x98>)
 800785a:	2200      	movs	r2, #0
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <USBD_LL_Init+0x98>)
 8007860:	2200      	movs	r2, #0
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <USBD_LL_Init+0x98>)
 8007866:	2200      	movs	r2, #0
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800786a:	480d      	ldr	r0, [pc, #52]	; (80078a0 <USBD_LL_Init+0x98>)
 800786c:	f7f9 fb48 	bl	8000f00 <HAL_PCD_Init>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8007876:	f7f8 fe7d 	bl	8000574 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <USBD_LL_Init+0x98>)
 800787e:	f7fa fcda 	bl	8002236 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	2100      	movs	r1, #0
 8007886:	4806      	ldr	r0, [pc, #24]	; (80078a0 <USBD_LL_Init+0x98>)
 8007888:	f7fa fc8e 	bl	80021a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	2101      	movs	r1, #1
 8007890:	4803      	ldr	r0, [pc, #12]	; (80078a0 <USBD_LL_Init+0x98>)
 8007892:	f7fa fc89 	bl	80021a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	240016d8 	.word	0x240016d8
 80078a4:	40080000 	.word	0x40080000

080078a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078be:	4618      	mov	r0, r3
 80078c0:	f7f9 fc42 	bl	8001148 <HAL_PCD_Start>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f92e 	bl	8007b2c <USBD_Get_USB_Status>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	461a      	mov	r2, r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	70fb      	strb	r3, [r7, #3]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70bb      	strb	r3, [r7, #2]
 80078f4:	4613      	mov	r3, r2
 80078f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007906:	78bb      	ldrb	r3, [r7, #2]
 8007908:	883a      	ldrh	r2, [r7, #0]
 800790a:	78f9      	ldrb	r1, [r7, #3]
 800790c:	f7fa f853 	bl	80019b6 <HAL_PCD_EP_Open>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f908 	bl	8007b2c <USBD_Get_USB_Status>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007920:	7bbb      	ldrb	r3, [r7, #14]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4611      	mov	r1, r2
 8007948:	4618      	mov	r0, r3
 800794a:	f7fa f89c 	bl	8001a86 <HAL_PCD_EP_Close>
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f8e9 	bl	8007b2c <USBD_Get_USB_Status>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800795e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fa f974 	bl	8001c74 <HAL_PCD_EP_SetStall>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f8ca 	bl	8007b2c <USBD_Get_USB_Status>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800799c:	7bbb      	ldrb	r3, [r7, #14]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa f9b9 	bl	8001d3c <HAL_PCD_EP_ClrStall>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f8ab 	bl	8007b2c <USBD_Get_USB_Status>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80079da:	7bbb      	ldrb	r3, [r7, #14]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80079f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	da0b      	bge.n	8007a18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	333e      	adds	r3, #62	; 0x3e
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	e00b      	b.n	8007a30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a56:	78fa      	ldrb	r2, [r7, #3]
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f9 ff86 	bl	800196c <HAL_PCD_SetAddress>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f860 	bl	8007b2c <USBD_Get_USB_Status>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	461a      	mov	r2, r3
 8007a86:	460b      	mov	r3, r1
 8007a88:	72fb      	strb	r3, [r7, #11]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	7af9      	ldrb	r1, [r7, #11]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	f7fa f89d 	bl	8001be0 <HAL_PCD_EP_Transmit>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f83d 	bl	8007b2c <USBD_Get_USB_Status>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007ab6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	461a      	mov	r2, r3
 8007acc:	460b      	mov	r3, r1
 8007ace:	72fb      	strb	r3, [r7, #11]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	7af9      	ldrb	r1, [r7, #11]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	f7fa f817 	bl	8001b1a <HAL_PCD_EP_Receive>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f81a 	bl	8007b2c <USBD_Get_USB_Status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007afc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fa f847 	bl	8001bb0 <HAL_PCD_EP_GetRxCount>
 8007b22:	4603      	mov	r3, r0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d817      	bhi.n	8007b70 <USBD_Get_USB_Status+0x44>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <USBD_Get_USB_Status+0x1c>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b5f 	.word	0x08007b5f
 8007b50:	08007b65 	.word	0x08007b65
 8007b54:	08007b6b 	.word	0x08007b6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	e00b      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	73fb      	strb	r3, [r7, #15]
    break;
 8007b62:	e008      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
    break;
 8007b68:	e005      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6e:	e002      	b.n	8007b76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b70:	2302      	movs	r3, #2
 8007b72:	73fb      	strb	r3, [r7, #15]
    break;
 8007b74:	bf00      	nop
  }
  return usb_status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	; (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	24000180 	.word	0x24000180

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4e0d      	ldr	r6, [pc, #52]	; (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	; (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1ba4      	subs	r4, r4, r6
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	42a5      	cmp	r5, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4e0b      	ldr	r6, [pc, #44]	; (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	; (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f000 f8ea 	bl	8007d7c <_init>
 8007ba8:	1ba4      	subs	r4, r4, r6
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2500      	movs	r5, #0
 8007bae:	42a5      	cmp	r5, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb8:	4798      	blx	r3
 8007bba:	3501      	adds	r5, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bc2:	4798      	blx	r3
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	08007df4 	.word	0x08007df4
 8007bcc:	08007df4 	.word	0x08007df4
 8007bd0:	08007df4 	.word	0x08007df4
 8007bd4:	08007df8 	.word	0x08007df8

08007bd8 <malloc>:
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <malloc+0xc>)
 8007bda:	4601      	mov	r1, r0
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f000 b861 	b.w	8007ca4 <_malloc_r>
 8007be2:	bf00      	nop
 8007be4:	24000180 	.word	0x24000180

08007be8 <free>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <free+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f000 b80b 	b.w	8007c08 <_free_r>
 8007bf2:	bf00      	nop
 8007bf4:	24000180 	.word	0x24000180

08007bf8 <memset>:
 8007bf8:	4402      	add	r2, r0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d100      	bne.n	8007c02 <memset+0xa>
 8007c00:	4770      	bx	lr
 8007c02:	f803 1b01 	strb.w	r1, [r3], #1
 8007c06:	e7f9      	b.n	8007bfc <memset+0x4>

08007c08 <_free_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d045      	beq.n	8007c9c <_free_r+0x94>
 8007c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c14:	1f0c      	subs	r4, r1, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	18e4      	addlt	r4, r4, r3
 8007c1c:	f000 f8ac 	bl	8007d78 <__malloc_lock>
 8007c20:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <_free_r+0x98>)
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	4610      	mov	r0, r2
 8007c26:	b933      	cbnz	r3, 8007c36 <_free_r+0x2e>
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	6014      	str	r4, [r2, #0]
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c32:	f000 b8a2 	b.w	8007d7a <__malloc_unlock>
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	d90c      	bls.n	8007c54 <_free_r+0x4c>
 8007c3a:	6821      	ldr	r1, [r4, #0]
 8007c3c:	1862      	adds	r2, r4, r1
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	bf04      	itt	eq
 8007c42:	681a      	ldreq	r2, [r3, #0]
 8007c44:	685b      	ldreq	r3, [r3, #4]
 8007c46:	6063      	str	r3, [r4, #4]
 8007c48:	bf04      	itt	eq
 8007c4a:	1852      	addeq	r2, r2, r1
 8007c4c:	6022      	streq	r2, [r4, #0]
 8007c4e:	6004      	str	r4, [r0, #0]
 8007c50:	e7ec      	b.n	8007c2c <_free_r+0x24>
 8007c52:	4613      	mov	r3, r2
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	b10a      	cbz	r2, 8007c5c <_free_r+0x54>
 8007c58:	42a2      	cmp	r2, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x4a>
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	1858      	adds	r0, r3, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x74>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1858      	adds	r0, r3, r1
 8007c6a:	4282      	cmp	r2, r0
 8007c6c:	6019      	str	r1, [r3, #0]
 8007c6e:	d1dd      	bne.n	8007c2c <_free_r+0x24>
 8007c70:	6810      	ldr	r0, [r2, #0]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	4401      	add	r1, r0
 8007c78:	6019      	str	r1, [r3, #0]
 8007c7a:	e7d7      	b.n	8007c2c <_free_r+0x24>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x7c>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d3      	b.n	8007c2c <_free_r+0x24>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	bf04      	itt	eq
 8007c8c:	6811      	ldreq	r1, [r2, #0]
 8007c8e:	6852      	ldreq	r2, [r2, #4]
 8007c90:	6062      	str	r2, [r4, #4]
 8007c92:	bf04      	itt	eq
 8007c94:	1809      	addeq	r1, r1, r0
 8007c96:	6021      	streq	r1, [r4, #0]
 8007c98:	605c      	str	r4, [r3, #4]
 8007c9a:	e7c7      	b.n	8007c2c <_free_r+0x24>
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	24000208 	.word	0x24000208

08007ca4 <_malloc_r>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	1ccd      	adds	r5, r1, #3
 8007ca8:	f025 0503 	bic.w	r5, r5, #3
 8007cac:	3508      	adds	r5, #8
 8007cae:	2d0c      	cmp	r5, #12
 8007cb0:	bf38      	it	cc
 8007cb2:	250c      	movcc	r5, #12
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	db01      	blt.n	8007cbe <_malloc_r+0x1a>
 8007cba:	42a9      	cmp	r1, r5
 8007cbc:	d903      	bls.n	8007cc6 <_malloc_r+0x22>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	6033      	str	r3, [r6, #0]
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	f000 f857 	bl	8007d78 <__malloc_lock>
 8007cca:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <_malloc_r+0xac>)
 8007ccc:	6814      	ldr	r4, [r2, #0]
 8007cce:	4621      	mov	r1, r4
 8007cd0:	b991      	cbnz	r1, 8007cf8 <_malloc_r+0x54>
 8007cd2:	4c20      	ldr	r4, [pc, #128]	; (8007d54 <_malloc_r+0xb0>)
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	b91b      	cbnz	r3, 8007ce0 <_malloc_r+0x3c>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f000 f83d 	bl	8007d58 <_sbrk_r>
 8007cde:	6020      	str	r0, [r4, #0]
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f838 	bl	8007d58 <_sbrk_r>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d124      	bne.n	8007d36 <_malloc_r+0x92>
 8007cec:	230c      	movs	r3, #12
 8007cee:	6033      	str	r3, [r6, #0]
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f842 	bl	8007d7a <__malloc_unlock>
 8007cf6:	e7e4      	b.n	8007cc2 <_malloc_r+0x1e>
 8007cf8:	680b      	ldr	r3, [r1, #0]
 8007cfa:	1b5b      	subs	r3, r3, r5
 8007cfc:	d418      	bmi.n	8007d30 <_malloc_r+0x8c>
 8007cfe:	2b0b      	cmp	r3, #11
 8007d00:	d90f      	bls.n	8007d22 <_malloc_r+0x7e>
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	50cd      	str	r5, [r1, r3]
 8007d06:	18cc      	adds	r4, r1, r3
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f836 	bl	8007d7a <__malloc_unlock>
 8007d0e:	f104 000b 	add.w	r0, r4, #11
 8007d12:	1d23      	adds	r3, r4, #4
 8007d14:	f020 0007 	bic.w	r0, r0, #7
 8007d18:	1ac3      	subs	r3, r0, r3
 8007d1a:	d0d3      	beq.n	8007cc4 <_malloc_r+0x20>
 8007d1c:	425a      	negs	r2, r3
 8007d1e:	50e2      	str	r2, [r4, r3]
 8007d20:	e7d0      	b.n	8007cc4 <_malloc_r+0x20>
 8007d22:	428c      	cmp	r4, r1
 8007d24:	684b      	ldr	r3, [r1, #4]
 8007d26:	bf16      	itet	ne
 8007d28:	6063      	strne	r3, [r4, #4]
 8007d2a:	6013      	streq	r3, [r2, #0]
 8007d2c:	460c      	movne	r4, r1
 8007d2e:	e7eb      	b.n	8007d08 <_malloc_r+0x64>
 8007d30:	460c      	mov	r4, r1
 8007d32:	6849      	ldr	r1, [r1, #4]
 8007d34:	e7cc      	b.n	8007cd0 <_malloc_r+0x2c>
 8007d36:	1cc4      	adds	r4, r0, #3
 8007d38:	f024 0403 	bic.w	r4, r4, #3
 8007d3c:	42a0      	cmp	r0, r4
 8007d3e:	d005      	beq.n	8007d4c <_malloc_r+0xa8>
 8007d40:	1a21      	subs	r1, r4, r0
 8007d42:	4630      	mov	r0, r6
 8007d44:	f000 f808 	bl	8007d58 <_sbrk_r>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d0cf      	beq.n	8007cec <_malloc_r+0x48>
 8007d4c:	6025      	str	r5, [r4, #0]
 8007d4e:	e7db      	b.n	8007d08 <_malloc_r+0x64>
 8007d50:	24000208 	.word	0x24000208
 8007d54:	2400020c 	.word	0x2400020c

08007d58 <_sbrk_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4c06      	ldr	r4, [pc, #24]	; (8007d74 <_sbrk_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4605      	mov	r5, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	f7f8 fc60 	bl	8000628 <_sbrk>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_sbrk_r+0x1a>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_sbrk_r+0x1a>
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	24001ae0 	.word	0x24001ae0

08007d78 <__malloc_lock>:
 8007d78:	4770      	bx	lr

08007d7a <__malloc_unlock>:
 8007d7a:	4770      	bx	lr

08007d7c <_init>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr

08007d88 <_fini>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr
